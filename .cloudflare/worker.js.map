{
  "version": 3,
  "sources": ["../.svelte-kit/output/server/chunks/utils.js", "../.svelte-kit/output/server/chunks/equality.js", "../.svelte-kit/output/server/chunks/index.js", "../.svelte-kit/output/server/chunks/index3.js", "../.svelte-kit/output/server/chunks/exports.js", "../.svelte-kit/output/server/chunks/index2.js", "../../../node_modules/cookie/index.js", "../../../node_modules/set-cookie-parser/lib/set-cookie.js", "../.svelte-kit/output/server/entries/pages/_layout.js", "../.svelte-kit/output/server/chunks/session.js", "../.svelte-kit/output/server/entries/pages/_layout.server.js", "../.svelte-kit/output/server/chunks/client.js", "../.svelte-kit/output/server/entries/pages/_layout.svelte.js", "../.svelte-kit/output/server/nodes/0.js", "../.svelte-kit/output/server/chunks/escaping.js", "../.svelte-kit/output/server/entries/fallbacks/error.svelte.js", "../.svelte-kit/output/server/nodes/1.js", "../.svelte-kit/output/server/entries/pages/_page.js", "../.svelte-kit/output/server/entries/pages/_page.svelte.js", "../.svelte-kit/output/server/nodes/2.js", "../.svelte-kit/output/server/chunks/client2.js", "../.svelte-kit/output/server/chunks/_page.js", "../.svelte-kit/output/server/entries/pages/kv-storage/_page.js", "../.svelte-kit/output/server/entries/pages/kv-storage/_page.svelte.js", "../.svelte-kit/output/server/nodes/3.js", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/entity.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/column.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/column-builder.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/table.utils.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/foreign-keys.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/tracing-utils.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/unique-constraint.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/utils/array.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/columns/common.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/columns/enum.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/subquery.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/drizzle-orm/version.js", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/tracing.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/view-common.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/table.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/sql.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/alias.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/alias.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/checks.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/utils.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/foreign-keys.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/unique-constraint.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/common.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/blob.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/custom.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/integer.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/numeric.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/real.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/text.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/selection-proxy.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/query-promise.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/columns/all.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/table.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/delete.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/casing.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/errors.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/table.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/pg-core/primary-keys.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/expressions/conditions.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/expressions/select.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/expressions/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/relations.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/functions/aggregate.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/functions/vector.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/functions/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sql/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/view-base.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/dialect.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/query-builders/query-builder.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/select.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/query-builder.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/insert.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/drizzle-orm/sqlite-core/query-builders/select.types.js", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/update.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/count.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/query.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/query-builders/raw.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/db.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/indexes.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/primary-keys.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/session.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/drizzle-orm/sqlite-core/subquery.js", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/utils.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/view.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/sqlite-core/index.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/logger.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/d1/session.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/d1/driver.ts", "../node_modules/.pnpm/drizzle-orm@0.39.3_@cloudflare+workers-types@4.20250204.0_@libsql+client@0.14.0/node_modules/src/d1/index.ts", "../node_modules/.pnpm/@graphql-yoga+logger@2.0.1/node_modules/@graphql-yoga/logger/esm/index.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/graphiql-html.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-graphiql.js", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/version.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/devAssert.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/isObjectLike.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/invariant.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/location.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/printLocation.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/error/GraphQLError.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/error/syntaxError.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/ast.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/directiveLocation.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/kinds.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/characterClasses.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/blockString.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/tokenKind.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/lexer.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/inspect.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/instanceOf.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/source.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/parser.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/didYouMean.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/identityFunc.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/keyMap.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/keyValMap.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/mapValue.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/naturalCompare.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/suggestionList.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/toObjMap.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/printString.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/visitor.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/printer.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/valueFromASTUntyped.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/assertName.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/definition.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/typeComparators.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/scalars.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/directives.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/isIterableObject.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/astFromValue.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/introspection.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/schema.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/validate.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/typeFromAST.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/TypeInfo.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/predicates.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/MaxIntrospectionDepthRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/sortValueNode.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/printPathArray.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/Path.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/coerceInputValue.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/valueFromAST.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/execution/values.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/execution/collectFields.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/groupBy.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/specifiedRules.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/ValidationContext.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/validate.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/jsutils/toError.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/error/locatedError.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/execution/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/validation/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/error/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/getOperationAST.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/extendSchema.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/buildASTSchema.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/index.mjs", "../node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/index.mjs", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-schema.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/loaders.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/helpers.js", "../node_modules/.pnpm/cross-inspect@1.0.1/node_modules/cross-inspect/esm/index.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/errors.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/map-maybe-promise.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/jsutils.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getArgumentValues.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/memoize.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getDirectiveExtensions.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/get-directives.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/get-fields-with-directives.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/get-arguments-with-directives.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/get-implementing-types.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/astFromType.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/astFromValue.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/descriptionFromObject.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/rootTypes.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/validate-documents.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/parse-graphql-json.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/comments.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/parse-graphql-sdl.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/build-operation-for-field.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/types.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/Interfaces.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/stub.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/rewire.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/transformInputValue.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/mapSchema.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/filterSchema.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/heal.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getResolversFromSchema.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/forEachField.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/addTypes.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/prune.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/mergeDeep.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/selectionSets.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getResponseKeyFromInfo.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/fields.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/renameType.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/fakePromise.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/mapAsyncIterator.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/updateArgument.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/implementsAbstractType.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/observableToAsyncIterable.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/AccumulatorMap.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/directives.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/collectFields.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getOperationASTFromRequest.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/visitResult.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/valueMatchesCriteria.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/isAsyncIterable.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/isDocumentNode.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/executor.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/withCancel.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/fixSchemaAst.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/extractExtensionsFromSchema.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/Path.js", "../node_modules/.pnpm/dset@3.1.4/node_modules/dset/merge/index.mjs", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/mergeIncrementalResult.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/debugTimer.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/createDeferred.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/registerAbortSignalListener.js", "../node_modules/.pnpm/@graphql-tools+utils@10.8.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/index.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/merge-resolvers.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/typedefs-mergers/index.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/extensions.js", "../node_modules/.pnpm/@graphql-tools+merge@9.0.19_graphql@16.10.0/node_modules/@graphql-tools/merge/esm/index.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/types.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/merge-schemas.js", "../node_modules/.pnpm/@graphql-tools+schema@10.0.18_graphql@16.10.0/node_modules/@graphql-tools/schema/esm/index.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/schema.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/context-types.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/hooks.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/plugin.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/get-enveloped.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/graphql.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/utils.js", "../node_modules/.pnpm/@envelop+types@5.0.0/node_modules/@envelop/types/esm/index.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/document-string-map.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/utils.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/orchestrator.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/create.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-envelop.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-logger.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-schema.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-masked-errors.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-error-handler.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-extend-context.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-payload-formatter.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-engine.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/plugins/use-validation-rule.js", "../node_modules/.pnpm/@envelop+core@5.0.3/node_modules/@envelop/core/esm/index.js", "../node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/src/ValueOrPromise.ts", "../node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/src/index.ts", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/SupressedError.js", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/symbols.js", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/utils.js", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/AsyncDisposableStack.js", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/DisposableStack.js", "../node_modules/.pnpm/@whatwg-node+disposablestack@0.0.5/node_modules/@whatwg-node/disposablestack/esm/index.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/coerceError.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/index.js", "../node_modules/.pnpm/@graphql-tools+executor@1.3.14_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/index.js", "../node_modules/.pnpm/@whatwg-node+fetch@0.10.3/node_modules/@whatwg-node/fetch/dist/global-ponyfill.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/utils.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/uwebsockets.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/createServerAdapter.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/types.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/plugins/types.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/plugins/useCors.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/plugins/useErrorHandling.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/plugins/useContentEncoding.js", "../node_modules/.pnpm/@whatwg-node+server@0.9.66/node_modules/@whatwg-node/server/esm/index.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/error.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/utils.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/get.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-form-url-encoded.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-graphql-string.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-json.js", "../node_modules/.pnpm/dset@3.1.4/node_modules/dset/dist/index.mjs", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-parser/post-multipart.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-graphql-query-params.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-method-for-graphql.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-http-validation-error.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-limit-batching.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/request-validation/use-prevent-mutation-via-get.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-health-check.js", "../node_modules/.pnpm/lru-cache@10.4.3/node_modules/lru-cache/src/index.ts", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/utils/create-lru-cache.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-parser-and-validation-cache.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-request-parser.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/accept.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/stringify.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/multipart.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/regular.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/result-processor/sse.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-result-processor.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/landing-page-html.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/plugins/use-unhandled-route.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/process-request.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/utils/mask-error.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/server.js", "../node_modules/.pnpm/@repeaterjs+repeater@3.0.6/node_modules/@repeaterjs/repeater/repeater.js", "../node_modules/.pnpm/@graphql-yoga+subscription@5.0.3/node_modules/@graphql-yoga/subscription/esm/create-pub-sub.js", "../node_modules/.pnpm/@graphql-yoga+subscription@5.0.3/node_modules/@graphql-yoga/subscription/esm/operator/filter.js", "../node_modules/.pnpm/@graphql-yoga+subscription@5.0.3/node_modules/@graphql-yoga/subscription/esm/operator/map.js", "../node_modules/.pnpm/@graphql-yoga+subscription@5.0.3/node_modules/@graphql-yoga/subscription/esm/utils/pipe.js", "../node_modules/.pnpm/@graphql-yoga+subscription@5.0.3/node_modules/@graphql-yoga/subscription/esm/index.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/subscription.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/types.js", "../node_modules/.pnpm/graphql-yoga@5.11.0_graphql@16.10.0/node_modules/graphql-yoga/esm/index.js", "../.svelte-kit/output/server/entries/endpoints/graphql/_server.ts.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/mime/Mime.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/standard.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/mime/types/other.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/mime/index.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/types.js", "../.svelte-kit/cloudflare-workers-tmp/node_modules/@cloudflare/kv-asset-handler/dist/index.js", "../.svelte-kit/output/server/index.js", "../.svelte-kit/output/server/chunks/internal.js", "../../../node_modules/devalue/src/utils.js", "../../../node_modules/devalue/src/uneval.js", "../../../node_modules/devalue/src/constants.js", "../../../node_modules/devalue/src/stringify.js", "../.svelte-kit/cloudflare-workers-tmp/manifest.js", "../.svelte-kit/cloudflare-workers-tmp/entry.js"],
  "sourcesContent": ["const BROWSER = false;\nvar is_array = Array.isArray;\nvar index_of = Array.prototype.indexOf;\nvar array_from = Array.from;\nvar define_property = Object.defineProperty;\nvar get_descriptor = Object.getOwnPropertyDescriptor;\nconst noop = () => {\n};\nconst DERIVED = 1 << 1;\nconst EFFECT = 1 << 2;\nconst RENDER_EFFECT = 1 << 3;\nconst BLOCK_EFFECT = 1 << 4;\nconst BRANCH_EFFECT = 1 << 5;\nconst ROOT_EFFECT = 1 << 6;\nconst BOUNDARY_EFFECT = 1 << 7;\nconst UNOWNED = 1 << 8;\nconst DISCONNECTED = 1 << 9;\nconst CLEAN = 1 << 10;\nconst DIRTY = 1 << 11;\nconst MAYBE_DIRTY = 1 << 12;\nconst INERT = 1 << 13;\nconst DESTROYED = 1 << 14;\nconst EFFECT_RAN = 1 << 15;\nconst EFFECT_TRANSPARENT = 1 << 16;\nconst HEAD_EFFECT = 1 << 19;\nconst EFFECT_HAS_DERIVED = 1 << 20;\nconst LEGACY_PROPS = Symbol(\"legacy props\");\nfunction effect_update_depth_exceeded() {\n  {\n    throw new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\n  }\n}\nfunction hydration_failed() {\n  {\n    throw new Error(`https://svelte.dev/e/hydration_failed`);\n  }\n}\nfunction state_unsafe_local_read() {\n  {\n    throw new Error(`https://svelte.dev/e/state_unsafe_local_read`);\n  }\n}\nfunction state_unsafe_mutation() {\n  {\n    throw new Error(`https://svelte.dev/e/state_unsafe_mutation`);\n  }\n}\nlet tracing_mode_flag = false;\nlet component_context = null;\nfunction set_component_context(context) {\n  component_context = context;\n}\nfunction push(props, runes = false, fn) {\n  component_context = {\n    p: component_context,\n    c: null,\n    e: null,\n    m: false,\n    s: props,\n    x: null,\n    l: null\n  };\n}\nfunction pop(component) {\n  const context_stack_item = component_context;\n  if (context_stack_item !== null) {\n    const component_effects = context_stack_item.e;\n    if (component_effects !== null) {\n      var previous_effect = active_effect;\n      var previous_reaction = active_reaction;\n      context_stack_item.e = null;\n      try {\n        for (var i = 0; i < component_effects.length; i++) {\n          var component_effect = component_effects[i];\n          set_active_effect(component_effect.effect);\n          set_active_reaction(component_effect.reaction);\n          effect(component_effect.fn);\n        }\n      } finally {\n        set_active_effect(previous_effect);\n        set_active_reaction(previous_reaction);\n      }\n    }\n    component_context = context_stack_item.p;\n    context_stack_item.m = true;\n  }\n  return (\n    /** @type {T} */\n    {}\n  );\n}\nfunction is_runes() {\n  return true;\n}\nvar $window;\nvar first_child_getter;\nvar next_sibling_getter;\nfunction init_operations() {\n  if ($window !== void 0) {\n    return;\n  }\n  $window = window;\n  var element_prototype = Element.prototype;\n  var node_prototype = Node.prototype;\n  first_child_getter = get_descriptor(node_prototype, \"firstChild\").get;\n  next_sibling_getter = get_descriptor(node_prototype, \"nextSibling\").get;\n  element_prototype.__click = void 0;\n  element_prototype.__className = \"\";\n  element_prototype.__attributes = null;\n  element_prototype.__styles = null;\n  element_prototype.__e = void 0;\n  Text.prototype.__t = void 0;\n}\nfunction create_text(value = \"\") {\n  return document.createTextNode(value);\n}\n// @__NO_SIDE_EFFECTS__\nfunction get_first_child(node) {\n  return first_child_getter.call(node);\n}\n// @__NO_SIDE_EFFECTS__\nfunction get_next_sibling(node) {\n  return next_sibling_getter.call(node);\n}\nfunction clear_text_content(node) {\n  node.textContent = \"\";\n}\nfunction destroy_derived_effects(derived) {\n  var effects = derived.effects;\n  if (effects !== null) {\n    derived.effects = null;\n    for (var i = 0; i < effects.length; i += 1) {\n      destroy_effect(\n        /** @type {Effect} */\n        effects[i]\n      );\n    }\n  }\n}\nfunction get_derived_parent_effect(derived) {\n  var parent = derived.parent;\n  while (parent !== null) {\n    if ((parent.f & DERIVED) === 0) {\n      return (\n        /** @type {Effect} */\n        parent\n      );\n    }\n    parent = parent.parent;\n  }\n  return null;\n}\nfunction execute_derived(derived) {\n  var value;\n  var prev_active_effect = active_effect;\n  set_active_effect(get_derived_parent_effect(derived));\n  {\n    try {\n      destroy_derived_effects(derived);\n      value = update_reaction(derived);\n    } finally {\n      set_active_effect(prev_active_effect);\n    }\n  }\n  return value;\n}\nfunction update_derived(derived) {\n  var value = execute_derived(derived);\n  var status = (skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\n  set_signal_status(derived, status);\n  if (!derived.equals(value)) {\n    derived.v = value;\n    derived.wv = increment_write_version();\n  }\n}\nfunction push_effect(effect2, parent_effect) {\n  var parent_last = parent_effect.last;\n  if (parent_last === null) {\n    parent_effect.last = parent_effect.first = effect2;\n  } else {\n    parent_last.next = effect2;\n    effect2.prev = parent_last;\n    parent_effect.last = effect2;\n  }\n}\nfunction create_effect(type, fn, sync, push2 = true) {\n  var is_root = (type & ROOT_EFFECT) !== 0;\n  var parent_effect = active_effect;\n  var effect2 = {\n    ctx: component_context,\n    deps: null,\n    nodes_start: null,\n    nodes_end: null,\n    f: type | DIRTY,\n    first: null,\n    fn,\n    last: null,\n    next: null,\n    parent: is_root ? null : parent_effect,\n    prev: null,\n    teardown: null,\n    transitions: null,\n    wv: 0\n  };\n  if (sync) {\n    var previously_flushing_effect = is_flushing_effect;\n    try {\n      set_is_flushing_effect(true);\n      update_effect(effect2);\n      effect2.f |= EFFECT_RAN;\n    } catch (e) {\n      destroy_effect(effect2);\n      throw e;\n    } finally {\n      set_is_flushing_effect(previously_flushing_effect);\n    }\n  } else if (fn !== null) {\n    schedule_effect(effect2);\n  }\n  var inert = sync && effect2.deps === null && effect2.first === null && effect2.nodes_start === null && effect2.teardown === null && (effect2.f & (EFFECT_HAS_DERIVED | BOUNDARY_EFFECT)) === 0;\n  if (!inert && !is_root && push2) {\n    if (parent_effect !== null) {\n      push_effect(effect2, parent_effect);\n    }\n    if (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {\n      var derived = (\n        /** @type {Derived} */\n        active_reaction\n      );\n      (derived.effects ??= []).push(effect2);\n    }\n  }\n  return effect2;\n}\nfunction component_root(fn) {\n  const effect2 = create_effect(ROOT_EFFECT, fn, true);\n  return (options = {}) => {\n    return new Promise((fulfil) => {\n      if (options.outro) {\n        pause_effect(effect2, () => {\n          destroy_effect(effect2);\n          fulfil(void 0);\n        });\n      } else {\n        destroy_effect(effect2);\n        fulfil(void 0);\n      }\n    });\n  };\n}\nfunction effect(fn) {\n  return create_effect(EFFECT, fn, false);\n}\nfunction branch(fn, push2 = true) {\n  return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push2);\n}\nfunction execute_effect_teardown(effect2) {\n  var teardown = effect2.teardown;\n  if (teardown !== null) {\n    const previous_reaction = active_reaction;\n    set_active_reaction(null);\n    try {\n      teardown.call(null);\n    } finally {\n      set_active_reaction(previous_reaction);\n    }\n  }\n}\nfunction destroy_effect_children(signal, remove_dom = false) {\n  var effect2 = signal.first;\n  signal.first = signal.last = null;\n  while (effect2 !== null) {\n    var next = effect2.next;\n    destroy_effect(effect2, remove_dom);\n    effect2 = next;\n  }\n}\nfunction destroy_block_effect_children(signal) {\n  var effect2 = signal.first;\n  while (effect2 !== null) {\n    var next = effect2.next;\n    if ((effect2.f & BRANCH_EFFECT) === 0) {\n      destroy_effect(effect2);\n    }\n    effect2 = next;\n  }\n}\nfunction destroy_effect(effect2, remove_dom = true) {\n  var removed = false;\n  if ((remove_dom || (effect2.f & HEAD_EFFECT) !== 0) && effect2.nodes_start !== null) {\n    var node = effect2.nodes_start;\n    var end = effect2.nodes_end;\n    while (node !== null) {\n      var next = node === end ? null : (\n        /** @type {TemplateNode} */\n        /* @__PURE__ */ get_next_sibling(node)\n      );\n      node.remove();\n      node = next;\n    }\n    removed = true;\n  }\n  destroy_effect_children(effect2, remove_dom && !removed);\n  remove_reactions(effect2, 0);\n  set_signal_status(effect2, DESTROYED);\n  var transitions = effect2.transitions;\n  if (transitions !== null) {\n    for (const transition of transitions) {\n      transition.stop();\n    }\n  }\n  execute_effect_teardown(effect2);\n  var parent = effect2.parent;\n  if (parent !== null && parent.first !== null) {\n    unlink_effect(effect2);\n  }\n  effect2.next = effect2.prev = effect2.teardown = effect2.ctx = effect2.deps = effect2.fn = effect2.nodes_start = effect2.nodes_end = null;\n}\nfunction unlink_effect(effect2) {\n  var parent = effect2.parent;\n  var prev = effect2.prev;\n  var next = effect2.next;\n  if (prev !== null) prev.next = next;\n  if (next !== null) next.prev = prev;\n  if (parent !== null) {\n    if (parent.first === effect2) parent.first = next;\n    if (parent.last === effect2) parent.last = prev;\n  }\n}\nfunction pause_effect(effect2, callback) {\n  var transitions = [];\n  pause_children(effect2, transitions, true);\n  run_out_transitions(transitions, () => {\n    destroy_effect(effect2);\n    if (callback) callback();\n  });\n}\nfunction run_out_transitions(transitions, fn) {\n  var remaining = transitions.length;\n  if (remaining > 0) {\n    var check = () => --remaining || fn();\n    for (var transition of transitions) {\n      transition.out(check);\n    }\n  } else {\n    fn();\n  }\n}\nfunction pause_children(effect2, transitions, local) {\n  if ((effect2.f & INERT) !== 0) return;\n  effect2.f ^= INERT;\n  if (effect2.transitions !== null) {\n    for (const transition of effect2.transitions) {\n      if (transition.is_global || local) {\n        transitions.push(transition);\n      }\n    }\n  }\n  var child = effect2.first;\n  while (child !== null) {\n    var sibling = child.next;\n    var transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n    pause_children(child, transitions, transparent ? local : false);\n    child = sibling;\n  }\n}\nfunction flush_tasks() {\n}\nconst FLUSH_MICROTASK = 0;\nconst FLUSH_SYNC = 1;\nlet is_throwing_error = false;\nlet scheduler_mode = FLUSH_MICROTASK;\nlet is_micro_task_queued = false;\nlet last_scheduled_effect = null;\nlet is_flushing_effect = false;\nfunction set_is_flushing_effect(value) {\n  is_flushing_effect = value;\n}\nlet queued_root_effects = [];\nlet flush_count = 0;\nlet dev_effect_stack = [];\nlet active_reaction = null;\nlet untracking = false;\nfunction set_active_reaction(reaction) {\n  active_reaction = reaction;\n}\nlet active_effect = null;\nfunction set_active_effect(effect2) {\n  active_effect = effect2;\n}\nlet derived_sources = null;\nlet new_deps = null;\nlet skipped_deps = 0;\nlet untracked_writes = null;\nfunction set_untracked_writes(value) {\n  untracked_writes = value;\n}\nlet write_version = 1;\nlet read_version = 0;\nlet skip_reaction = false;\nfunction increment_write_version() {\n  return ++write_version;\n}\nfunction check_dirtiness(reaction) {\n  var flags = reaction.f;\n  if ((flags & DIRTY) !== 0) {\n    return true;\n  }\n  if ((flags & MAYBE_DIRTY) !== 0) {\n    var dependencies = reaction.deps;\n    var is_unowned = (flags & UNOWNED) !== 0;\n    if (dependencies !== null) {\n      var i;\n      var dependency;\n      var is_disconnected = (flags & DISCONNECTED) !== 0;\n      var is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\n      var length = dependencies.length;\n      if (is_disconnected || is_unowned_connected) {\n        var derived = (\n          /** @type {Derived} */\n          reaction\n        );\n        var parent = derived.parent;\n        for (i = 0; i < length; i++) {\n          dependency = dependencies[i];\n          if (is_disconnected || !dependency?.reactions?.includes(derived)) {\n            (dependency.reactions ??= []).push(derived);\n          }\n        }\n        if (is_disconnected) {\n          derived.f ^= DISCONNECTED;\n        }\n        if (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {\n          derived.f ^= UNOWNED;\n        }\n      }\n      for (i = 0; i < length; i++) {\n        dependency = dependencies[i];\n        if (check_dirtiness(\n          /** @type {Derived} */\n          dependency\n        )) {\n          update_derived(\n            /** @type {Derived} */\n            dependency\n          );\n        }\n        if (dependency.wv > reaction.wv) {\n          return true;\n        }\n      }\n    }\n    if (!is_unowned || active_effect !== null && !skip_reaction) {\n      set_signal_status(reaction, CLEAN);\n    }\n  }\n  return false;\n}\nfunction propagate_error(error, effect2) {\n  var current = effect2;\n  while (current !== null) {\n    if ((current.f & BOUNDARY_EFFECT) !== 0) {\n      try {\n        current.fn(error);\n        return;\n      } catch {\n        current.f ^= BOUNDARY_EFFECT;\n      }\n    }\n    current = current.parent;\n  }\n  is_throwing_error = false;\n  throw error;\n}\nfunction should_rethrow_error(effect2) {\n  return (effect2.f & DESTROYED) === 0 && (effect2.parent === null || (effect2.parent.f & BOUNDARY_EFFECT) === 0);\n}\nfunction handle_error(error, effect2, previous_effect, component_context2) {\n  if (is_throwing_error) {\n    if (previous_effect === null) {\n      is_throwing_error = false;\n    }\n    if (should_rethrow_error(effect2)) {\n      throw error;\n    }\n    return;\n  }\n  if (previous_effect !== null) {\n    is_throwing_error = true;\n  }\n  {\n    propagate_error(error, effect2);\n    return;\n  }\n}\nfunction schedule_possible_effect_self_invalidation(signal, effect2, root = true) {\n  var reactions = signal.reactions;\n  if (reactions === null) return;\n  for (var i = 0; i < reactions.length; i++) {\n    var reaction = reactions[i];\n    if ((reaction.f & DERIVED) !== 0) {\n      schedule_possible_effect_self_invalidation(\n        /** @type {Derived} */\n        reaction,\n        effect2,\n        false\n      );\n    } else if (effect2 === reaction) {\n      if (root) {\n        set_signal_status(reaction, DIRTY);\n      } else if ((reaction.f & CLEAN) !== 0) {\n        set_signal_status(reaction, MAYBE_DIRTY);\n      }\n      schedule_effect(\n        /** @type {Effect} */\n        reaction\n      );\n    }\n  }\n}\nfunction update_reaction(reaction) {\n  var previous_deps = new_deps;\n  var previous_skipped_deps = skipped_deps;\n  var previous_untracked_writes = untracked_writes;\n  var previous_reaction = active_reaction;\n  var previous_skip_reaction = skip_reaction;\n  var prev_derived_sources = derived_sources;\n  var previous_component_context = component_context;\n  var previous_untracking = untracking;\n  var flags = reaction.f;\n  new_deps = /** @type {null | Value[]} */\n  null;\n  skipped_deps = 0;\n  untracked_writes = null;\n  active_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n  skip_reaction = (flags & UNOWNED) !== 0 && (!is_flushing_effect || previous_reaction === null || previous_untracking);\n  derived_sources = null;\n  set_component_context(reaction.ctx);\n  untracking = false;\n  read_version++;\n  try {\n    var result = (\n      /** @type {Function} */\n      (0, reaction.fn)()\n    );\n    var deps = reaction.deps;\n    if (new_deps !== null) {\n      var i;\n      remove_reactions(reaction, skipped_deps);\n      if (deps !== null && skipped_deps > 0) {\n        deps.length = skipped_deps + new_deps.length;\n        for (i = 0; i < new_deps.length; i++) {\n          deps[skipped_deps + i] = new_deps[i];\n        }\n      } else {\n        reaction.deps = deps = new_deps;\n      }\n      if (!skip_reaction) {\n        for (i = skipped_deps; i < deps.length; i++) {\n          (deps[i].reactions ??= []).push(reaction);\n        }\n      }\n    } else if (deps !== null && skipped_deps < deps.length) {\n      remove_reactions(reaction, skipped_deps);\n      deps.length = skipped_deps;\n    }\n    if (is_runes() && untracked_writes !== null && !untracking && deps !== null && (reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0) {\n      for (i = 0; i < /** @type {Source[]} */\n      untracked_writes.length; i++) {\n        schedule_possible_effect_self_invalidation(\n          untracked_writes[i],\n          /** @type {Effect} */\n          reaction\n        );\n      }\n    }\n    if (previous_reaction !== null) {\n      read_version++;\n    }\n    return result;\n  } finally {\n    new_deps = previous_deps;\n    skipped_deps = previous_skipped_deps;\n    untracked_writes = previous_untracked_writes;\n    active_reaction = previous_reaction;\n    skip_reaction = previous_skip_reaction;\n    derived_sources = prev_derived_sources;\n    set_component_context(previous_component_context);\n    untracking = previous_untracking;\n  }\n}\nfunction remove_reaction(signal, dependency) {\n  let reactions = dependency.reactions;\n  if (reactions !== null) {\n    var index = index_of.call(reactions, signal);\n    if (index !== -1) {\n      var new_length = reactions.length - 1;\n      if (new_length === 0) {\n        reactions = dependency.reactions = null;\n      } else {\n        reactions[index] = reactions[new_length];\n        reactions.pop();\n      }\n    }\n  }\n  if (reactions === null && (dependency.f & DERIVED) !== 0 && // Destroying a child effect while updating a parent effect can cause a dependency to appear\n  // to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\n  // allows us to skip the expensive work of disconnecting and immediately reconnecting it\n  (new_deps === null || !new_deps.includes(dependency))) {\n    set_signal_status(dependency, MAYBE_DIRTY);\n    if ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\n      dependency.f ^= DISCONNECTED;\n    }\n    destroy_derived_effects(\n      /** @type {Derived} **/\n      dependency\n    );\n    remove_reactions(\n      /** @type {Derived} **/\n      dependency,\n      0\n    );\n  }\n}\nfunction remove_reactions(signal, start_index) {\n  var dependencies = signal.deps;\n  if (dependencies === null) return;\n  for (var i = start_index; i < dependencies.length; i++) {\n    remove_reaction(signal, dependencies[i]);\n  }\n}\nfunction update_effect(effect2) {\n  var flags = effect2.f;\n  if ((flags & DESTROYED) !== 0) {\n    return;\n  }\n  set_signal_status(effect2, CLEAN);\n  var previous_effect = active_effect;\n  var previous_component_context = component_context;\n  active_effect = effect2;\n  try {\n    if ((flags & BLOCK_EFFECT) !== 0) {\n      destroy_block_effect_children(effect2);\n    } else {\n      destroy_effect_children(effect2);\n    }\n    execute_effect_teardown(effect2);\n    var teardown = update_reaction(effect2);\n    effect2.teardown = typeof teardown === \"function\" ? teardown : null;\n    effect2.wv = write_version;\n    var deps = effect2.deps;\n    var dep;\n    if (BROWSER && tracing_mode_flag && (effect2.f & DIRTY) !== 0 && deps !== null) ;\n    if (BROWSER) ;\n  } catch (error) {\n    handle_error(error, effect2, previous_effect, previous_component_context || effect2.ctx);\n  } finally {\n    active_effect = previous_effect;\n  }\n}\nfunction infinite_loop_guard() {\n  if (flush_count > 1e3) {\n    flush_count = 0;\n    try {\n      effect_update_depth_exceeded();\n    } catch (error) {\n      if (last_scheduled_effect !== null) {\n        {\n          handle_error(error, last_scheduled_effect, null);\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n  flush_count++;\n}\nfunction flush_queued_root_effects(root_effects) {\n  var length = root_effects.length;\n  if (length === 0) {\n    return;\n  }\n  infinite_loop_guard();\n  var previously_flushing_effect = is_flushing_effect;\n  is_flushing_effect = true;\n  try {\n    for (var i = 0; i < length; i++) {\n      var effect2 = root_effects[i];\n      if ((effect2.f & CLEAN) === 0) {\n        effect2.f ^= CLEAN;\n      }\n      var collected_effects = process_effects(effect2);\n      flush_queued_effects(collected_effects);\n    }\n  } finally {\n    is_flushing_effect = previously_flushing_effect;\n  }\n}\nfunction flush_queued_effects(effects) {\n  var length = effects.length;\n  if (length === 0) return;\n  for (var i = 0; i < length; i++) {\n    var effect2 = effects[i];\n    if ((effect2.f & (DESTROYED | INERT)) === 0) {\n      try {\n        if (check_dirtiness(effect2)) {\n          update_effect(effect2);\n          if (effect2.deps === null && effect2.first === null && effect2.nodes_start === null) {\n            if (effect2.teardown === null) {\n              unlink_effect(effect2);\n            } else {\n              effect2.fn = null;\n            }\n          }\n        }\n      } catch (error) {\n        handle_error(error, effect2, null, effect2.ctx);\n      }\n    }\n  }\n}\nfunction process_deferred() {\n  is_micro_task_queued = false;\n  if (flush_count > 1001) {\n    return;\n  }\n  const previous_queued_root_effects = queued_root_effects;\n  queued_root_effects = [];\n  flush_queued_root_effects(previous_queued_root_effects);\n  if (!is_micro_task_queued) {\n    flush_count = 0;\n    last_scheduled_effect = null;\n  }\n}\nfunction schedule_effect(signal) {\n  if (scheduler_mode === FLUSH_MICROTASK) {\n    if (!is_micro_task_queued) {\n      is_micro_task_queued = true;\n      queueMicrotask(process_deferred);\n    }\n  }\n  last_scheduled_effect = signal;\n  var effect2 = signal;\n  while (effect2.parent !== null) {\n    effect2 = effect2.parent;\n    var flags = effect2.f;\n    if ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\n      if ((flags & CLEAN) === 0) return;\n      effect2.f ^= CLEAN;\n    }\n  }\n  queued_root_effects.push(effect2);\n}\nfunction process_effects(effect2) {\n  var effects = [];\n  var current_effect = effect2.first;\n  main_loop: while (current_effect !== null) {\n    var flags = current_effect.f;\n    var is_branch = (flags & BRANCH_EFFECT) !== 0;\n    var is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\n    var sibling = current_effect.next;\n    if (!is_skippable_branch && (flags & INERT) === 0) {\n      if ((flags & EFFECT) !== 0) {\n        effects.push(current_effect);\n      } else if (is_branch) {\n        current_effect.f ^= CLEAN;\n      } else {\n        var previous_active_reaction = active_reaction;\n        try {\n          active_reaction = current_effect;\n          if (check_dirtiness(current_effect)) {\n            update_effect(current_effect);\n          }\n        } catch (error) {\n          handle_error(error, current_effect, null, current_effect.ctx);\n        } finally {\n          active_reaction = previous_active_reaction;\n        }\n      }\n      var child = current_effect.first;\n      if (child !== null) {\n        current_effect = child;\n        continue;\n      }\n    }\n    if (sibling === null) {\n      let parent = current_effect.parent;\n      while (parent !== null) {\n        if (effect2 === parent) {\n          break main_loop;\n        }\n        var parent_sibling = parent.next;\n        if (parent_sibling !== null) {\n          current_effect = parent_sibling;\n          continue main_loop;\n        }\n        parent = parent.parent;\n      }\n    }\n    current_effect = sibling;\n  }\n  return effects;\n}\nfunction flush_sync(fn) {\n  var previous_scheduler_mode = scheduler_mode;\n  var previous_queued_root_effects = queued_root_effects;\n  try {\n    infinite_loop_guard();\n    const root_effects = [];\n    scheduler_mode = FLUSH_SYNC;\n    queued_root_effects = root_effects;\n    is_micro_task_queued = false;\n    flush_queued_root_effects(previous_queued_root_effects);\n    var result = fn?.();\n    flush_tasks();\n    if (queued_root_effects.length > 0 || root_effects.length > 0) {\n      flush_sync();\n    }\n    flush_count = 0;\n    last_scheduled_effect = null;\n    if (BROWSER) ;\n    return result;\n  } finally {\n    scheduler_mode = previous_scheduler_mode;\n    queued_root_effects = previous_queued_root_effects;\n  }\n}\nfunction get(signal) {\n  var flags = signal.f;\n  var is_derived = (flags & DERIVED) !== 0;\n  if (active_reaction !== null && !untracking) {\n    if (derived_sources !== null && derived_sources.includes(signal)) {\n      state_unsafe_local_read();\n    }\n    var deps = active_reaction.deps;\n    if (signal.rv < read_version) {\n      signal.rv = read_version;\n      if (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\n        skipped_deps++;\n      } else if (new_deps === null) {\n        new_deps = [signal];\n      } else if (!skip_reaction || !new_deps.includes(signal)) {\n        new_deps.push(signal);\n      }\n    }\n  } else if (is_derived && /** @type {Derived} */\n  signal.deps === null && /** @type {Derived} */\n  signal.effects === null) {\n    var derived = (\n      /** @type {Derived} */\n      signal\n    );\n    var parent = derived.parent;\n    if (parent !== null && (parent.f & UNOWNED) === 0) {\n      derived.f ^= UNOWNED;\n    }\n  }\n  if (is_derived) {\n    derived = /** @type {Derived} */\n    signal;\n    if (check_dirtiness(derived)) {\n      update_derived(derived);\n    }\n  }\n  return signal.v;\n}\nfunction untrack(fn) {\n  var previous_untracking = untracking;\n  try {\n    untracking = true;\n    return fn();\n  } finally {\n    untracking = previous_untracking;\n  }\n}\nconst STATUS_MASK = -7169;\nfunction set_signal_status(signal, status) {\n  signal.f = signal.f & STATUS_MASK | status;\n}\nfunction subscribe_to_store(store, run, invalidate) {\n  if (store == null) {\n    run(void 0);\n    return noop;\n  }\n  const unsub = untrack(\n    () => store.subscribe(\n      run,\n      // @ts-expect-error\n      invalidate\n    )\n  );\n  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nexport {\n  create_text as A,\n  BLOCK_EFFECT as B,\n  CLEAN as C,\n  DIRTY as D,\n  branch as E,\n  push as F,\n  component_context as G,\n  pop as H,\n  get as I,\n  flush_sync as J,\n  BROWSER as K,\n  LEGACY_PROPS as L,\n  MAYBE_DIRTY as M,\n  ROOT_EFFECT as R,\n  UNOWNED as U,\n  set_signal_status as a,\n  DERIVED as b,\n  schedule_effect as c,\n  active_reaction as d,\n  is_runes as e,\n  derived_sources as f,\n  state_unsafe_mutation as g,\n  active_effect as h,\n  increment_write_version as i,\n  BRANCH_EFFECT as j,\n  untracked_writes as k,\n  set_untracked_writes as l,\n  get_next_sibling as m,\n  noop as n,\n  define_property as o,\n  set_active_reaction as p,\n  set_active_effect as q,\n  is_array as r,\n  subscribe_to_store as s,\n  init_operations as t,\n  untracking as u,\n  get_first_child as v,\n  hydration_failed as w,\n  clear_text_content as x,\n  array_from as y,\n  component_root as z\n};\n", "function equals(value) {\n  return value === this.v;\n}\nfunction safe_not_equal(a, b) {\n  return a != a ? b == b : a !== b || a !== null && typeof a === \"object\" || typeof a === \"function\";\n}\nfunction safe_equals(value) {\n  return !safe_not_equal(value, this.v);\n}\nexport {\n  safe_equals as a,\n  equals as e,\n  safe_not_equal as s\n};\n", "import { s as subscribe_to_store } from \"./utils.js\";\nconst HYDRATION_START = \"[\";\nconst HYDRATION_END = \"]\";\nconst HYDRATION_ERROR = {};\nfunction lifecycle_outside_component(name) {\n  {\n    throw new Error(`https://svelte.dev/e/lifecycle_outside_component`);\n  }\n}\nvar current_component = null;\nfunction getContext(key) {\n  const context_map = get_or_init_context_map();\n  const result = (\n    /** @type {T} */\n    context_map.get(key)\n  );\n  return result;\n}\nfunction setContext(key, context) {\n  get_or_init_context_map().set(key, context);\n  return context;\n}\nfunction get_or_init_context_map(name) {\n  if (current_component === null) {\n    lifecycle_outside_component();\n  }\n  return current_component.c ??= new Map(get_parent_context(current_component) || void 0);\n}\nfunction push(fn) {\n  current_component = { p: current_component, c: null, d: null };\n}\nfunction pop() {\n  var component = (\n    /** @type {Component} */\n    current_component\n  );\n  var ondestroy = component.d;\n  if (ondestroy) {\n    on_destroy.push(...ondestroy);\n  }\n  current_component = component.p;\n}\nfunction get_parent_context(component_context) {\n  let parent = component_context.p;\n  while (parent !== null) {\n    const context_map = parent.c;\n    if (context_map !== null) {\n      return context_map;\n    }\n    parent = parent.p;\n  }\n  return null;\n}\nconst BLOCK_OPEN = `<!--${HYDRATION_START}-->`;\nconst BLOCK_CLOSE = `<!--${HYDRATION_END}-->`;\nlet on_destroy = [];\nfunction props_id_generator() {\n  let uid = 1;\n  return () => \"s\" + uid++;\n}\nfunction render(component, options = {}) {\n  const payload = {\n    out: \"\",\n    css: /* @__PURE__ */ new Set(),\n    head: { title: \"\", out: \"\" },\n    uid: options.uid ?? props_id_generator()\n  };\n  const prev_on_destroy = on_destroy;\n  on_destroy = [];\n  payload.out += BLOCK_OPEN;\n  if (options.context) {\n    push();\n    current_component.c = options.context;\n  }\n  component(payload, options.props ?? {}, {}, {});\n  if (options.context) {\n    pop();\n  }\n  payload.out += BLOCK_CLOSE;\n  for (const cleanup of on_destroy) cleanup();\n  on_destroy = prev_on_destroy;\n  let head = payload.head.out + payload.head.title;\n  for (const { hash, code } of payload.css) {\n    head += `<style id=\"${hash}\">${code}</style>`;\n  }\n  return {\n    head,\n    html: payload.out,\n    body: payload.out\n  };\n}\nfunction store_get(store_values, store_name, store) {\n  if (store_name in store_values && store_values[store_name][0] === store) {\n    return store_values[store_name][2];\n  }\n  store_values[store_name]?.[1]();\n  store_values[store_name] = [store, null, void 0];\n  const unsub = subscribe_to_store(\n    store,\n    /** @param {any} v */\n    (v) => store_values[store_name][2] = v\n  );\n  store_values[store_name][1] = unsub;\n  return store_values[store_name][2];\n}\nfunction unsubscribe_stores(store_values) {\n  for (const store_name in store_values) {\n    store_values[store_name][1]();\n  }\n}\nfunction ensure_array_like(array_like_or_iterator) {\n  if (array_like_or_iterator) {\n    return array_like_or_iterator.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);\n  }\n  return [];\n}\nexport {\n  HYDRATION_ERROR as H,\n  push as a,\n  HYDRATION_START as b,\n  HYDRATION_END as c,\n  setContext as d,\n  ensure_array_like as e,\n  getContext as g,\n  pop as p,\n  render as r,\n  store_get as s,\n  unsubscribe_stores as u\n};\n", "class HttpError {\n  /**\n   * @param {number} status\n   * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n   */\n  constructor(status, body) {\n    this.status = status;\n    if (typeof body === \"string\") {\n      this.body = { message: body };\n    } else if (body) {\n      this.body = body;\n    } else {\n      this.body = { message: `Error: ${status}` };\n    }\n  }\n  toString() {\n    return JSON.stringify(this.body);\n  }\n}\nclass Redirect {\n  /**\n   * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n   * @param {string} location\n   */\n  constructor(status, location) {\n    this.status = status;\n    this.location = location;\n  }\n}\nclass SvelteKitError extends Error {\n  /**\n   * @param {number} status\n   * @param {string} text\n   * @param {string} message\n   */\n  constructor(status, text2, message) {\n    super(message);\n    this.status = status;\n    this.text = text2;\n  }\n}\nclass ActionFailure {\n  /**\n   * @param {number} status\n   * @param {T} data\n   */\n  constructor(status, data) {\n    this.status = status;\n    this.data = data;\n  }\n}\nfunction error(status, body) {\n  if (isNaN(status) || status < 400 || status > 599) {\n    throw new Error(`HTTP error status codes must be between 400 and 599 \u2014 ${status} is invalid`);\n  }\n  throw new HttpError(status, body);\n}\nfunction redirect(status, location) {\n  if (isNaN(status) || status < 300 || status > 308) {\n    throw new Error(\"Invalid status code\");\n  }\n  throw new Redirect(\n    // @ts-ignore\n    status,\n    location.toString()\n  );\n}\nfunction json(data, init) {\n  const body = JSON.stringify(data);\n  const headers = new Headers(init?.headers);\n  if (!headers.has(\"content-length\")) {\n    headers.set(\"content-length\", encoder.encode(body).byteLength.toString());\n  }\n  if (!headers.has(\"content-type\")) {\n    headers.set(\"content-type\", \"application/json\");\n  }\n  return new Response(body, {\n    ...init,\n    headers\n  });\n}\nconst encoder = new TextEncoder();\nfunction text(body, init) {\n  const headers = new Headers(init?.headers);\n  if (!headers.has(\"content-length\")) {\n    const encoded = encoder.encode(body);\n    headers.set(\"content-length\", encoded.byteLength.toString());\n    return new Response(encoded, {\n      ...init,\n      headers\n    });\n  }\n  return new Response(body, {\n    ...init,\n    headers\n  });\n}\nexport {\n  ActionFailure as A,\n  HttpError as H,\n  Redirect as R,\n  SvelteKitError as S,\n  error as e,\n  json as j,\n  redirect as r,\n  text as t\n};\n", "const internal = new URL(\"sveltekit-internal://\");\nfunction resolve(base, path) {\n  if (path[0] === \"/\" && path[1] === \"/\") return path;\n  let url = new URL(base, internal);\n  url = new URL(path, url);\n  return url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\nfunction normalize_path(path, trailing_slash) {\n  if (path === \"/\" || trailing_slash === \"ignore\") return path;\n  if (trailing_slash === \"never\") {\n    return path.endsWith(\"/\") ? path.slice(0, -1) : path;\n  } else if (trailing_slash === \"always\" && !path.endsWith(\"/\")) {\n    return path + \"/\";\n  }\n  return path;\n}\nfunction decode_pathname(pathname) {\n  return pathname.split(\"%25\").map(decodeURI).join(\"%25\");\n}\nfunction decode_params(params) {\n  for (const key in params) {\n    params[key] = decodeURIComponent(params[key]);\n  }\n  return params;\n}\nfunction make_trackable(url, callback, search_params_callback, allow_hash = false) {\n  const tracked = new URL(url);\n  Object.defineProperty(tracked, \"searchParams\", {\n    value: new Proxy(tracked.searchParams, {\n      get(obj, key) {\n        if (key === \"get\" || key === \"getAll\" || key === \"has\") {\n          return (param) => {\n            search_params_callback(param);\n            return obj[key](param);\n          };\n        }\n        callback();\n        const value = Reflect.get(obj, key);\n        return typeof value === \"function\" ? value.bind(obj) : value;\n      }\n    }),\n    enumerable: true,\n    configurable: true\n  });\n  const tracked_url_properties = [\"href\", \"pathname\", \"search\", \"toString\", \"toJSON\"];\n  if (allow_hash) tracked_url_properties.push(\"hash\");\n  for (const property of tracked_url_properties) {\n    Object.defineProperty(tracked, property, {\n      get() {\n        callback();\n        return url[property];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n  {\n    tracked[Symbol.for(\"nodejs.util.inspect.custom\")] = (depth, opts, inspect) => {\n      return inspect(url, opts);\n    };\n    tracked.searchParams[Symbol.for(\"nodejs.util.inspect.custom\")] = (depth, opts, inspect) => {\n      return inspect(url.searchParams, opts);\n    };\n  }\n  if (!allow_hash) {\n    disable_hash(tracked);\n  }\n  return tracked;\n}\nfunction disable_hash(url) {\n  allow_nodejs_console_log(url);\n  Object.defineProperty(url, \"hash\", {\n    get() {\n      throw new Error(\n        \"Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead\"\n      );\n    }\n  });\n}\nfunction disable_search(url) {\n  allow_nodejs_console_log(url);\n  for (const property of [\"search\", \"searchParams\"]) {\n    Object.defineProperty(url, property, {\n      get() {\n        throw new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n      }\n    });\n  }\n}\nfunction allow_nodejs_console_log(url) {\n  {\n    url[Symbol.for(\"nodejs.util.inspect.custom\")] = (depth, opts, inspect) => {\n      return inspect(new URL(url), opts);\n    };\n  }\n}\nfunction validator(expected) {\n  function validate(module, file) {\n    if (!module) return;\n    for (const key in module) {\n      if (key[0] === \"_\" || expected.has(key)) continue;\n      const values = [...expected.values()];\n      const hint = hint_for_supported_files(key, file?.slice(file.lastIndexOf(\".\"))) ?? `valid exports are ${values.join(\", \")}, or anything with a '_' prefix`;\n      throw new Error(`Invalid export '${key}'${file ? ` in ${file}` : \"\"} (${hint})`);\n    }\n  }\n  return validate;\n}\nfunction hint_for_supported_files(key, ext = \".js\") {\n  const supported_files = [];\n  if (valid_layout_exports.has(key)) {\n    supported_files.push(`+layout${ext}`);\n  }\n  if (valid_page_exports.has(key)) {\n    supported_files.push(`+page${ext}`);\n  }\n  if (valid_layout_server_exports.has(key)) {\n    supported_files.push(`+layout.server${ext}`);\n  }\n  if (valid_page_server_exports.has(key)) {\n    supported_files.push(`+page.server${ext}`);\n  }\n  if (valid_server_exports.has(key)) {\n    supported_files.push(`+server${ext}`);\n  }\n  if (supported_files.length > 0) {\n    return `'${key}' is a valid export in ${supported_files.slice(0, -1).join(\", \")}${supported_files.length > 1 ? \" or \" : \"\"}${supported_files.at(-1)}`;\n  }\n}\nconst valid_layout_exports = /* @__PURE__ */ new Set([\n  \"load\",\n  \"prerender\",\n  \"csr\",\n  \"ssr\",\n  \"trailingSlash\",\n  \"config\"\n]);\nconst valid_page_exports = /* @__PURE__ */ new Set([...valid_layout_exports, \"entries\"]);\nconst valid_layout_server_exports = /* @__PURE__ */ new Set([...valid_layout_exports]);\nconst valid_page_server_exports = /* @__PURE__ */ new Set([...valid_layout_server_exports, \"actions\", \"entries\"]);\nconst valid_server_exports = /* @__PURE__ */ new Set([\n  \"GET\",\n  \"POST\",\n  \"PATCH\",\n  \"PUT\",\n  \"DELETE\",\n  \"OPTIONS\",\n  \"HEAD\",\n  \"fallback\",\n  \"prerender\",\n  \"trailingSlash\",\n  \"config\",\n  \"entries\"\n]);\nconst validate_layout_exports = validator(valid_layout_exports);\nconst validate_page_exports = validator(valid_page_exports);\nconst validate_layout_server_exports = validator(valid_layout_server_exports);\nconst validate_page_server_exports = validator(valid_page_server_exports);\nconst validate_server_exports = validator(valid_server_exports);\nexport {\n  decode_params as a,\n  decode_pathname as b,\n  validate_layout_exports as c,\n  disable_search as d,\n  validate_page_server_exports as e,\n  validate_page_exports as f,\n  validate_server_exports as g,\n  make_trackable as m,\n  normalize_path as n,\n  resolve as r,\n  validate_layout_server_exports as v\n};\n", "import { n as noop, s as subscribe_to_store } from \"./utils.js\";\nimport { s as safe_not_equal } from \"./equality.js\";\nconst subscriber_queue = [];\nfunction readable(value, start) {\n  return {\n    subscribe: writable(value, start).subscribe\n  };\n}\nfunction writable(value, start = noop) {\n  let stop = null;\n  const subscribers = /* @__PURE__ */ new Set();\n  function set(new_value) {\n    if (safe_not_equal(value, new_value)) {\n      value = new_value;\n      if (stop) {\n        const run_queue = !subscriber_queue.length;\n        for (const subscriber of subscribers) {\n          subscriber[1]();\n          subscriber_queue.push(subscriber, value);\n        }\n        if (run_queue) {\n          for (let i = 0; i < subscriber_queue.length; i += 2) {\n            subscriber_queue[i][0](subscriber_queue[i + 1]);\n          }\n          subscriber_queue.length = 0;\n        }\n      }\n    }\n  }\n  function update(fn) {\n    set(fn(\n      /** @type {T} */\n      value\n    ));\n  }\n  function subscribe(run, invalidate = noop) {\n    const subscriber = [run, invalidate];\n    subscribers.add(subscriber);\n    if (subscribers.size === 1) {\n      stop = start(set, update) || noop;\n    }\n    run(\n      /** @type {T} */\n      value\n    );\n    return () => {\n      subscribers.delete(subscriber);\n      if (subscribers.size === 0 && stop) {\n        stop();\n        stop = null;\n      }\n    };\n  }\n  return { set, update, subscribe };\n}\nfunction get(store) {\n  let value;\n  subscribe_to_store(store, (_) => value = _)();\n  return value;\n}\nexport {\n  get as g,\n  readable as r,\n  writable as w\n};\n", "/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned'\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n", "\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n", "async function load(event) {\n  return {\n    ...event.data,\n    ...{}\n  };\n}\nexport {\n  load\n};\n", "import { g as get } from \"./index2.js\";\nimport { e as error$1, r as redirect$1 } from \"./index3.js\";\nconst error = error$1;\nconst redirect = redirect$1;\nconst sessionKeyName = \"__houdini__session__\";\nclass RequestContext {\n  loadEvent;\n  continue = true;\n  returnValue = {};\n  constructor(ctx) {\n    this.loadEvent = ctx;\n  }\n  error(status, message) {\n    throw error(status, typeof message === \"string\" ? message : message.message);\n  }\n  redirect(status, location) {\n    throw redirect(status, location);\n  }\n  fetch(input, init) {\n    const fetch = typeof window !== \"undefined\" ? this.loadEvent.fetch.bind(window) : this.loadEvent.fetch;\n    return fetch(input, init);\n  }\n  async invokeLoadHook({\n    variant,\n    hookFn,\n    input,\n    data,\n    error: error2\n  }) {\n    let hookCall;\n    if (variant === \"before\") {\n      hookCall = hookFn.call(this, this.loadEvent);\n    } else if (variant === \"after\") {\n      hookCall = hookFn.call(this, {\n        event: this.loadEvent,\n        input,\n        data: Object.fromEntries(\n          Object.entries(data).map(([key, store]) => [\n            key,\n            get(store).data\n          ])\n        )\n      });\n    } else if (variant === \"error\") {\n      hookCall = hookFn.call(this, {\n        event: this.loadEvent,\n        input,\n        error: error2\n      });\n    }\n    let result = await hookCall;\n    if (!this.continue) {\n      return;\n    }\n    if (result == null || typeof result !== \"object\") {\n      return;\n    }\n    this.returnValue = result;\n  }\n}\nconst sessionSentinel = {};\nlet session = sessionSentinel;\nfunction extractSession(val) {\n  return val[sessionKeyName];\n}\nfunction buildSessionObject(event) {\n  return {\n    [sessionKeyName]: extractSession(event.locals)\n  };\n}\nfunction setClientSession(val) {\n  {\n    return;\n  }\n}\nasync function getSession(event) {\n  if (event) {\n    if (\"locals\" in event) {\n      return extractSession(event.locals) || sessionSentinel;\n    } else if (\"data\" in event && event.data && sessionKeyName in event.data) {\n      return extractSession(event.data) || sessionSentinel;\n    } else {\n      return extractSession(await event.parent()) || sessionSentinel;\n    }\n  }\n  return session;\n}\nexport {\n  RequestContext as R,\n  buildSessionObject as b,\n  extractSession as e,\n  getSession as g,\n  setClientSession as s\n};\n", "import { b as buildSessionObject } from \"../../chunks/session.js\";\nasync function load(event) {\n  return {\n    ...buildSessionObject(event),\n    ...{}\n  };\n}\nexport {\n  load\n};\n", "import \"./exports.js\";\nimport { w as writable } from \"./index2.js\";\nimport { n as noop } from \"./utils.js\";\nfunction get(key, parse = JSON.parse) {\n  try {\n    return parse(sessionStorage[key]);\n  } catch {\n  }\n}\nconst SNAPSHOT_KEY = \"sveltekit:snapshot\";\nconst SCROLL_KEY = \"sveltekit:scroll\";\nfunction create_updated_store() {\n  const { set, subscribe } = writable(false);\n  {\n    return {\n      subscribe,\n      // eslint-disable-next-line @typescript-eslint/require-await\n      check: async () => false\n    };\n  }\n}\nconst is_legacy = noop.toString().includes(\"$$\") || /function \\w+\\(\\) \\{\\}/.test(noop.toString());\nif (is_legacy) {\n  ({\n    data: {},\n    form: null,\n    error: null,\n    params: {},\n    route: { id: null },\n    state: {},\n    status: -1,\n    url: new URL(\"https://example.com\")\n  });\n}\nget(SCROLL_KEY) ?? {};\nget(SNAPSHOT_KEY) ?? {};\nconst stores = {\n  updated: /* @__PURE__ */ create_updated_store()\n};\nexport {\n  stores as s\n};\n", "import { g as getContext, p as pop, a as push } from \"../../chunks/index.js\";\nimport \"../../chunks/client.js\";\nimport { s as setClientSession, e as extractSession } from \"../../chunks/session.js\";\nimport \"../../chunks/index3.js\";\nconst getStores = () => {\n  const stores$1 = getContext(\"__svelte__\");\n  return {\n    /** @type {typeof page} */\n    page: {\n      subscribe: stores$1.page.subscribe\n    },\n    /** @type {typeof navigating} */\n    navigating: {\n      subscribe: stores$1.navigating.subscribe\n    },\n    /** @type {typeof updated} */\n    updated: stores$1.updated\n  };\n};\nconst page = {\n  subscribe(fn) {\n    const store = getStores().page;\n    return store.subscribe(fn);\n  }\n};\nfunction _layout($$payload, $$props) {\n  push();\n  let { children } = $$props;\n  page.subscribe((val) => {\n    setClientSession(extractSession(val.data));\n  });\n  children($$payload);\n  $$payload.out += `<!---->`;\n  pop();\n}\nexport {\n  _layout as default\n};\n", "import * as universal from '../entries/pages/_layout.js';\nimport * as server from '../entries/pages/_layout.server.js';\n\nexport const index = 0;\nlet component_cache;\nexport const component = async () => component_cache ??= (await import('../entries/pages/_layout.svelte.js')).default;\nexport { universal };\nexport const universal_id = \"src/routes/+layout.js\";\nexport { server };\nexport const server_id = \"src/routes/+layout.server.js\";\nexport const imports = [\"_app/immutable/nodes/0.D5j2WoAU.js\",\"_app/immutable/chunks/DKPK2Ygc.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/CVPTNizU.js\",\"_app/immutable/chunks/Bw9wOI06.js\",\"_app/immutable/chunks/1yBzCswO.js\",\"_app/immutable/chunks/CYgJF_JY.js\",\"_app/immutable/chunks/Cul8aYZn.js\"];\nexport const stylesheets = [\"_app/immutable/assets/0.BUL1-Trg.css\"];\nexport const fonts = [];\n", "const CONTENT_REGEX = /[&<]/g;\nfunction escape_html(value, is_attr) {\n  const str = String(value ?? \"\");\n  const pattern = CONTENT_REGEX;\n  pattern.lastIndex = 0;\n  let escaped = \"\";\n  let last = 0;\n  while (pattern.test(str)) {\n    const i = pattern.lastIndex - 1;\n    const ch = str[i];\n    escaped += str.substring(last, i) + (ch === \"&\" ? \"&amp;\" : ch === '\"' ? \"&quot;\" : \"&lt;\");\n    last = i + 1;\n  }\n  return escaped + str.substring(last);\n}\nexport {\n  escape_html as e\n};\n", "import { e as escape_html } from \"../../chunks/escaping.js\";\nimport { g as getContext, p as pop, a as push } from \"../../chunks/index.js\";\nimport { s as stores } from \"../../chunks/client.js\";\n({\n  check: stores.updated.check\n});\nfunction context() {\n  return getContext(\"__request__\");\n}\nconst page$1 = {\n  get error() {\n    return context().page.error;\n  },\n  get status() {\n    return context().page.status;\n  }\n};\nconst page = page$1;\nfunction Error$1($$payload, $$props) {\n  push();\n  $$payload.out += `<h1>${escape_html(page.status)}</h1> <p>${escape_html(page.error?.message)}</p>`;\n  pop();\n}\nexport {\n  Error$1 as default\n};\n", "\n\nexport const index = 1;\nlet component_cache;\nexport const component = async () => component_cache ??= (await import('../entries/fallbacks/error.svelte.js')).default;\nexport const imports = [\"_app/immutable/nodes/1.BYWSyO7t.js\",\"_app/immutable/chunks/DKPK2Ygc.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/CKt7PGwP.js\",\"_app/immutable/chunks/B0QV6bzL.js\",\"_app/immutable/chunks/Bw9wOI06.js\",\"_app/immutable/chunks/1yBzCswO.js\",\"_app/immutable/chunks/CYgJF_JY.js\",\"_app/immutable/chunks/CVPTNizU.js\"];\nexport const stylesheets = [];\nexport const fonts = [];\n", "\n", "function _page($$payload) {\n  $$payload.out += `<h1>Welcome to my demo stack!</h1> <a href=\"/kv-storage\">Cloudflare KV storage demo</a>`;\n}\nexport {\n  _page as default\n};\n", "import * as universal from '../entries/pages/_page.js';\n\nexport const index = 2;\nlet component_cache;\nexport const component = async () => component_cache ??= (await import('../entries/pages/_page.svelte.js')).default;\nexport { universal };\nexport const universal_id = \"src/routes/+page.js\";\nexport const imports = [\"_app/immutable/nodes/2.DVUFF56G.js\",\"_app/immutable/chunks/DKPK2Ygc.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/CKt7PGwP.js\"];\nexport const stylesheets = [];\nexport const fonts = [];\n", "import { A as ArtifactKind, D as DataSource, d as deepEquals, m as marshalSelection, g as getFieldsForType, c as computeID, a as config, k as keyFieldsForType, l as localApiEndpoint, b as getCurrentConfig, f as flatten, e as cache_default, h as DocumentStore } from \"./_page.js\";\nimport \"./index3.js\";\nconst fetch = (target) => {\n  return () => {\n    return {\n      async network(ctx, { client: client2, initialValue, resolve, marshalVariables }) {\n        if (ctx.artifact.kind === ArtifactKind.Fragment) {\n          return resolve(ctx, initialValue);\n        }\n        const fetch2 = ctx.fetch ?? globalThis.fetch;\n        const fetchParams2 = {\n          name: ctx.name,\n          text: ctx.text,\n          hash: ctx.hash,\n          variables: { ...marshalVariables(ctx) }\n        };\n        for (const variable of ctx.artifact.stripVariables) {\n          delete fetchParams2.variables[variable];\n        }\n        let fetchFn = defaultFetch(client2.url, ctx.fetchParams);\n        const result = await fetchFn({\n          fetch: (url, args) => {\n            const newArgs = handleMultipart(fetchParams2, args) ?? args;\n            return fetch2(url, {\n              ...newArgs,\n              signal: ctx.abortController.signal\n            });\n          },\n          metadata: ctx.metadata,\n          session: ctx.session || {},\n          ...fetchParams2\n        });\n        resolve(ctx, {\n          fetching: false,\n          variables: ctx.variables ?? {},\n          data: result.data,\n          errors: !result.errors || result.errors.length === 0 ? null : result.errors,\n          partial: false,\n          stale: false,\n          source: DataSource.Network\n        });\n      }\n    };\n  };\n};\nconst defaultFetch = (url, params) => {\n  if (!url) {\n    throw new Error(\n      \"Could not find configured client url. Please specify one in your HoudiniClient constructor.\"\n    );\n  }\n  return async ({ fetch: fetch2, name, text, variables }) => {\n    const result = await fetch2(url, {\n      method: \"POST\",\n      body: JSON.stringify({ operationName: name, query: text, variables }),\n      ...params,\n      headers: {\n        Accept: \"application/graphql+json, application/json\",\n        \"Content-Type\": \"application/json\",\n        ...params?.headers\n      }\n    });\n    if (!result.ok && !result.headers.get(\"content-type\")?.startsWith(\"application/json\") && !result.headers.get(\"content-type\")?.startsWith(\"application/graphql+json\")) {\n      throw new Error(\n        `Failed to fetch: server returned invalid response with error ${result.status}: ${result.statusText}`\n      );\n    }\n    return await result.json();\n  };\n};\nfunction handleMultipart(params, args) {\n  const { files } = extractFiles({\n    variables: params.variables\n  });\n  if (files.size) {\n    const req = args;\n    let headers = {};\n    if (req?.headers) {\n      const filtered = Object.entries(req?.headers).filter(([key, value]) => {\n        return !(key.toLowerCase() == \"content-type\" && value.toLowerCase() == \"application/json\");\n      });\n      headers = Object.fromEntries(filtered);\n    }\n    const form = new FormData();\n    if (args && args?.body) {\n      form.set(\"operations\", args?.body);\n    } else {\n      form.set(\n        \"operations\",\n        JSON.stringify({\n          operationName: params.name,\n          query: params.text,\n          variables: params.variables\n        })\n      );\n    }\n    const map = {};\n    let i = 0;\n    files.forEach((paths) => {\n      map[++i] = paths;\n    });\n    form.set(\"map\", JSON.stringify(map));\n    i = 0;\n    files.forEach((paths, file) => {\n      form.set(`${++i}`, file, file.name);\n    });\n    return { ...req, headers, body: form };\n  }\n}\nfunction isExtractableFile(value) {\n  return typeof File !== \"undefined\" && value instanceof File || typeof Blob !== \"undefined\" && value instanceof Blob;\n}\nfunction extractFiles(value) {\n  if (!arguments.length)\n    throw new TypeError(\"Argument 1 `value` is required.\");\n  const clones = /* @__PURE__ */ new Map();\n  const files = /* @__PURE__ */ new Map();\n  function recurse(value2, path, recursed) {\n    if (isExtractableFile(value2)) {\n      const filePaths = files.get(value2);\n      filePaths ? filePaths.push(path) : files.set(value2, [path]);\n      return null;\n    }\n    const valueIsList = Array.isArray(value2) || typeof FileList !== \"undefined\" && value2 instanceof FileList;\n    const valueIsPlainObject = isPlainObject(value2);\n    if (valueIsList || valueIsPlainObject) {\n      let clone = clones.get(value2);\n      const uncloned = !clone;\n      if (uncloned) {\n        clone = valueIsList ? [] : value2 instanceof Object ? {} : /* @__PURE__ */ Object.create(null);\n        clones.set(value2, clone);\n      }\n      if (!recursed.has(value2)) {\n        const pathPrefix = path ? `${path}.` : \"\";\n        const recursedDeeper = new Set(recursed).add(value2);\n        if (valueIsList) {\n          let index = 0;\n          for (const item of value2) {\n            const itemClone = recurse(item, pathPrefix + index++, recursedDeeper);\n            if (uncloned)\n              clone.push(itemClone);\n          }\n        } else\n          for (const key in value2) {\n            const propertyClone = recurse(value2[key], pathPrefix + key, recursedDeeper);\n            if (uncloned)\n              clone[key] = propertyClone;\n          }\n      }\n      return clone;\n    }\n    return value2;\n  }\n  return {\n    clone: recurse(value, \"\", /* @__PURE__ */ new Set()),\n    files\n  };\n}\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\nconst documentPlugin = (kind, source) => {\n  return () => {\n    const sourceHandlers = source();\n    const enterWrapper = (handler) => {\n      return !handler ? void 0 : (ctx, handlers) => {\n        if (ctx.artifact.kind !== kind) {\n          return handlers.next(ctx);\n        }\n        return handler(ctx, handlers);\n      };\n    };\n    const exitWrapper = (handler) => {\n      return !handler ? void 0 : (ctx, handlers) => {\n        if (ctx.artifact.kind !== kind) {\n          return handlers.resolve(ctx);\n        }\n        return handler(ctx, handlers);\n      };\n    };\n    return {\n      start: enterWrapper(sourceHandlers.start),\n      network: enterWrapper(sourceHandlers.network),\n      beforeNetwork: enterWrapper(sourceHandlers.beforeNetwork),\n      afterNetwork: exitWrapper(sourceHandlers.afterNetwork),\n      end: exitWrapper(sourceHandlers.end),\n      catch: sourceHandlers.catch ? (ctx, handlers) => sourceHandlers.catch(ctx, handlers) : void 0,\n      cleanup: (...args) => sourceHandlers.cleanup?.(...args)\n    };\n  };\n};\nconst query = (cache) => documentPlugin(ArtifactKind.Query, function() {\n  let subscriptionSpec = null;\n  let lastVariables = null;\n  return {\n    start(ctx, { next }) {\n      const runtimeScalarPayload = {\n        session: ctx.session\n      };\n      ctx.variables = {\n        ...lastVariables,\n        ...Object.fromEntries(\n          Object.entries(ctx.artifact.input?.runtimeScalars ?? {}).map(\n            ([field, type]) => {\n              const runtimeScalar = ctx.config.features?.runtimeScalars?.[type];\n              if (!runtimeScalar) {\n                return [field, type];\n              }\n              return [field, runtimeScalar.resolve(runtimeScalarPayload)];\n            }\n          )\n        ),\n        ...ctx.variables\n      };\n      next(ctx);\n    },\n    end(ctx, { resolve, marshalVariables, variablesChanged }) {\n      if (variablesChanged(ctx) && !ctx.cacheParams?.disableSubscriptions) {\n        if (subscriptionSpec) {\n          cache.unsubscribe(subscriptionSpec, subscriptionSpec.variables?.() || {});\n        }\n        lastVariables = { ...marshalVariables(ctx) };\n        const variables = lastVariables;\n        subscriptionSpec = {\n          rootType: ctx.artifact.rootType,\n          selection: ctx.artifact.selection,\n          variables: () => variables,\n          set: (newValue) => {\n            resolve(ctx, {\n              data: newValue,\n              errors: null,\n              fetching: false,\n              partial: false,\n              stale: false,\n              source: DataSource.Cache,\n              variables: ctx.variables ?? {}\n            });\n          }\n        };\n        cache.subscribe(subscriptionSpec, lastVariables);\n      }\n      resolve(ctx);\n    },\n    cleanup() {\n      if (subscriptionSpec) {\n        cache.unsubscribe(subscriptionSpec, subscriptionSpec.variables?.());\n        lastVariables = null;\n      }\n    }\n  };\n});\nconst fragment = (cache) => documentPlugin(ArtifactKind.Fragment, function() {\n  let subscriptionSpec = null;\n  let lastReference = null;\n  return {\n    start(ctx, { next, resolve, variablesChanged, marshalVariables }) {\n      if (!ctx.stuff.parentID) {\n        return next(ctx);\n      }\n      const currentReference = {\n        parent: ctx.stuff.parentID,\n        variables: marshalVariables(ctx)\n      };\n      if (!ctx.cacheParams?.disableSubscriptions && (!deepEquals(lastReference, currentReference) || variablesChanged(ctx))) {\n        if (subscriptionSpec) {\n          cache.unsubscribe(subscriptionSpec, subscriptionSpec.variables?.() || {});\n        }\n        const variables = marshalVariables(ctx);\n        subscriptionSpec = {\n          rootType: ctx.artifact.rootType,\n          selection: ctx.artifact.selection,\n          variables: () => variables,\n          parentID: ctx.stuff.parentID,\n          set: (newValue) => {\n            resolve(ctx, {\n              data: newValue,\n              errors: null,\n              fetching: false,\n              partial: false,\n              stale: false,\n              source: DataSource.Cache,\n              variables\n            });\n          }\n        };\n        cache.subscribe(subscriptionSpec, variables);\n        lastReference = currentReference;\n      }\n      next(ctx);\n    },\n    cleanup() {\n      if (subscriptionSpec) {\n        cache.unsubscribe(subscriptionSpec, subscriptionSpec.variables?.());\n      }\n    }\n  };\n});\nconst mutation = (cache) => documentPlugin(ArtifactKind.Mutation, () => {\n  return {\n    async start(ctx, { next, marshalVariables }) {\n      const layerOptimistic = cache._internal_unstable.storage.createLayer(true);\n      let toNotify = [];\n      const optimisticResponse = ctx.stuff.optimisticResponse;\n      if (optimisticResponse) {\n        toNotify = cache.write({\n          selection: ctx.artifact.selection,\n          data: await marshalSelection({\n            selection: ctx.artifact.selection,\n            data: optimisticResponse\n          }),\n          variables: marshalVariables(ctx),\n          layer: layerOptimistic.id\n        });\n      }\n      ctx.cacheParams = {\n        ...ctx.cacheParams,\n        layer: layerOptimistic,\n        notifySubscribers: toNotify,\n        forceNotify: true\n      };\n      next(ctx);\n    },\n    afterNetwork(ctx, { resolve }) {\n      if (ctx.cacheParams?.layer) {\n        cache.clearLayer(ctx.cacheParams.layer.id);\n      }\n      resolve(ctx);\n    },\n    end(ctx, { resolve, value }) {\n      const hasErrors = value.errors && value.errors.length > 0;\n      if (hasErrors) {\n        if (ctx.cacheParams?.layer) {\n          cache.clearLayer(ctx.cacheParams.layer.id);\n        }\n      }\n      if (ctx.cacheParams?.layer) {\n        cache._internal_unstable.storage.resolveLayer(ctx.cacheParams.layer.id);\n      }\n      resolve(ctx);\n    },\n    catch(ctx, { error }) {\n      if (ctx.cacheParams?.layer) {\n        const { layer } = ctx.cacheParams;\n        cache.clearLayer(layer.id);\n        cache._internal_unstable.storage.resolveLayer(layer.id);\n      }\n      throw error;\n    }\n  };\n});\nconst throwOnError = ({ operations, error }) => () => {\n  const all = operations.includes(\"all\");\n  const throwOnKind = (kind) => all || {\n    [ArtifactKind.Query]: operations.includes(\"query\"),\n    [ArtifactKind.Mutation]: operations.includes(\"mutation\"),\n    [ArtifactKind.Fragment]: false,\n    [ArtifactKind.Subscription]: operations.includes(\"subscription\")\n  }[kind];\n  return {\n    async end(ctx, { value, resolve }) {\n      if (value.errors && value.errors.length > 0 && throwOnKind(ctx.artifact.kind)) {\n        const result = await (error ?? defaultErrorFn)(value.errors, ctx);\n        throw result;\n      }\n      resolve(ctx);\n    }\n  };\n};\nconst defaultErrorFn = async (errors) => new Error(errors.map((error) => error.message).join(\". \") + \".\");\nconst fetchParams = (fn = () => ({})) => () => ({\n  start(ctx, { next, marshalVariables }) {\n    next({\n      ...ctx,\n      fetchParams: fn({\n        config: ctx.config,\n        policy: ctx.policy,\n        metadata: ctx.metadata,\n        session: ctx.session,\n        stuff: ctx.stuff,\n        document: ctx.artifact,\n        variables: marshalVariables(ctx),\n        text: ctx.text,\n        hash: ctx.hash\n      })\n    });\n  }\n});\nconst keys = {};\nconst callbacks = {};\nconst objectIDMap = {};\nconst optimisticKeys = (cache, callbackCache = callbacks, keyCache = keys, objectIDs = objectIDMap, invocationCounter = 1) => () => {\n  return {\n    async start(ctx, { next }) {\n      const optimisticResponse = ctx.stuff.optimisticResponse;\n      const newCtx = { ...ctx };\n      if (optimisticResponse && ctx.artifact.kind === ArtifactKind.Mutation && ctx.artifact.optimisticKeys) {\n        newCtx.stuff.mutationID = invocationCounter++;\n        addKeysToResponse({\n          selection: ctx.artifact.selection,\n          response: optimisticResponse,\n          callbackStore: callbackCache,\n          keyStore: keyCache,\n          objectIDs,\n          mutationID: newCtx.stuff.mutationID\n        });\n        newCtx.stuff.optimisticResponse = optimisticResponse;\n      }\n      next(newCtx);\n    },\n    beforeNetwork(ctx, { next }) {\n      if (Object.keys(keyCache).length === 0) {\n        return next(ctx);\n      }\n      const pendingVariables = extractInputKeys(\n        ctx.variables ?? {},\n        callbackCache\n      );\n      if (Object.keys(pendingVariables).length === 0) {\n        return next(ctx);\n      }\n      for (const key of Object.keys(pendingVariables)) {\n        callbackCache[key].push((newID) => {\n          pendingVariables[key] = newID;\n          if (Object.values(pendingVariables).every((value) => value !== null)) {\n            next({\n              ...ctx,\n              variables: replaceKeyWithVariable(\n                { ...ctx.variables },\n                pendingVariables\n              )\n            });\n          }\n        });\n      }\n    },\n    afterNetwork(ctx, { value, resolve }) {\n      if (ctx.artifact.kind === ArtifactKind.Mutation && ctx.artifact.optimisticKeys && typeof ctx.stuff.mutationID !== \"undefined\") {\n        extractResponseKeys(\n          cache,\n          value.data ?? {},\n          ctx.artifact.selection,\n          keyCache,\n          ctx.stuff.mutationID,\n          {\n            onNewKey: (optimisticValue, realValue) => {\n              callbackCache[optimisticValue].forEach((cb) => {\n                cb(realValue);\n              });\n              delete callbackCache[optimisticValue];\n            },\n            onIDChange: (optimisticValue, realValue) => {\n              cache.registerKeyMap(optimisticValue, realValue);\n            }\n          }\n        );\n      }\n      resolve(ctx);\n    },\n    end(ctx, { resolve }) {\n      if (typeof ctx.stuff.mutationID !== \"undefined\") {\n        delete keyCache[ctx.stuff.mutationID];\n        delete objectIDs[ctx.stuff.mutationID];\n      }\n      resolve(ctx);\n    }\n  };\n};\nfunction addKeysToResponse(args) {\n  let targetSelection = getFieldsForType(\n    args.selection,\n    args.response[\"__typename\"],\n    false\n  );\n  const newKeys = [];\n  for (const [field, { type, selection: fieldSelection, optimisticKey }] of Object.entries(\n    targetSelection\n  )) {\n    const value = args.response[field];\n    const pathSoFar = `${args.path ?? \"\"}.${field}`;\n    if (optimisticKey) {\n      let keyValue;\n      if (value) {\n        const { marshaled } = marshalSelection({\n          data: { marshaled: value },\n          selection: {\n            fields: {\n              value: {\n                type,\n                keyRaw: \"value\"\n              }\n            }\n          }\n        });\n        keyValue = marshaled;\n      } else {\n        keyValue = generateKey(type);\n      }\n      newKeys.push(keyValue);\n      args.response[field] = keyValue;\n      args.callbackStore[keyValue] = [];\n      args.keyStore[args.mutationID] = {\n        [pathSoFar]: keyValue\n      };\n    }\n    if (fieldSelection) {\n      if (Array.isArray(value)) {\n        for (const [index, item] of flattenList(value).entries()) {\n          if (item && typeof item === \"object\" && !Array.isArray(item)) {\n            addKeysToResponse({\n              ...args,\n              selection: fieldSelection,\n              response: item,\n              type,\n              path: `${pathSoFar}[${index}]`\n            });\n          }\n        }\n      } else if (value && typeof value == \"object\") {\n        addKeysToResponse({\n          ...args,\n          selection: fieldSelection,\n          response: value,\n          type,\n          path: pathSoFar\n        });\n      }\n    }\n  }\n  if (newKeys.length > 0) {\n    const objID = `${args.type}:${computeID(config, args.type ?? \"\", args.response)}`;\n    for (const key of newKeys) {\n      args.objectIDs[args.mutationID] = {\n        ...args.objectIDs[args.mutationID],\n        [key]: objID\n      };\n    }\n  }\n  return args.response;\n}\nfunction extractInputKeys(obj, store, found = {}) {\n  for (const value of Object.values(obj)) {\n    if (typeof value === \"string\" && store[value]) {\n      found[value] = null;\n    }\n    if (Array.isArray(value)) {\n      for (const item of flattenList(value)) {\n        if (item && typeof item === \"object\") {\n          extractInputKeys(item, store, found);\n        }\n      }\n    } else if (value && typeof value === \"object\") {\n      extractInputKeys(value, store, found);\n    }\n  }\n  return found;\n}\nfunction extractResponseKeys(cache, response, selection, keyMap, mutationID, events, objectIDs = objectIDMap, path = \"\", type = \"\") {\n  let targetSelection = getFieldsForType(\n    selection,\n    response[\"__typename\"],\n    false\n  );\n  let optimisticID = null;\n  for (const [field, value] of Object.entries(response)) {\n    const pathSoFar = `${path ?? \"\"}.${field}`;\n    if (typeof value === \"string\" && keyMap[mutationID][pathSoFar]) {\n      const newKey = keyMap[mutationID][pathSoFar];\n      events.onNewKey(newKey, value);\n      optimisticID = objectIDs[mutationID][newKey];\n    }\n    if (!selection || !targetSelection[field]) {\n      continue;\n    }\n    let { type: type2, selection: fieldSelection } = targetSelection[field];\n    if (Array.isArray(value)) {\n      for (const [index, item] of flattenList(value).entries()) {\n        if (item && typeof item === \"object\" && fieldSelection) {\n          extractResponseKeys(\n            cache,\n            item,\n            fieldSelection,\n            keyMap,\n            mutationID,\n            events,\n            objectIDs,\n            `${pathSoFar}[${index}]`,\n            type2\n          );\n        }\n      }\n    } else if (value && typeof value === \"object\" && fieldSelection) {\n      extractResponseKeys(\n        cache,\n        value,\n        fieldSelection,\n        keyMap,\n        mutationID,\n        events,\n        objectIDs,\n        pathSoFar,\n        type2\n      );\n    }\n  }\n  if (optimisticID) {\n    const id = computeID(config, type, response);\n    events.onIDChange(`${type}:${id}`, optimisticID);\n    cache.write({\n      selection: {\n        fields: Object.fromEntries(\n          keyFieldsForType(config, type).map((key) => [\n            key,\n            {\n              type: \"scalar\",\n              keyRaw: key\n            }\n          ])\n        )\n      },\n      parent: optimisticID,\n      data: response\n    });\n  }\n}\nfunction flattenList(source) {\n  const result = [];\n  const left = [...source];\n  while (left.length > 0) {\n    const head = left.shift();\n    if (Array.isArray(head)) {\n      left.push(...head);\n    } else {\n      result.push(head);\n    }\n  }\n  return result;\n}\nfunction replaceKeyWithVariable(variables, keys2) {\n  for (const [key, value] of Object.entries(variables)) {\n    if (typeof value === \"string\" && keys2[value]) {\n      variables[key] = keys2[value];\n    }\n    if (Array.isArray(value)) {\n      for (const item of flattenList(value)) {\n        if (item && typeof item === \"object\") {\n          replaceKeyWithVariable(item, keys2);\n        }\n      }\n    } else if (value && typeof value === \"object\") {\n      replaceKeyWithVariable(value, keys2);\n    }\n  }\n  return variables;\n}\nfunction generateKey(type) {\n  if (type === \"Int\") {\n    return (/* @__PURE__ */ new Date()).getTime();\n  }\n  if (type === \"String\") {\n    return (/* @__PURE__ */ new Date()).getTime().toString();\n  }\n  if (type === \"ID\") {\n    return (/* @__PURE__ */ new Date()).getTime().toString();\n  }\n  throw new Error(\n    `unsupported type for optimistic key: ${type}. Please provide a value in your mutation arguments.`\n  );\n}\nconst plugins = [];\nvar injectedPlugins_default = plugins;\nclass HoudiniClient {\n  url;\n  throwOnError_operations;\n  cache = null;\n  throwOnError;\n  fetchParams;\n  pipeline;\n  extraPlugins;\n  proxies = {};\n  componentCache = {};\n  setCache(cache) {\n    this.cache = cache;\n  }\n  constructor({\n    url,\n    fetchParams: fetchParams2,\n    plugins: plugins2,\n    pipeline,\n    throwOnError: throwOnError2\n  } = {}) {\n    if (plugins2 && pipeline) {\n      throw new Error(\n        \"A client cannot be given a pipeline and a list of plugins at the same time.\"\n      );\n    }\n    this.throwOnError_operations = throwOnError2?.operations ?? [];\n    let serverPort = globalThis.process?.env?.HOUDINI_PORT ?? \"5173\";\n    this.url = url ?? (globalThis.window ? \"\" : `https://localhost:${serverPort}`) + localApiEndpoint(getCurrentConfig());\n    this.throwOnError = throwOnError2;\n    this.fetchParams = fetchParams2;\n    this.pipeline = pipeline;\n    this.extraPlugins = plugins2;\n  }\n  get plugins() {\n    return flatten(\n      [].concat(\n        this.throwOnError ? [throwOnError(this.throwOnError)] : [],\n        fetchParams(this.fetchParams),\n        this.pipeline ?? [\n          optimisticKeys(this.cache ?? cache_default),\n          query(this.cache ?? cache_default),\n          mutation(this.cache ?? cache_default),\n          fragment(this.cache ?? cache_default)\n        ].concat(\n          this.extraPlugins ?? [],\n          injectedPlugins_default,\n          fetch()\n        )\n      )\n    );\n  }\n  observe({\n    enableCache = true,\n    fetching = false,\n    ...rest\n  }) {\n    return new DocumentStore({\n      client: this,\n      plugins: createPluginHooks(this.plugins),\n      fetching,\n      enableCache,\n      cache: this.cache ?? void 0,\n      ...rest\n    });\n  }\n  registerProxy(url, handler) {\n    this.proxies[url] = handler;\n  }\n}\nfunction createPluginHooks(plugins2) {\n  return plugins2.reduce((hooks, plugin) => {\n    if (typeof plugin !== \"function\") {\n      throw new Error(\"Encountered client plugin that's not a function\");\n    }\n    const result = plugin();\n    if (!result) {\n      return hooks;\n    }\n    if (!Array.isArray(result)) {\n      return hooks.concat(result);\n    }\n    for (const value of result) {\n      if (!value) {\n        continue;\n      }\n      if (typeof value === \"function\") {\n        return hooks.concat(createPluginHooks([value]));\n      }\n      hooks.push(value);\n    }\n    return hooks;\n  }, []);\n}\nconst client = new HoudiniClient({\n  url: \"/graphql\"\n});\nexport {\n  client as default\n};\n", "import { g as get } from \"./index2.js\";\nimport \"./index3.js\";\nimport { g as getSession, R as RequestContext } from \"./session.js\";\nconst config = {\n  runtimeDir: \".houdini\",\n  schemaPath: \"src/schema.graphql\",\n  plugins: {\n    \"houdini-svelte\": {\n      forceRunesMode: true\n    }\n  }\n};\nconst configs = [];\nvar pluginConfig_default = configs;\nfunction defaultConfigValues(file) {\n  return {\n    defaultKeys: [\"id\"],\n    ...file,\n    types: {\n      Node: {\n        keys: [\"id\"],\n        resolve: {\n          queryField: \"node\",\n          arguments: (node) => ({ id: node.id })\n        }\n      },\n      ...file.types\n    }\n  };\n}\nfunction keyFieldsForType(configFile, type) {\n  const withDefault = defaultConfigValues(configFile);\n  return withDefault.types?.[type]?.keys || withDefault.defaultKeys;\n}\nfunction computeID(configFile, type, data) {\n  const fields = keyFieldsForType(configFile, type);\n  let id = \"\";\n  for (const field of fields) {\n    id += data[field] + \"__\";\n  }\n  return id.slice(0, -2);\n}\nlet _configFile = null;\nfunction localApiEndpoint(configFile) {\n  return configFile.router?.apiEndpoint ?? \"/_api\";\n}\nfunction getCurrentConfig() {\n  if (_configFile) {\n    return _configFile;\n  }\n  let configFile = defaultConfigValues(config);\n  for (const pluginConfig of pluginConfig_default) {\n    configFile = pluginConfig(configFile);\n  }\n  _configFile = configFile;\n  return configFile;\n}\nfunction colorize(message) {\n  const matches = [...message.matchAll(/\\$HOUDINI\\$(\\w*\\$)?/g)];\n  if (matches.length === 0) {\n    return [message];\n  }\n  let final = message.replaceAll(/\\$HOUDINI\\$(\\w*\\$)?/g, \"%c\");\n  let colors = [];\n  for (const match of matches) {\n    const color = match[1] ? `color:${match[1].slice(0, -1)}` : \"\";\n    colors.push(color);\n  }\n  return [final, ...colors];\n}\nfunction error(message) {\n  console.error(...colorize(message));\n}\nfunction info(message) {\n  console.log(...colorize(message));\n}\nfunction red(message) {\n  return wrapMessage(\"red\", message);\n}\nfunction yellow(message) {\n  return wrapMessage(\"yellow\", message);\n}\nconst tag = `$HOUDINI$`;\nconst wrapMessage = (color, message) => {\n  return tag + `${color}$` + message + tag;\n};\nconst CachePolicy = {\n  CacheOrNetwork: \"CacheOrNetwork\",\n  CacheOnly: \"CacheOnly\",\n  NetworkOnly: \"NetworkOnly\",\n  NoCache: \"NoCache\"\n};\nconst DedupeMatchMode = {\n  Variables: \"Variables\"\n};\nconst ArtifactKind = {\n  Query: \"HoudiniQuery\",\n  Subscription: \"HoudiniSubscription\",\n  Mutation: \"HoudiniMutation\",\n  Fragment: \"HoudiniFragment\"\n};\nconst CompiledQueryKind = ArtifactKind.Query;\nconst DataSource = {\n  Cache: \"cache\",\n  Network: \"network\"\n};\nconst fragmentKey = \" $fragments\";\nconst PendingValue = Symbol(\"houdini_loading\");\nlet client = null;\nasync function initClient() {\n  if (client) {\n    return client;\n  }\n  client = (await import(\"./client2.js\")).default;\n  return client;\n}\nfunction getClient() {\n  if (!client) {\n    throw new Error(\"client hasn't been initialized\");\n  }\n  return client;\n}\nfunction deepEquals(objA, objB, map = /* @__PURE__ */ new WeakMap()) {\n  if (Object.is(objA, objB))\n    return true;\n  if (objA instanceof Date && objB instanceof Date) {\n    return objA.getTime() === objB.getTime();\n  }\n  if (objA instanceof RegExp && objB instanceof RegExp) {\n    return objA.toString() === objB.toString();\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  if (map.get(objA) === objB)\n    return true;\n  map.set(objA, objB);\n  const keysA = Reflect.ownKeys(objA);\n  const keysB = Reflect.ownKeys(objB);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Reflect.has(objB, keysA[i]) || !deepEquals(objA[keysA[i]], objB[keysA[i]], map)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFieldsForType(selection, __typename, loading) {\n  if (loading) {\n    if (selection.loadingTypes && selection.loadingTypes.length > 0) {\n      return deepMerge(\n        ...selection.loadingTypes.map((type) => selection.abstractFields?.fields[type])\n      );\n    }\n    return selection.fields ?? {};\n  }\n  let targetSelection = selection.fields || {};\n  if (selection.abstractFields && __typename) {\n    const mappedType = selection.abstractFields.typeMap[__typename];\n    if (mappedType) {\n      targetSelection = selection.abstractFields.fields[mappedType];\n    } else if (selection.abstractFields.fields[__typename]) {\n      targetSelection = selection.abstractFields.fields[__typename];\n    }\n  }\n  return targetSelection;\n}\nfunction deepMerge(...objects) {\n  const mergedObj = {};\n  for (let obj of objects) {\n    if (!obj) {\n      continue;\n    }\n    for (let prop in obj) {\n      if (prop in obj) {\n        const val = obj[prop];\n        if (typeof val === \"object\" && val !== null && !Array.isArray(val)) {\n          mergedObj[prop] = deepMerge(mergedObj[prop] || {}, val);\n        } else {\n          mergedObj[prop] = val;\n        }\n      }\n    }\n  }\n  return mergedObj;\n}\nfunction marshalSelection({\n  selection,\n  data\n}) {\n  const config2 = getCurrentConfig();\n  if (data === null || typeof data === \"undefined\") {\n    return data;\n  }\n  if (Array.isArray(data)) {\n    return data.map((val) => marshalSelection({ selection, data: val }));\n  }\n  const targetSelection = getFieldsForType(selection, data[\"__typename\"], false);\n  return Object.fromEntries(\n    Object.entries(data).map(([fieldName, value]) => {\n      if (fieldName === fragmentKey) {\n        return [fieldName, value];\n      }\n      const { type, selection: selection2 } = targetSelection[fieldName];\n      if (!type) {\n        return [fieldName, value];\n      }\n      if (selection2) {\n        return [fieldName, marshalSelection({ selection: selection2, data: value })];\n      }\n      if (config2.scalars?.[type]) {\n        const marshalFn = config2.scalars[type].marshal;\n        if (!marshalFn) {\n          throw new Error(\n            `Scalar type ${type} is missing a \\`marshal\\` function. See https://houdinigraphql.com/api/config#custom-scalars for help on configuring custom scalars.`\n          );\n        }\n        if (Array.isArray(value)) {\n          return [fieldName, value.map(marshalFn)];\n        }\n        return [fieldName, marshalFn(value)];\n      }\n      return [fieldName, value];\n    })\n  );\n}\nfunction marshalInputs({\n  artifact: artifact2,\n  input,\n  config: config2,\n  rootType = \"@root\"\n}) {\n  if (input === null || typeof input === \"undefined\") {\n    return input;\n  }\n  if (!artifact2.input) {\n    return input;\n  }\n  const fields = rootType === \"@root\" ? artifact2.input.fields : artifact2.input.types[rootType];\n  if (Array.isArray(input)) {\n    return input.map((val) => marshalInputs({ artifact: artifact2, input: val, rootType, config: config2 }));\n  }\n  return Object.fromEntries(\n    Object.entries(input).map(([fieldName, value]) => {\n      const type = fields?.[fieldName];\n      if (!type) {\n        return [fieldName, value];\n      }\n      const marshalFn = config2.scalars?.[type]?.marshal;\n      if (marshalFn) {\n        if (Array.isArray(value)) {\n          return [fieldName, value.map(marshalFn)];\n        }\n        return [fieldName, marshalFn(value)];\n      }\n      if (isScalar(config2, type) || !artifact2.input.types[type]) {\n        return [fieldName, value];\n      }\n      return [fieldName, marshalInputs({ artifact: artifact2, input: value, rootType: type, config: config2 })];\n    })\n  );\n}\nfunction isScalar(config2, type) {\n  return [\"String\", \"Boolean\", \"Float\", \"ID\", \"Int\"].concat(Object.keys(config2.scalars || {})).includes(type);\n}\nconst subscriber_queue = [];\nconst noop = () => {\n};\nclass Writable {\n  state;\n  #subscribers;\n  #stop;\n  #start;\n  constructor(value, start = noop) {\n    this.state = value;\n    this.#subscribers = /* @__PURE__ */ new Set();\n    this.#stop = null;\n    this.#start = start;\n  }\n  set(new_value) {\n    if (safe_not_equal(this.state, new_value)) {\n      this.state = new_value;\n      if (this.#stop) {\n        const run_queue = !subscriber_queue.length;\n        for (const subscriber of this.#subscribers) {\n          subscriber[1]();\n          subscriber_queue.push(subscriber, this.state);\n        }\n        if (run_queue) {\n          for (let i = 0; i < subscriber_queue.length; i += 2) {\n            subscriber_queue[i][0](subscriber_queue[i + 1]);\n          }\n          subscriber_queue.length = 0;\n        }\n      }\n    }\n  }\n  update(fn) {\n    this.set(fn(this.state));\n  }\n  subscribe(run, invalidate = noop) {\n    const subscriber = [run, invalidate];\n    this.#subscribers.add(subscriber);\n    if (this.#subscribers.size === 1) {\n      this.#stop = this.#start(this.set) || noop;\n    }\n    run(this.state);\n    return () => {\n      this.#subscribers.delete(subscriber);\n      if (this.#subscribers.size === 0) {\n        this.#stop?.();\n        this.#stop = null;\n      }\n    };\n  }\n}\nfunction safe_not_equal(a, b) {\n  return a != a ? b == b : a !== b || a && typeof a === \"object\" || typeof a === \"function\";\n}\nconst computeKey = ({ field, args }) => {\n  const keys = Object.keys(args ?? {});\n  keys.sort();\n  return args && keys.length > 0 ? `${field}(${keys.map((key) => `${key}: ${stringifyObjectWithNoQuotesOnKeys(args[key])}`).join(\", \")})` : field;\n};\nconst stringifyObjectWithNoQuotesOnKeys = (obj_from_json) => {\n  if (Array.isArray(obj_from_json)) {\n    return `[${obj_from_json.map((obj) => `${stringifyObjectWithNoQuotesOnKeys(obj)}`).join(\", \")}]`;\n  }\n  if (typeof obj_from_json !== \"object\" || obj_from_json instanceof Date || obj_from_json === null) {\n    return JSON.stringify(obj_from_json).replace(/\"([^\"]+)\":/g, \"$1: \");\n  }\n  return `{${Object.keys(obj_from_json).map((key) => `${key}: ${stringifyObjectWithNoQuotesOnKeys(obj_from_json[key])}`).join(\", \")}}`;\n};\nfunction flatten(source) {\n  if (!source) {\n    return [];\n  }\n  return source.reduce((acc, element) => {\n    if (!element) {\n      return acc;\n    }\n    if (Array.isArray(element)) {\n      return acc.concat(flatten(element));\n    }\n    return acc.concat(element);\n  }, []);\n}\nclass GarbageCollector {\n  cache;\n  lifetimes = /* @__PURE__ */ new Map();\n  get cacheBufferSize() {\n    return this.cache._internal_unstable.config.cacheBufferSize ?? 10;\n  }\n  constructor(cache) {\n    this.cache = cache;\n  }\n  reset() {\n    this.lifetimes.clear();\n  }\n  resetLifetime(id, field) {\n    if (!this.lifetimes.get(id)) {\n      this.lifetimes.set(id, /* @__PURE__ */ new Map());\n    }\n    this.lifetimes.get(id).set(field, 0);\n  }\n  tick() {\n    const dt_tick = Date.now().valueOf();\n    const config_max_time = this.cache._internal_unstable.config.defaultLifetime;\n    for (const [id, fieldMap] of this.lifetimes.entries()) {\n      for (const [field, lifetime] of fieldMap.entries()) {\n        if (this.cache._internal_unstable.subscriptions.get(id, field).length > 0) {\n          continue;\n        }\n        fieldMap.set(field, lifetime + 1);\n        if (fieldMap.get(field) > this.cacheBufferSize) {\n          this.cache._internal_unstable.storage.deleteField(id, field);\n          this.cache._internal_unstable.lists.deleteField(id, field);\n          fieldMap.delete(field);\n          if ([...fieldMap.keys()].length === 0) {\n            this.lifetimes.delete(id);\n          }\n          this.cache._internal_unstable.staleManager.delete(id, field);\n        }\n        if (config_max_time && config_max_time > 0) {\n          const dt_valueOf = this.cache.getFieldTime(id, field);\n          if (dt_valueOf && dt_tick - dt_valueOf > config_max_time) {\n            this.cache._internal_unstable.staleManager.markFieldStale(id, field);\n          }\n        }\n      }\n    }\n  }\n}\nfunction evaluateKey(key, variables = null) {\n  let evaluated = \"\";\n  let varName = \"\";\n  let inString = false;\n  for (const char of key) {\n    if (varName) {\n      if (varChars.includes(char)) {\n        varName += char;\n        continue;\n      }\n      const value = variables?.[varName.slice(1)];\n      evaluated += typeof value !== \"undefined\" ? JSON.stringify(value) : \"undefined\";\n      varName = \"\";\n    }\n    if (char === \"$\" && !inString) {\n      varName = \"$\";\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n    }\n    evaluated += char;\n  }\n  return evaluated;\n}\nconst varChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789\";\nconst rootID = \"_ROOT_\";\nclass ListManager {\n  rootID;\n  cache;\n  constructor(cache, rootID2) {\n    this.rootID = rootID2;\n    this.cache = cache;\n  }\n  lists = /* @__PURE__ */ new Map();\n  listsByField = /* @__PURE__ */ new Map();\n  get(listName, id, allLists, skipMatches) {\n    const lists = this.getLists(listName, id, allLists);\n    if (!lists) {\n      return null;\n    }\n    if (skipMatches) {\n      return new ListCollection(lists.lists.filter((list) => !skipMatches.has(list.fieldRef)));\n    } else {\n      return lists;\n    }\n  }\n  getLists(listName, id, allLists) {\n    const matches = this.lists.get(listName);\n    if (!matches || matches.size === 0) {\n      return null;\n    }\n    if (allLists) {\n      return new ListCollection(\n        Array.from(matches, ([key, value]) => [...value.lists]).flat()\n      );\n    }\n    const head = [...matches.values()][0];\n    const { recordType } = head.lists[0];\n    const parentID = id ? this.cache._internal_unstable.id(recordType || \"\", id) : this.rootID;\n    if (matches?.size === 1) {\n      if (!id) {\n        return head;\n      }\n      return parentID === Array.from(matches.keys())[0] ? head : null;\n    }\n    if (!id) {\n      console.error(\n        `Found multiple instances of \"${listName}\". Please provide one of @parentID or @allLists directives to help identify which list you want modify. For more information, visit this guide: https://www.houdinigraphql.com/api/graphql#parentidvalue-string `\n      );\n      return null;\n    }\n    return this.lists.get(listName)?.get(parentID);\n  }\n  remove(listName, id) {\n    this.lists.get(listName)?.delete(id || this.rootID);\n  }\n  add(list) {\n    if (!this.lists.has(list.name)) {\n      this.lists.set(list.name, /* @__PURE__ */ new Map());\n    }\n    const name = list.name;\n    const parentID = list.recordID || this.rootID;\n    if (this.lists.get(name)?.get(parentID)?.includes(list.key)) {\n      return;\n    }\n    if (!this.lists.has(name)) {\n      this.lists.set(name, /* @__PURE__ */ new Map());\n    }\n    if (!this.lists.get(name).has(parentID)) {\n      this.lists.get(name).set(parentID, new ListCollection([]));\n    }\n    if (!this.listsByField.has(parentID)) {\n      this.listsByField.set(parentID, /* @__PURE__ */ new Map());\n    }\n    if (!this.listsByField.get(parentID).has(list.key)) {\n      this.listsByField.get(parentID)?.set(list.key, []);\n    }\n    const handler = new List({ ...list, manager: this });\n    this.lists.get(list.name).get(parentID).lists.push(handler);\n    this.listsByField.get(parentID).get(list.key).push(handler);\n  }\n  removeIDFromAllLists(id, layer) {\n    let removed = false;\n    for (const fieldMap of this.lists.values()) {\n      for (const list of fieldMap.values()) {\n        if (list.removeID(id, void 0, layer)) {\n          removed = true;\n        }\n      }\n    }\n    return removed;\n  }\n  deleteField(parentID, field) {\n    if (!this.listsByField.get(parentID)?.has(field)) {\n      return;\n    }\n    for (const list of this.listsByField.get(parentID).get(field)) {\n      this.lists.get(list.name)?.get(list.recordID)?.deleteListWithKey(field);\n      if (this.lists.get(list.name)?.get(list.recordID)?.lists.length === 0) {\n        this.lists.get(list.name)?.delete(list.recordID);\n      }\n    }\n    this.listsByField.get(parentID).delete(field);\n  }\n  reset() {\n    this.lists.clear();\n    this.listsByField.clear();\n  }\n}\nclass List {\n  recordID;\n  recordType;\n  key;\n  type;\n  cache;\n  selection;\n  _when;\n  filters;\n  name;\n  connection;\n  manager;\n  abstract;\n  constructor({\n    name,\n    recordID,\n    recordType,\n    key,\n    listType,\n    selection,\n    when,\n    filters,\n    connection,\n    manager,\n    abstract\n  }) {\n    this.recordID = recordID || rootID;\n    this.recordType = recordType;\n    this.key = key;\n    this.type = listType;\n    this.cache = manager.cache;\n    this.selection = selection;\n    this._when = when;\n    this.filters = filters;\n    this.name = name;\n    this.connection = connection;\n    this.manager = manager;\n    this.abstract = abstract;\n  }\n  get fieldRef() {\n    return `${this.recordID}.${this.key}`;\n  }\n  when(when) {\n    return this.manager.lists.get(this.name).get(this.recordID).when(when);\n  }\n  append({\n    selection,\n    data,\n    variables = {},\n    layer\n  }) {\n    return this.addToList(selection, data, variables, \"last\", layer);\n  }\n  prepend({\n    selection,\n    data,\n    variables = {},\n    layer\n  }) {\n    return this.addToList(selection, data, variables, \"first\", layer);\n  }\n  addToList(selection, data, variables = {}, where, layer) {\n    const listType = this.listType(data);\n    const dataID = this.cache._internal_unstable.id(listType, data);\n    if (!this.validateWhen() || !dataID) {\n      return;\n    }\n    let insertSelection = selection;\n    let insertData = data;\n    if (this.connection) {\n      insertSelection = {\n        fields: {\n          newEntry: {\n            keyRaw: this.key,\n            type: \"Connection\",\n            selection: {\n              fields: {\n                edges: {\n                  keyRaw: \"edges\",\n                  type: \"ConnectionEdge\",\n                  updates: [\"append\", \"prepend\"],\n                  selection: {\n                    fields: {\n                      __typename: {\n                        keyRaw: \"__typename\",\n                        type: \"String\"\n                      },\n                      node: {\n                        type: listType,\n                        keyRaw: \"node\",\n                        selection: {\n                          ...selection,\n                          fields: {\n                            ...selection.fields,\n                            __typename: {\n                              keyRaw: \"__typename\",\n                              type: \"String\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n      insertData = {\n        newEntry: {\n          edges: [\n            {\n              __typename: listType + \"Edge\",\n              node: {\n                ...data,\n                __typename: listType\n              }\n            }\n          ]\n        }\n      };\n    } else {\n      insertSelection = {\n        fields: {\n          newEntries: {\n            keyRaw: this.key,\n            type: listType,\n            updates: [\"append\", \"prepend\"],\n            selection: {\n              ...selection,\n              fields: {\n                ...selection.fields,\n                __typename: {\n                  keyRaw: \"__typename\",\n                  type: \"String\"\n                }\n              }\n            }\n          }\n        }\n      };\n      insertData = {\n        newEntries: [{ ...data, __typename: listType }]\n      };\n    }\n    this.cache.write({\n      selection: insertSelection,\n      data: insertData,\n      variables,\n      parent: this.recordID,\n      applyUpdates: [where === \"first\" ? \"prepend\" : \"append\"],\n      layer: layer?.id\n    });\n  }\n  removeID(id, variables = {}, layer) {\n    if (!this.validateWhen()) {\n      return;\n    }\n    let parentID = this.recordID;\n    let targetID = id;\n    let targetKey = this.key;\n    if (this.connection) {\n      const { value: embeddedConnection } = this.cache._internal_unstable.storage.get(\n        this.recordID,\n        this.key\n      );\n      if (!embeddedConnection) {\n        return;\n      }\n      const embeddedConnectionID = embeddedConnection;\n      const { value: edges } = this.cache._internal_unstable.storage.get(\n        embeddedConnectionID,\n        \"edges\"\n      );\n      for (const edge of flatten(edges) || []) {\n        if (!edge) {\n          continue;\n        }\n        const edgeID = edge;\n        const { value: nodeID } = this.cache._internal_unstable.storage.get(edgeID, \"node\");\n        if (!nodeID) {\n          continue;\n        }\n        if (nodeID === id) {\n          targetID = edgeID;\n        }\n      }\n      parentID = embeddedConnectionID;\n      targetKey = \"edges\";\n    }\n    let value = this.cache._internal_unstable.storage.get(parentID, targetKey).value;\n    if (!value || !value.includes(targetID)) {\n      return;\n    }\n    const subscribers = this.cache._internal_unstable.subscriptions.get(this.recordID, this.key);\n    this.cache._internal_unstable.subscriptions.remove(\n      targetID,\n      this.connection ? this.selection.fields.edges.selection : this.selection,\n      subscribers.map((sub) => sub[0]),\n      variables\n    );\n    this.cache._internal_unstable.storage.remove(parentID, targetKey, targetID, layer);\n    for (const [spec] of subscribers) {\n      spec.set(\n        this.cache._internal_unstable.getSelection({\n          parent: spec.parentID || this.manager.rootID,\n          selection: spec.selection,\n          variables: spec.variables?.() || {},\n          ignoreMasking: false\n        }).data\n      );\n    }\n    return true;\n  }\n  remove(data, variables = {}, layer) {\n    const targetID = this.cache._internal_unstable.id(this.listType(data), data);\n    if (!targetID) {\n      return;\n    }\n    return this.removeID(targetID, variables, layer);\n  }\n  listType(data) {\n    return data.__typename || this.type;\n  }\n  validateWhen(when) {\n    let filters = when || this._when;\n    let ok = true;\n    if (filters) {\n      const targets = this.filters;\n      if (filters.must && targets) {\n        ok = Object.entries(filters.must).reduce(\n          (prev, [key, value]) => Boolean(prev && targets[key] == value),\n          ok\n        );\n      }\n      if (filters.must_not) {\n        ok = !targets || Object.entries(filters.must_not).reduce(\n          (prev, [key, value]) => Boolean(prev && targets[key] != value),\n          ok\n        );\n      }\n    }\n    return ok;\n  }\n  toggleElement({\n    selection,\n    data,\n    variables = {},\n    layer,\n    where\n  }) {\n    if (!this.remove(data, variables, layer)) {\n      this.addToList(selection, data, variables, where, layer);\n    }\n  }\n  *[Symbol.iterator]() {\n    let entries = [];\n    let value = this.cache._internal_unstable.storage.get(this.recordID, this.key).value;\n    if (!this.connection) {\n      entries = flatten(value);\n    } else {\n      entries = this.cache._internal_unstable.storage.get(value, \"edges\").value;\n    }\n    for (let record of entries) {\n      yield record;\n    }\n  }\n}\nclass ListCollection {\n  lists = [];\n  constructor(lists) {\n    this.lists = lists;\n  }\n  get selection() {\n    return this.lists[0].selection;\n  }\n  append(...args) {\n    this.lists.forEach((list) => list.append(...args));\n  }\n  prepend(...args) {\n    this.lists.forEach((list) => list.prepend(...args));\n  }\n  addToList(...args) {\n    this.lists.forEach((list) => list.addToList(...args));\n  }\n  removeID(...args) {\n    let removed = false;\n    this.lists.forEach((list) => {\n      if (list.removeID(...args)) {\n        removed = true;\n      }\n    });\n    return removed;\n  }\n  remove(...args) {\n    this.lists.forEach((list) => list.remove(...args));\n  }\n  toggleElement(...args) {\n    this.lists.forEach((list) => list.toggleElement(...args));\n  }\n  when(when) {\n    return new ListCollection(\n      this.lists.filter((list) => {\n        return list.validateWhen(when);\n      })\n    );\n  }\n  includes(key) {\n    return !!this.lists.find((list) => list.key === key);\n  }\n  deleteListWithKey(key) {\n    return this.lists = this.lists.filter((list) => list.key !== key);\n  }\n  *[Symbol.iterator]() {\n    for (let list of this.lists) {\n      for (const entry of list) {\n        yield entry;\n      }\n    }\n  }\n}\nclass StaleManager {\n  cache;\n  fieldsTime = /* @__PURE__ */ new Map();\n  constructor(cache) {\n    this.cache = cache;\n  }\n  #initMapId = (id) => {\n    if (!this.fieldsTime.get(id)) {\n      this.fieldsTime.set(id, /* @__PURE__ */ new Map());\n    }\n  };\n  getFieldTime(id, field) {\n    return this.fieldsTime.get(id)?.get(field);\n  }\n  setFieldTimeToNow(id, field) {\n    this.#initMapId(id);\n    this.fieldsTime.get(id)?.set(field, (/* @__PURE__ */ new Date()).valueOf());\n  }\n  markFieldStale(id, field) {\n    this.#initMapId(id);\n    this.fieldsTime.get(id)?.set(field, null);\n  }\n  markAllStale() {\n    for (const [id, fieldMap] of this.fieldsTime.entries()) {\n      for (const [field] of fieldMap.entries()) {\n        this.markFieldStale(id, field);\n      }\n    }\n  }\n  markRecordStale(id) {\n    const fieldsTimeOfType = this.fieldsTime.get(id);\n    if (fieldsTimeOfType) {\n      for (const [field] of fieldsTimeOfType.entries()) {\n        this.markFieldStale(id, field);\n      }\n    }\n  }\n  markTypeStale(type) {\n    for (const [id, fieldMap] of this.fieldsTime.entries()) {\n      if (id.startsWith(`${type}:`)) {\n        for (const [field] of fieldMap.entries()) {\n          this.markFieldStale(id, field);\n        }\n      }\n    }\n  }\n  markTypeFieldStale(type, field, when) {\n    const key = computeKey({ field, args: when });\n    for (const [id, fieldMap] of this.fieldsTime.entries()) {\n      if (id.startsWith(`${type}:`)) {\n        for (const local_field of fieldMap.keys()) {\n          if (local_field === key) {\n            this.markFieldStale(id, field);\n          }\n        }\n      }\n    }\n  }\n  delete(id, field) {\n    if (this.fieldsTime.has(id)) {\n      this.fieldsTime.get(id)?.delete(field);\n      if (this.fieldsTime.get(id)?.size === 0) {\n        this.fieldsTime.delete(id);\n      }\n    }\n  }\n  reset() {\n    this.fieldsTime.clear();\n  }\n}\nclass InMemoryStorage {\n  data;\n  idCount = 1;\n  rank = 0;\n  idMaps = {};\n  constructor() {\n    this.data = [];\n  }\n  get layerCount() {\n    return this.data.length;\n  }\n  get nextRank() {\n    return this.rank++;\n  }\n  registerIDMapping(from, to) {\n    this.idMaps[from] = to;\n    this.idMaps[to] = from;\n  }\n  createLayer(optimistic = false) {\n    const layer = new Layer(this.idCount++);\n    layer.optimistic = optimistic;\n    this.data.push(layer);\n    return layer;\n  }\n  insert(id, field, location, target) {\n    return this.topLayer.insert(id, field, location, target);\n  }\n  remove(id, field, target, layer = this.topLayer) {\n    return layer.remove(id, field, target);\n  }\n  delete(id, layer = this.topLayer) {\n    return layer.delete(id);\n  }\n  deleteField(id, field) {\n    return this.topLayer.deleteField(id, field);\n  }\n  getLayer(id) {\n    for (const layer of this.data) {\n      if (layer.id === id) {\n        return layer;\n      }\n    }\n    throw new Error(\"Could not find layer with id: \" + id);\n  }\n  replaceID(replacement) {\n    for (const layer of this.data) {\n      layer.replaceID(replacement);\n    }\n  }\n  get(targetID, field, defaultValue) {\n    const operations = {\n      [OperationKind.insert]: {\n        [OperationLocation.start]: [],\n        [OperationLocation.end]: []\n      },\n      [OperationKind.remove]: /* @__PURE__ */ new Set()\n    };\n    const layerIDs = [];\n    const recordIDs = [this.idMaps[targetID], targetID].filter(Boolean);\n    for (let i = this.data.length - 1; i >= 0; i--) {\n      for (const id of recordIDs) {\n        const layer = this.data[i];\n        let [layerValue, kind] = layer.get(id, field);\n        const layerOperations = layer.getOperations(id, field) || [];\n        layer.deletedIDs.forEach((v) => {\n          if (layer.operations[v]?.undoDeletesInList?.includes(field)) {\n            return;\n          }\n          operations.remove.add(v);\n          if (this.idMaps[v]) {\n            operations.remove.add(this.idMaps[v]);\n          }\n        });\n        if (typeof layerValue === \"undefined\" && defaultValue) {\n          const targetLayer = this.topLayer;\n          targetLayer.writeField(id, field, defaultValue);\n          layerValue = defaultValue;\n        }\n        if (typeof layerValue === \"undefined\" && layerOperations.length === 0) {\n          if (layer.deletedIDs.size > 0) {\n            layerIDs.push(layer.id);\n          }\n          continue;\n        }\n        if (typeof layerValue !== \"undefined\" && !Array.isArray(layerValue)) {\n          return {\n            value: layerValue,\n            kind,\n            displayLayers: [layer.id]\n          };\n        }\n        layerIDs.push(layer.id);\n        if (layerOperations.length > 0) {\n          for (const op of layerOperations) {\n            if (isRemoveOperation(op)) {\n              operations.remove.add(op.id);\n            }\n            if (isInsertOperation(op)) {\n              if (op.location === OperationLocation.end) {\n                operations.insert[op.location].unshift(op.id);\n              } else {\n                operations.insert[op.location].push(op.id);\n              }\n            }\n            if (isDeleteOperation(op)) {\n              return {\n                value: void 0,\n                kind: \"unknown\",\n                displayLayers: []\n              };\n            }\n          }\n        }\n        if (typeof layerValue === \"undefined\") {\n          continue;\n        }\n        if (!operations.remove.size && !operations.insert.start.length && !operations.insert.end.length) {\n          return { value: layerValue, displayLayers: layerIDs, kind: \"link\" };\n        }\n        return {\n          value: [\n            ...operations.insert.start,\n            ...layerValue,\n            ...operations.insert.end\n          ].filter((value) => !operations.remove.has(value)),\n          displayLayers: layerIDs,\n          kind\n        };\n      }\n    }\n    return {\n      value: void 0,\n      kind: \"unknown\",\n      displayLayers: []\n    };\n  }\n  writeLink(id, field, value) {\n    return this.topLayer.writeLink(id, field, value);\n  }\n  writeField(id, field, value) {\n    return this.topLayer.writeField(id, field, value);\n  }\n  resolveLayer(id) {\n    let startingIndex = null;\n    for (const [index, layer] of this.data.entries()) {\n      if (layer.id !== id) {\n        continue;\n      }\n      startingIndex = index - 1;\n      this.data[index].optimistic = false;\n      break;\n    }\n    if (startingIndex === null) {\n      throw new Error(\"could not find layer with id: \" + id);\n    }\n    if (startingIndex === -1) {\n      startingIndex = 0;\n    }\n    if (this.data[startingIndex].optimistic) {\n      startingIndex++;\n    }\n    const baseLayer = this.data[startingIndex];\n    let layerIndex = startingIndex;\n    while (layerIndex < this.data.length) {\n      const layer = this.data[layerIndex++];\n      if (layer.optimistic) {\n        layerIndex--;\n        break;\n      }\n      baseLayer.writeLayer(layer);\n    }\n    this.data.splice(startingIndex + 1, layerIndex - startingIndex - 1);\n    if (this.data.length === 1) {\n      this.idMaps = {};\n    }\n  }\n  get topLayer() {\n    if (this.data.length === 0) {\n      this.createLayer();\n    }\n    if (this.data[this.data.length - 1]?.optimistic) {\n      this.createLayer();\n    }\n    return this.data[this.data.length - 1];\n  }\n  serialize() {\n    return JSON.stringify({\n      rank: this.rank,\n      fields: Object.fromEntries(\n        Object.entries(this.topLayer.fields).map(([id, fieldMap]) => [\n          id,\n          Object.fromEntries(\n            Object.entries(fieldMap).filter(([_, value]) => typeof value !== \"function\")\n          )\n        ])\n      ),\n      links: this.topLayer.links\n    });\n  }\n  hydrate(args, layer) {\n    if (!args) {\n      return;\n    }\n    const { rank, fields, links } = args;\n    this.rank = rank;\n    layer ??= this.createLayer(true);\n    layer.fields = fields;\n    layer.links = links;\n  }\n  reset() {\n    this.data = [];\n  }\n}\nclass Layer {\n  id;\n  optimistic = false;\n  fields = {};\n  links = {};\n  operations = {};\n  deletedIDs = /* @__PURE__ */ new Set();\n  constructor(id) {\n    this.id = id;\n  }\n  get(id, field) {\n    if (typeof this.links[id]?.[field] !== \"undefined\") {\n      return [this.links[id][field], \"link\"];\n    }\n    return [this.fields[id]?.[field], \"scalar\"];\n  }\n  getOperations(id, field) {\n    if (this.operations[id]?.deleted) {\n      return [\n        {\n          kind: OperationKind.delete,\n          target: id\n        }\n      ];\n    }\n    if (this.operations[id]?.fields?.[field]) {\n      return this.operations[id].fields[field];\n    }\n  }\n  writeField(id, field, value) {\n    this.fields[id] = {\n      ...this.fields[id],\n      [field]: value\n    };\n    return this.id;\n  }\n  writeLink(id, field, value) {\n    const valueList = Array.isArray(value) ? value : [value];\n    for (const value2 of flatten(valueList)) {\n      if (!value2) {\n        continue;\n      }\n      const fieldOperations = this.operations[id]?.fields[field];\n      if (this.operations[value2]?.deleted || this.deletedIDs.has(value2)) {\n        this.operations[value2] = {\n          ...this.operations[value2],\n          undoDeletesInList: [...this.operations[id]?.undoDeletesInList || [], field]\n        };\n      } else if (value2 && fieldOperations?.length > 0) {\n        this.operations[id].fields[field] = fieldOperations.filter(\n          (op) => op.kind !== \"remove\" || op.id !== value2\n        );\n      }\n    }\n    this.links[id] = {\n      ...this.links[id],\n      [field]: value\n    };\n    return this.id;\n  }\n  isDisplayLayer(displayLayers) {\n    return displayLayers.length === 0 || displayLayers.includes(this.id) || Math.max(...displayLayers) < this.id;\n  }\n  clear() {\n    this.links = {};\n    this.fields = {};\n    this.operations = {};\n    this.deletedIDs = /* @__PURE__ */ new Set();\n  }\n  replaceID({ from, to }) {\n    this.fields[to] = this.fields[from];\n    this.links[to] = this.links[from];\n    this.operations[to] = this.operations[from] || { fields: {} };\n    if (this.deletedIDs.has(from)) {\n      this.deletedIDs.add(to);\n    }\n  }\n  removeUndefinedFields() {\n    for (const [id, fields] of Object.entries(this.fields)) {\n      for (const [field, value] of Object.entries(fields)) {\n        if (typeof value === \"undefined\") {\n          try {\n            delete this.fields[id][field];\n          } catch {\n          }\n          try {\n            delete this.links[id][field];\n          } catch {\n          }\n        }\n      }\n      if (Object.keys(fields || {}).length === 0) {\n        delete this.fields[id];\n      }\n      if (Object.keys(this.links[id] || {}).length === 0) {\n        delete this.links[id];\n      }\n    }\n  }\n  delete(id) {\n    this.operations = {\n      ...this.operations,\n      [id]: {\n        ...this.operations[id],\n        deleted: true,\n        undoDeletesInList: []\n      }\n    };\n    this.deletedIDs.add(id);\n  }\n  deleteField(id, field) {\n    this.fields[id] = {\n      ...this.fields[id],\n      [field]: void 0\n    };\n  }\n  insert(id, field, where, target) {\n    this.addFieldOperation(id, field, {\n      kind: OperationKind.insert,\n      id: target,\n      location: where\n    });\n  }\n  remove(id, field, target) {\n    this.addFieldOperation(id, field, {\n      kind: OperationKind.remove,\n      id: target\n    });\n  }\n  writeLayer(layer) {\n    if (layer.id === this.id) {\n      return;\n    }\n    for (const [id, ops] of Object.entries(layer.operations)) {\n      const fields = {};\n      for (const opMap of [layer.operations[id], this.operations[id]].filter(Boolean)) {\n        for (const [fieldName, operations] of Object.entries(opMap.fields || {})) {\n          fields[fieldName] = [...fields[fieldName] || [], ...operations];\n        }\n      }\n      if (Object.keys(fields).length > 0) {\n        this.operations[id] = {\n          ...this.operations[id],\n          fields\n        };\n      }\n      if (ops?.deleted) {\n        delete this.fields[id];\n        delete this.links[id];\n      }\n    }\n    for (const [id, values] of Object.entries(layer.fields)) {\n      if (!values) {\n        continue;\n      }\n      for (const [field, value] of Object.entries(values)) {\n        this.writeField(id, field, value);\n      }\n    }\n    for (const [id, values] of Object.entries(layer.links)) {\n      if (!values) {\n        continue;\n      }\n      for (const [field, value] of Object.entries(values)) {\n        this.writeLink(id, field, value);\n      }\n    }\n    layer.deletedIDs.forEach((v) => this.deletedIDs.add(v));\n  }\n  addFieldOperation(id, field, operation) {\n    this.operations = {\n      ...this.operations,\n      [id]: {\n        ...this.operations[id],\n        fields: {\n          ...this.operations[id]?.fields,\n          [field]: [...this.operations[id]?.fields[field] || [], operation]\n        }\n      }\n    };\n  }\n}\nfunction isDeleteOperation(value) {\n  return !!value && value.kind === OperationKind.delete;\n}\nfunction isInsertOperation(value) {\n  return !!value && value.kind === OperationKind.insert;\n}\nfunction isRemoveOperation(value) {\n  return !!value && value.kind === OperationKind.remove;\n}\nconst OperationLocation = {\n  start: \"start\",\n  end: \"end\"\n};\nconst OperationKind = {\n  delete: \"delete\",\n  insert: \"insert\",\n  remove: \"remove\"\n};\nclass InMemorySubscriptions {\n  cache;\n  constructor(cache) {\n    this.cache = cache;\n  }\n  subscribers = /* @__PURE__ */ new Map();\n  keyVersions = {};\n  activeFields(parent) {\n    return Object.keys(this.subscribers.get(parent) || {});\n  }\n  copySubscribers(from, to) {\n    this.subscribers.set(to, this.subscribers.get(from) || /* @__PURE__ */ new Map());\n  }\n  add({\n    parent,\n    spec,\n    selection,\n    variables,\n    parentType\n  }) {\n    const __typename = this.cache._internal_unstable.storage.get(parent, \"__typename\").value;\n    let targetSelection = getFieldsForType(selection, __typename, false);\n    for (const fieldSelection of Object.values(targetSelection || {})) {\n      const {\n        keyRaw,\n        selection: innerSelection,\n        type,\n        list,\n        filters,\n        visible\n      } = fieldSelection;\n      if (!visible) {\n        continue;\n      }\n      const key = evaluateKey(keyRaw, variables);\n      let targetSelection2;\n      if (innerSelection) {\n        const __typename2 = this.cache._internal_unstable.storage.get(parent, \"__typename\").value;\n        targetSelection2 = getFieldsForType(innerSelection, __typename2, false);\n      }\n      this.addFieldSubscription({\n        id: parent,\n        key,\n        selection: [spec, targetSelection2],\n        type\n      });\n      if (list) {\n        this.registerList({\n          list,\n          filters,\n          id: parent,\n          key,\n          variables,\n          selection: innerSelection,\n          parentType: parentType || spec.rootType\n        });\n      }\n      if (innerSelection) {\n        const { value: linkedRecord } = this.cache._internal_unstable.storage.get(\n          parent,\n          key\n        );\n        let children = !Array.isArray(linkedRecord) ? [linkedRecord] : flatten(linkedRecord) || [];\n        for (const child of children) {\n          if (!child) {\n            continue;\n          }\n          this.add({\n            parent: child,\n            spec,\n            selection: innerSelection,\n            variables,\n            parentType: type\n          });\n        }\n      }\n    }\n  }\n  addFieldSubscription({\n    id,\n    key,\n    selection,\n    type\n  }) {\n    const spec = selection[0];\n    if (!this.subscribers.has(id)) {\n      this.subscribers.set(id, /* @__PURE__ */ new Map());\n    }\n    const subscriber = this.subscribers.get(id);\n    if (!subscriber.has(key)) {\n      subscriber.set(key, {\n        selections: [],\n        referenceCounts: /* @__PURE__ */ new Map()\n      });\n    }\n    const subscriberField = subscriber.get(key);\n    if (!this.keyVersions[key]) {\n      this.keyVersions[key] = /* @__PURE__ */ new Set();\n    }\n    this.keyVersions[key].add(key);\n    if (!subscriberField.selections.some(([{ set }]) => set === spec.set)) {\n      subscriberField.selections.push([spec, selection[1]]);\n    }\n    subscriberField.referenceCounts.set(\n      spec.set,\n      (subscriberField.referenceCounts.get(spec.set) || 0) + 1\n    );\n    this.cache._internal_unstable.lifetimes.resetLifetime(id, key);\n  }\n  registerList({\n    list,\n    id,\n    key,\n    parentType,\n    selection,\n    filters,\n    variables\n  }) {\n    this.cache._internal_unstable.lists.add({\n      name: list.name,\n      connection: list.connection,\n      recordID: id,\n      recordType: this.cache._internal_unstable.storage.get(id, \"__typename\")?.value || parentType,\n      listType: list.type,\n      key,\n      selection,\n      filters: Object.entries(filters || {}).reduce((acc, [key2, { kind, value }]) => {\n        return {\n          ...acc,\n          [key2]: kind !== \"Variable\" ? value : variables[value]\n        };\n      }, {})\n    });\n  }\n  addMany({\n    parent,\n    variables,\n    subscribers,\n    parentType\n  }) {\n    for (const [spec, targetSelection] of subscribers) {\n      for (const selection of Object.values(targetSelection ?? {})) {\n        const {\n          type: linkedType,\n          keyRaw,\n          selection: innerSelection,\n          list,\n          filters\n        } = selection;\n        const key = evaluateKey(keyRaw, variables);\n        const fieldSelection = innerSelection ? getFieldsForType(innerSelection, parentType, false) : void 0;\n        this.addFieldSubscription({\n          id: parent,\n          key,\n          selection: [spec, fieldSelection],\n          type: linkedType\n        });\n        if (list) {\n          this.registerList({\n            list,\n            filters,\n            id: parent,\n            key,\n            variables,\n            selection: innerSelection,\n            parentType: parentType || spec.rootType\n          });\n        }\n        const childSelection = selection.selection;\n        if (childSelection) {\n          const { value: link } = this.cache._internal_unstable.storage.get(parent, key);\n          const children = !Array.isArray(link) ? [link] : flatten(link);\n          for (const linkedRecord of children) {\n            if (!linkedRecord) {\n              continue;\n            }\n            const __typename = this.cache._internal_unstable.storage.get(\n              linkedRecord,\n              \"__typename\"\n            ).value;\n            let targetSelection2 = getFieldsForType(childSelection, __typename, false);\n            this.addMany({\n              parent: linkedRecord,\n              variables,\n              subscribers: subscribers.map(([sub]) => [sub, targetSelection2]),\n              parentType: linkedType\n            });\n          }\n        }\n      }\n    }\n  }\n  get(id, field) {\n    return this.subscribers.get(id)?.get(field)?.selections || [];\n  }\n  getAll(id) {\n    return [...this.subscribers.get(id)?.values() || []].flatMap(\n      (fieldSub) => fieldSub.selections\n    );\n  }\n  remove(id, selection, targets, variables, visited = []) {\n    visited.push(id);\n    const linkedIDs = [];\n    const __typename = this.cache._internal_unstable.storage.get(id, \"__typename\").value;\n    let targetSelection = getFieldsForType(selection, __typename, false);\n    for (const fieldSelection of Object.values(targetSelection || {})) {\n      const key = evaluateKey(fieldSelection.keyRaw, variables);\n      this.removeSubscribers(id, key, targets);\n      if (!fieldSelection.selection) {\n        continue;\n      }\n      const { value: previousValue } = this.cache._internal_unstable.storage.get(id, key);\n      const links = !Array.isArray(previousValue) ? [previousValue] : flatten(previousValue);\n      for (const link of links) {\n        if (link !== null) {\n          linkedIDs.push([link, fieldSelection.selection || {}]);\n        }\n      }\n    }\n    for (const [linkedRecordID, linkFields] of linkedIDs) {\n      this.remove(linkedRecordID, linkFields, targets, visited);\n    }\n  }\n  reset() {\n    const subscribers = [...this.subscribers.entries()].filter(([id]) => !id.startsWith(rootID));\n    for (const [id, _fields] of subscribers) {\n      this.subscribers.delete(id);\n    }\n    const subscriptionSpecs = subscribers.flatMap(\n      ([_id, fields]) => [...fields.values()].flatMap((field) => field.selections.map(([spec]) => spec))\n    );\n    return subscriptionSpecs;\n  }\n  removeSubscribers(id, fieldName, specs) {\n    let targets = [];\n    const subscriber = this.subscribers.get(id);\n    if (!subscriber) {\n      return;\n    }\n    const subscriberField = subscriber.get(fieldName);\n    for (const spec of specs) {\n      const counts = subscriberField?.referenceCounts;\n      if (!counts?.has(spec.set)) {\n        continue;\n      }\n      const newVal = (counts.get(spec.set) || 0) - 1;\n      counts.set(spec.set, newVal);\n      if (newVal <= 0) {\n        targets.push(spec.set);\n        counts.delete(spec.set);\n      }\n      if (counts.size === 0) {\n        subscriber.delete(fieldName);\n      }\n    }\n    if (subscriberField) {\n      subscriberField.selections = this.get(id, fieldName).filter(\n        ([{ set }]) => !targets.includes(set)\n      );\n    }\n    if (subscriber.size === 0) {\n      this.subscribers.delete(id);\n    }\n  }\n  removeAllSubscribers(id, targets) {\n    if (!targets) {\n      targets = [...this.subscribers.get(id)?.values() || []].flatMap(\n        (spec) => spec.selections.flatMap((sel) => sel[0])\n      );\n    }\n    for (const target of targets) {\n      for (const subselection of this.findSubSelections(\n        target.parentID || rootID,\n        target.selection,\n        target.variables || {},\n        id\n      )) {\n        this.remove(id, subselection, targets, target.variables || {});\n      }\n    }\n    return;\n  }\n  get size() {\n    let size = 0;\n    for (const [, nodeCounts] of this.subscribers) {\n      for (const [, { referenceCounts }] of nodeCounts) {\n        size += [...referenceCounts.values()].reduce((size2, count) => size2 + count, 0);\n      }\n    }\n    return size;\n  }\n  findSubSelections(parentID, selection, variables, searchTarget, selections = []) {\n    const __typename = this.cache._internal_unstable.storage.get(parentID, \"__typename\").value;\n    let targetSelection = getFieldsForType(selection, __typename, false);\n    for (const fieldSelection of Object.values(targetSelection || {})) {\n      if (!fieldSelection.selection) {\n        continue;\n      }\n      const key = evaluateKey(fieldSelection.keyRaw, variables || {});\n      const linkedRecord = this.cache._internal_unstable.storage.get(parentID, key);\n      const links = !Array.isArray(linkedRecord.value) ? [linkedRecord.value] : flatten(linkedRecord.value);\n      if (links.includes(searchTarget)) {\n        selections.push(fieldSelection.selection);\n      } else {\n        for (const link of links) {\n          this.findSubSelections(\n            link,\n            fieldSelection.selection,\n            variables,\n            searchTarget,\n            selections\n          );\n        }\n      }\n    }\n    return selections;\n  }\n}\nclass Cache {\n  _internal_unstable;\n  constructor({\n    disabled,\n    componentCache,\n    createComponent,\n    ...config2\n  } = {}) {\n    this._internal_unstable = new CacheInternal({\n      cache: this,\n      storage: new InMemoryStorage(),\n      subscriptions: new InMemorySubscriptions(this),\n      lists: new ListManager(this, rootID),\n      lifetimes: new GarbageCollector(this),\n      staleManager: new StaleManager(this),\n      disabled: disabled ?? typeof globalThis.window === \"undefined\",\n      componentCache,\n      createComponent\n    });\n    if (Object.keys(config2).length > 0) {\n      this.setConfig(defaultConfigValues(config2));\n    }\n  }\n  write({\n    layer: layerID,\n    notifySubscribers = [],\n    ...args\n  }) {\n    const layer = layerID ? this._internal_unstable.storage.getLayer(layerID) : this._internal_unstable.storage.topLayer;\n    const subscribers = this._internal_unstable.writeSelection({ ...args, layer }).map((sub) => sub[0]);\n    this.#notifySubscribers(subscribers.concat(notifySubscribers));\n    return subscribers;\n  }\n  read(...args) {\n    const { data, partial, stale, hasData } = this._internal_unstable.getSelection(...args);\n    if (!hasData) {\n      return { data: null, partial: false, stale: false };\n    }\n    return {\n      data,\n      partial,\n      stale\n    };\n  }\n  subscribe(spec, variables = {}) {\n    if (this._internal_unstable.disabled) {\n      return;\n    }\n    return this._internal_unstable.subscriptions.add({\n      parent: spec.parentID || rootID,\n      spec,\n      selection: spec.selection,\n      variables\n    });\n  }\n  unsubscribe(spec, variables = {}) {\n    return this._internal_unstable.subscriptions.remove(\n      spec.parentID || rootID,\n      spec.selection,\n      [spec],\n      variables\n    );\n  }\n  list(name, parentID, allLists, skipMatches) {\n    const handler = this._internal_unstable.lists.get(name, parentID, allLists, skipMatches);\n    if (!handler) {\n      throw new Error(\n        `Cannot find list with name: ${name}${parentID ? \" under parent \" + parentID : \"\"}. Is it possible that the query is not mounted?`\n      );\n    }\n    return handler;\n  }\n  registerKeyMap(source, mapped) {\n    this._internal_unstable.storage.registerIDMapping(source, mapped);\n    this._internal_unstable.subscriptions.copySubscribers(source, mapped);\n  }\n  delete(id, layer) {\n    const recordIDs = [this._internal_unstable.storage.idMaps[id], id].filter(\n      Boolean\n    );\n    for (const recordID of recordIDs) {\n      this._internal_unstable.subscriptions.removeAllSubscribers(recordID);\n      this._internal_unstable.lists.removeIDFromAllLists(recordID, layer);\n      this._internal_unstable.storage.delete(recordID, layer);\n    }\n  }\n  setConfig(config2) {\n    this._internal_unstable.setConfig(config2);\n  }\n  markTypeStale(options) {\n    if (!options) {\n      this._internal_unstable.staleManager.markAllStale();\n    } else if (!options.field) {\n      this._internal_unstable.staleManager.markTypeStale(options.type);\n    } else {\n      this._internal_unstable.staleManager.markTypeFieldStale(\n        options.type,\n        options.field,\n        options.when\n      );\n    }\n  }\n  markRecordStale(id, options) {\n    if (options.field) {\n      const key = computeKey({ field: options.field, args: options.when ?? {} });\n      this._internal_unstable.staleManager.markFieldStale(id, key);\n    } else {\n      this._internal_unstable.staleManager.markRecordStale(id);\n    }\n  }\n  getFieldTime(id, field) {\n    return this._internal_unstable.staleManager.getFieldTime(id, field);\n  }\n  config() {\n    return this._internal_unstable.config;\n  }\n  serialize() {\n    return this._internal_unstable.storage.serialize();\n  }\n  hydrate(...args) {\n    return this._internal_unstable.storage.hydrate(...args);\n  }\n  clearLayer(layerID) {\n    const layer = this._internal_unstable.storage.getLayer(layerID);\n    if (!layer) {\n      throw new Error(\"Cannot find layer with id: \" + layerID);\n    }\n    const toNotify = [];\n    const allFields = [];\n    for (const target of [layer.fields, layer.links]) {\n      for (const [id, fields] of Object.entries(target)) {\n        allFields.push(\n          ...Object.entries(fields).map(([field, value]) => ({ id, field, value }))\n        );\n      }\n    }\n    const displayFields = [];\n    for (const pair of allFields) {\n      const { displayLayers } = this._internal_unstable.storage.get(pair.id, pair.field);\n      if (!displayLayers.includes(layerID)) {\n        continue;\n      }\n      displayFields.push(pair);\n    }\n    for (const [id, operation] of Object.entries(layer.operations)) {\n      if (operation.deleted) {\n        displayFields.push(\n          ...this._internal_unstable.subscriptions.activeFields(id).map((field) => ({ id, field }))\n        );\n      }\n      const fields = Object.keys(operation.fields ?? {});\n      if (fields.length > 0) {\n        displayFields.push(...fields.map((field) => ({ id, field })));\n      }\n    }\n    layer.clear();\n    for (const display of displayFields) {\n      const { field, id } = display;\n      const notify = !(\"value\" in display) || this._internal_unstable.storage.get(id, field).value !== display.value;\n      if (notify) {\n        toNotify.push(\n          ...this._internal_unstable.subscriptions.get(id, field).map((sub) => sub[0])\n        );\n      }\n    }\n    this.#notifySubscribers(toNotify);\n  }\n  reset() {\n    const subSpecs = this._internal_unstable.subscriptions.reset();\n    this._internal_unstable.staleManager.reset();\n    this._internal_unstable.lifetimes.reset();\n    this._internal_unstable.lists.reset();\n    this._internal_unstable.storage.reset();\n    this.#notifySubscribers(subSpecs);\n  }\n  #notifySubscribers(subs) {\n    if (subs.length === 0) {\n      return;\n    }\n    const notified = [];\n    for (const spec of subs) {\n      if (!notified.includes(spec.set)) {\n        notified.push(spec.set);\n        spec.set(\n          this._internal_unstable.getSelection({\n            parent: spec.parentID || rootID,\n            selection: spec.selection,\n            variables: spec.variables?.() || {},\n            ignoreMasking: false\n          }).data\n        );\n      }\n    }\n  }\n}\nclass CacheInternal {\n  disabled = false;\n  _config;\n  storage;\n  subscriptions;\n  lists;\n  cache;\n  lifetimes;\n  staleManager;\n  componentCache;\n  createComponent;\n  constructor({\n    storage,\n    subscriptions,\n    lists,\n    cache,\n    lifetimes,\n    staleManager,\n    disabled,\n    config: config2,\n    componentCache,\n    createComponent\n  }) {\n    this.storage = storage;\n    this.subscriptions = subscriptions;\n    this.lists = lists;\n    this.cache = cache;\n    this.lifetimes = lifetimes;\n    this.staleManager = staleManager;\n    this._config = config2;\n    this.componentCache = componentCache ?? {};\n    this.createComponent = createComponent ?? (() => ({}));\n    this.disabled = disabled;\n    try {\n      if (process.env.HOUDINI_TEST === \"true\") {\n        this.disabled = false;\n      }\n    } catch {\n    }\n  }\n  get config() {\n    return this._config ?? getCurrentConfig();\n  }\n  setConfig(config2) {\n    this._config = config2;\n  }\n  writeSelection({\n    data,\n    selection,\n    variables = {},\n    parent = rootID,\n    applyUpdates,\n    layer,\n    toNotify = [],\n    forceNotify,\n    forceStale\n  }) {\n    if (this.disabled) {\n      return [];\n    }\n    let targetSelection = getFieldsForType(\n      selection,\n      data[\"__typename\"],\n      false\n    );\n    for (const [field, value] of Object.entries(data)) {\n      if (!selection || !targetSelection[field]) {\n        continue;\n      }\n      let {\n        type: linkedType,\n        keyRaw,\n        selection: fieldSelection,\n        operations,\n        abstract: isAbstract,\n        updates\n      } = targetSelection[field];\n      const key = evaluateKey(keyRaw, variables);\n      if (value && typeof value === \"object\" && \"__typename\" in value && value[\"__typename\"]) {\n        linkedType = value[\"__typename\"];\n      }\n      const currentSubscribers = this.subscriptions.get(parent, key);\n      const specs = currentSubscribers.map((sub) => sub[0]);\n      const { value: previousValue, displayLayers } = this.storage.get(parent, key);\n      const displayLayer = layer.isDisplayLayer(displayLayers);\n      if (displayLayer) {\n        this.lifetimes.resetLifetime(parent, key);\n        if (forceStale) {\n          this.staleManager.markFieldStale(parent, key);\n        } else {\n          this.staleManager.setFieldTimeToNow(parent, key);\n        }\n      }\n      if (!fieldSelection) {\n        let newValue = value;\n        if (updates && applyUpdates && Array.isArray(value)) {\n          for (const update of applyUpdates) {\n            if (!updates.includes(update)) {\n              continue;\n            }\n            if (update === \"append\") {\n              newValue = (previousValue || []).concat(value);\n            } else if (update === \"prepend\") {\n              newValue = value.concat(previousValue || []);\n            }\n          }\n        }\n        if (updates && applyUpdates?.includes(\"prepend\") && [\"endCursor\", \"hasNextPage\"].includes(key)) {\n          newValue = previousValue;\n        } else if (updates && applyUpdates?.includes(\"append\") && [\"startCursor\", \"hasPreviousPage\"].includes(key)) {\n          newValue = previousValue;\n        }\n        const valueChanged = !deepEquals(newValue, previousValue);\n        if (displayLayer && (valueChanged || forceNotify)) {\n          toNotify.push(...currentSubscribers);\n        }\n        layer.writeField(parent, key, newValue);\n      } else if (value === null) {\n        if (previousValue === null) {\n          continue;\n        }\n        const previousLinks = flatten([previousValue]);\n        for (const link of previousLinks) {\n          this.subscriptions.remove(link, fieldSelection, specs, variables);\n        }\n        layer.writeLink(parent, key, null);\n        toNotify.push(...currentSubscribers);\n      } else if (value instanceof Object && !Array.isArray(value)) {\n        if (isAbstract) {\n          if (!value.__typename) {\n            throw new Error(\n              \"Encountered interface type without __typename in the payload\"\n            );\n          }\n        }\n        let linkedID = null;\n        if (value !== null) {\n          linkedID = !this.isEmbedded(linkedType, value) ? this.id(linkedType, value) : `${parent}.${key}`;\n        }\n        let linkChange = linkedID !== previousValue;\n        layer.writeLink(parent, key, linkedID);\n        if (linkedID && displayLayer && (linkChange || forceNotify)) {\n          if (previousValue && typeof previousValue === \"string\") {\n            this.subscriptions.remove(previousValue, fieldSelection, specs, variables);\n          }\n          this.subscriptions.addMany({\n            parent: linkedID,\n            subscribers: currentSubscribers,\n            variables,\n            parentType: linkedType\n          });\n          toNotify.push(...currentSubscribers);\n        }\n        if (linkedID) {\n          this.writeSelection({\n            selection: fieldSelection,\n            parent: linkedID,\n            data: value,\n            variables,\n            toNotify,\n            applyUpdates,\n            layer,\n            forceNotify\n          });\n        }\n      } else if (Array.isArray(value) && (typeof previousValue === \"undefined\" || previousValue === null || Array.isArray(previousValue))) {\n        let oldIDs = [...previousValue || []];\n        const emptyEdges = !updates ? [] : oldIDs.map((id) => {\n          if (!id) {\n            return \"\";\n          }\n          const { value: cursorField } = this.storage.get(id, \"cursor\");\n          if (cursorField) {\n            return \"\";\n          }\n          const { value: node } = this.storage.get(id, \"node\");\n          if (!node) {\n            return \"\";\n          }\n          return node;\n        });\n        let linkedIDs = [];\n        const { newIDs, nestedIDs } = this.extractNestedListIDs({\n          value,\n          abstract: Boolean(isAbstract),\n          specs: toNotify,\n          applyUpdates,\n          recordID: parent,\n          key,\n          linkedType,\n          variables,\n          fields: fieldSelection,\n          layer,\n          forceNotify\n        });\n        let action = () => {\n          layer.writeLink(parent, key, linkedIDs);\n        };\n        if (applyUpdates && updates) {\n          if (key === \"edges\") {\n            const newNodeIDs = [];\n            for (const id of newIDs) {\n              if (!id) {\n                continue;\n              }\n              const { value: node } = this.storage.get(id, \"node\");\n              if (typeof node !== \"string\") {\n                continue;\n              }\n              if (!node || !this.storage.get(node, \"__typename\")) {\n                continue;\n              }\n              newNodeIDs.push(node);\n            }\n            oldIDs = oldIDs.filter((id) => {\n              if (!id) {\n                return true;\n              }\n              const { value: value2 } = this.storage.get(id, \"node\");\n              const node = value2;\n              if (newNodeIDs.includes(node) && emptyEdges.includes(node)) {\n                return false;\n              }\n              return true;\n            });\n          }\n          for (const update of applyUpdates) {\n            if (update !== \"replace\" && !updates.includes(update)) {\n              continue;\n            }\n            if (update === \"prepend\") {\n              linkedIDs = newIDs.concat(oldIDs);\n              if (layer?.optimistic) {\n                action = () => {\n                  for (const id of newIDs) {\n                    if (id) {\n                      layer.insert(parent, key, \"start\", id);\n                    }\n                  }\n                };\n              }\n            } else if (update === \"append\") {\n              linkedIDs = oldIDs.concat(newIDs);\n              if (layer?.optimistic) {\n                action = () => {\n                  for (const id of newIDs) {\n                    if (id) {\n                      layer.insert(parent, key, \"end\", id);\n                    }\n                  }\n                };\n              }\n            } else if (update === \"replace\") {\n              linkedIDs = newIDs;\n            }\n          }\n        } else {\n          linkedIDs = nestedIDs;\n        }\n        const contentChanged = !deepEquals(linkedIDs, oldIDs) || previousValue === null;\n        if (contentChanged || forceNotify) {\n          toNotify.push(...currentSubscribers);\n        }\n        for (const lostID of oldIDs) {\n          if (linkedIDs.includes(lostID) || !lostID) {\n            continue;\n          }\n          this.subscriptions.remove(lostID, fieldSelection, specs, variables);\n        }\n        if (contentChanged || oldIDs.length === 0 && newIDs.length === 0) {\n          action();\n        }\n        for (const id of newIDs.filter((id2) => !oldIDs.includes(id2))) {\n          if (id == null) {\n            continue;\n          }\n          this.subscriptions.addMany({\n            parent: id,\n            subscribers: currentSubscribers,\n            variables,\n            parentType: linkedType\n          });\n        }\n      }\n      const processedOperations = /* @__PURE__ */ new Set();\n      for (const operation of operations || []) {\n        let parentID;\n        if (operation.parentID) {\n          if (operation.parentID.kind !== \"Variable\") {\n            parentID = operation.parentID.value;\n          } else {\n            const id = variables[operation.parentID.value];\n            if (typeof id !== \"string\") {\n              throw new Error(\"parentID value must be a string\");\n            }\n            parentID = id;\n          }\n        }\n        if (operation.list && !this.lists.get(operation.list, parentID, operation.target === \"all\")) {\n          continue;\n        }\n        const targets = Array.isArray(value) ? value : [value];\n        for (const target of targets) {\n          if (operation.action === \"insert\" && target instanceof Object && fieldSelection && operation.list) {\n            this.cache.list(\n              operation.list,\n              parentID,\n              operation.target === \"all\",\n              processedOperations\n            ).when(operation.when).addToList(\n              fieldSelection,\n              target,\n              variables,\n              operation.position || \"last\",\n              layer\n            );\n          } else if (operation.action === \"toggle\" && target instanceof Object && fieldSelection && operation.list) {\n            this.cache.list(\n              operation.list,\n              parentID,\n              operation.target === \"all\",\n              processedOperations\n            ).when(operation.when).toggleElement({\n              selection: fieldSelection,\n              data: target,\n              variables,\n              where: operation.position || \"last\",\n              layer\n            });\n          } else if (operation.action === \"remove\" && target instanceof Object && fieldSelection && operation.list) {\n            this.cache.list(\n              operation.list,\n              parentID,\n              operation.target === \"all\",\n              processedOperations\n            ).when(operation.when).remove(target, variables, layer);\n          } else if (operation.action === \"delete\" && operation.type && target) {\n            const targetID = this.id(operation.type, target);\n            if (!targetID) {\n              continue;\n            }\n            toNotify.push(\n              ...this.subscriptions.getAll(targetID).filter((sub) => sub[0].parentID !== targetID)\n            );\n            this.cache.delete(targetID, layer);\n          }\n        }\n        if (operation.list) {\n          const matchingLists = this.cache.list(\n            operation.list,\n            parentID,\n            operation.target === \"all\"\n          );\n          for (const list of matchingLists.lists) {\n            processedOperations.add(list.fieldRef);\n          }\n        }\n      }\n    }\n    return toNotify;\n  }\n  getSelection({\n    selection,\n    parent = rootID,\n    variables,\n    stepsFromConnection = null,\n    ignoreMasking,\n    fullCheck = false,\n    loading: generateLoading\n  }) {\n    if (parent === null) {\n      return { data: null, partial: false, stale: false, hasData: true };\n    }\n    const target = {};\n    if (selection.fragments) {\n      target[fragmentKey] = {\n        loading: Boolean(generateLoading),\n        values: Object.fromEntries(\n          Object.entries(selection.fragments).filter(([, value]) => !generateLoading || value.loading).map(([key, value]) => [\n            key,\n            {\n              parent,\n              variables: evaluateVariables(value.arguments, variables ?? {})\n            }\n          ])\n        )\n      };\n    }\n    let hasData = !!selection.fragments;\n    let partial = false;\n    let cascadeNull = false;\n    let stale = false;\n    const typename = this.storage.get(parent, \"__typename\").value;\n    let targetSelection = getFieldsForType(selection, typename, !!generateLoading);\n    for (const [\n      attributeName,\n      {\n        type,\n        keyRaw,\n        selection: fieldSelection,\n        nullable,\n        list,\n        visible,\n        directives,\n        loading: fieldLoading,\n        abstractHasRequired,\n        component\n      }\n    ] of Object.entries(targetSelection)) {\n      if (!visible && !ignoreMasking && !fullCheck) {\n        continue;\n      }\n      const includeDirective = directives?.find((d) => {\n        return d.name === \"include\";\n      });\n      if (includeDirective) {\n        if (!evaluateVariables(includeDirective.arguments, variables ?? {})[\"if\"]) {\n          continue;\n        }\n      }\n      const skipDirective = directives?.find((d) => {\n        return d.name === \"skip\";\n      });\n      if (skipDirective) {\n        if (evaluateVariables(skipDirective.arguments, variables ?? {})[\"if\"]) {\n          continue;\n        }\n      }\n      const fieldTarget = visible || ignoreMasking ? target : {};\n      const key = evaluateKey(keyRaw, variables);\n      if (generateLoading && !fieldLoading) {\n        continue;\n      }\n      const defaultValue = !component ? void 0 : defaultComponentField({\n        cache: this.cache,\n        component,\n        variables,\n        parent\n      });\n      let { value } = this.storage.get(parent, key, defaultValue);\n      const dt_field = this.staleManager.getFieldTime(parent, key);\n      if (dt_field === null) {\n        stale = true;\n      }\n      if (generateLoading) {\n        value = void 0;\n      }\n      let nextStep = stepsFromConnection;\n      if (nextStep !== null) {\n        if (nextStep >= 2) {\n          nextStep = null;\n        } else {\n          nextStep += 1;\n        }\n      }\n      if (list?.connection) {\n        nextStep = 0;\n      }\n      const embeddedCursor = key === \"cursor\" && stepsFromConnection === 1;\n      if (typeof value === \"undefined\" && !embeddedCursor) {\n        partial = true;\n      }\n      if (generateLoading && fieldLoading?.kind === \"value\") {\n        fieldTarget[attributeName] = PendingValue;\n        hasData = true;\n      } else if (!generateLoading && typeof value === \"undefined\" || value === null) {\n        fieldTarget[attributeName] = null;\n        if (typeof value !== \"undefined\") {\n          hasData = true;\n        }\n      } else if (!fieldSelection) {\n        const fnUnmarshal = this.config?.scalars?.[type]?.unmarshal;\n        if (fnUnmarshal) {\n          if (Array.isArray(value)) {\n            fieldTarget[attributeName] = value.map(\n              (v) => fnUnmarshal(v)\n            );\n          } else {\n            fieldTarget[attributeName] = fnUnmarshal(value);\n          }\n        } else {\n          fieldTarget[attributeName] = value;\n        }\n        hasData = true;\n      } else if (Array.isArray(value)) {\n        const listValue = this.hydrateNestedList({\n          fields: fieldSelection,\n          variables,\n          linkedList: value,\n          stepsFromConnection: nextStep,\n          ignoreMasking: !!ignoreMasking,\n          fullCheck,\n          loading: generateLoading,\n          nullable: !!nullable\n        });\n        fieldTarget[attributeName] = listValue.data;\n        if (listValue.partial) {\n          partial = true;\n        }\n        if (listValue.cascadeNull) {\n          cascadeNull = true;\n        }\n        if (listValue.stale) {\n          stale = true;\n        }\n        if (listValue.hasData || value.length === 0) {\n          hasData = true;\n        }\n      } else {\n        const objectFields = this.getSelection({\n          parent: value,\n          selection: fieldSelection,\n          variables,\n          stepsFromConnection: nextStep,\n          ignoreMasking,\n          fullCheck,\n          loading: generateLoading\n        });\n        fieldTarget[attributeName] = objectFields.data;\n        if (objectFields.partial) {\n          partial = true;\n        }\n        if (objectFields.stale) {\n          stale = true;\n        }\n        if (objectFields.hasData) {\n          hasData = true;\n        }\n      }\n      if (generateLoading && fieldLoading?.list) {\n        fieldTarget[attributeName] = wrapInLists(\n          Array.from({ length: fieldLoading.list.count }).fill(\n            fieldTarget[attributeName]\n          ),\n          fieldLoading.list.depth - 1\n        );\n      }\n      if (fieldTarget[attributeName] === null && !nullable && !embeddedCursor) {\n        if (abstractHasRequired) {\n          target[attributeName] = {\n            __typename: \"@required field missing; don't match this\"\n          };\n        } else {\n          cascadeNull = true;\n        }\n      }\n    }\n    return {\n      data: cascadeNull ? null : target,\n      partial: !generateLoading && hasData && partial,\n      stale: hasData && stale,\n      hasData\n    };\n  }\n  id(type, data) {\n    const id = typeof data === \"object\" ? this.computeID(type, data) : data;\n    if (!id) {\n      return null;\n    }\n    if (!type) {\n      return id;\n    }\n    return type + \":\" + id;\n  }\n  idFields(type) {\n    return keyFieldsForType(this.config, type);\n  }\n  computeID(type, data) {\n    return computeID(this.config, type, data);\n  }\n  isEmbedded(linkedType, value) {\n    const idFields = this.idFields(linkedType);\n    return idFields.length === 0 || idFields.filter((field) => typeof value[field] === \"undefined\").length > 0;\n  }\n  hydrateNestedList({\n    fields,\n    variables,\n    linkedList,\n    stepsFromConnection,\n    ignoreMasking,\n    fullCheck,\n    loading,\n    nullable\n  }) {\n    const result = [];\n    let partialData = false;\n    let stale = false;\n    let hasValues = false;\n    let cascadeNull = false;\n    for (const entry of linkedList) {\n      if (Array.isArray(entry)) {\n        const nestedValue = this.hydrateNestedList({\n          fields,\n          nullable,\n          variables,\n          linkedList: entry,\n          stepsFromConnection,\n          ignoreMasking,\n          fullCheck,\n          loading\n        });\n        result.push(nestedValue.data);\n        if (nestedValue.partial) {\n          partialData = true;\n        }\n        if (nestedValue.cascadeNull) {\n          cascadeNull = true;\n        }\n        continue;\n      }\n      if (entry === null) {\n        result.push(entry);\n        continue;\n      }\n      const {\n        data,\n        partial,\n        stale: local_stale,\n        hasData\n      } = this.getSelection({\n        parent: entry,\n        selection: fields,\n        variables,\n        stepsFromConnection,\n        ignoreMasking,\n        fullCheck,\n        loading\n      });\n      if (data === null && !nullable) {\n        cascadeNull = true;\n      }\n      result.push(data);\n      if (partial) {\n        partialData = true;\n      }\n      if (local_stale) {\n        stale = true;\n      }\n      if (hasData) {\n        hasValues = true;\n      }\n    }\n    return {\n      data: result,\n      partial: partialData,\n      stale,\n      hasData: hasValues,\n      cascadeNull\n    };\n  }\n  extractNestedListIDs({\n    value,\n    abstract,\n    recordID,\n    key,\n    linkedType,\n    fields,\n    variables,\n    applyUpdates,\n    specs,\n    layer,\n    forceNotify\n  }) {\n    const nestedIDs = [];\n    const newIDs = [];\n    for (const [i, entry] of value.entries()) {\n      if (Array.isArray(entry)) {\n        const inner = this.extractNestedListIDs({\n          value: entry,\n          abstract,\n          recordID,\n          key,\n          linkedType,\n          fields,\n          variables,\n          applyUpdates,\n          specs,\n          layer,\n          forceNotify\n        });\n        newIDs.push(...inner.newIDs);\n        nestedIDs[i] = inner.nestedIDs;\n        continue;\n      }\n      if (entry === null || typeof entry === \"undefined\") {\n        newIDs.push(null);\n        nestedIDs[i] = null;\n        continue;\n      }\n      const entryObj = entry;\n      let linkedID = `${recordID}.${key}[${this.storage.nextRank}]`;\n      let innerType = linkedType;\n      const typename = entryObj.__typename;\n      if (typename) {\n        innerType = typename;\n      } else if (abstract) {\n        throw new Error(\"Encountered interface type without __typename in the payload\");\n      }\n      if (!this.isEmbedded(linkedType, entry)) {\n        const id = this.id(innerType, entry);\n        if (id) {\n          linkedID = id;\n        } else {\n          continue;\n        }\n      }\n      this.writeSelection({\n        root: rootID,\n        selection: fields,\n        parent: linkedID,\n        data: entryObj,\n        variables,\n        toNotify: specs,\n        applyUpdates,\n        layer,\n        forceNotify\n      });\n      newIDs.push(linkedID);\n      nestedIDs[i] = linkedID;\n    }\n    return { newIDs, nestedIDs };\n  }\n  collectGarbage() {\n    this.lifetimes.tick();\n    if (this.storage.layerCount === 1) {\n      this.storage.topLayer.removeUndefinedFields();\n    }\n  }\n}\nfunction evaluateVariables(variables, args) {\n  return Object.fromEntries(\n    Object.entries(variables).map(([key, value]) => [key, variableValue(value, args)])\n  );\n}\nfunction wrapInLists(target, count = 0) {\n  if (count === 0) {\n    return target;\n  }\n  return wrapInLists([target], count - 1);\n}\nfunction variableValue(value, args) {\n  if (value.kind === \"StringValue\") {\n    return value.value;\n  }\n  if (value.kind === \"BooleanValue\") {\n    return value.value;\n  }\n  if (value.kind === \"EnumValue\") {\n    return value.value;\n  }\n  if (value.kind === \"FloatValue\") {\n    return parseFloat(value.value);\n  }\n  if (value.kind === \"IntValue\") {\n    return parseInt(value.value, 10);\n  }\n  if (value.kind === \"NullValue\") {\n    return null;\n  }\n  if (value.kind === \"Variable\") {\n    return args[value.name.value];\n  }\n  if (value.kind === \"ListValue\") {\n    return value.values.map((value2) => variableValue(value2, args));\n  }\n  if (value.kind === \"ObjectValue\") {\n    return value.fields.reduce(\n      (obj, field) => ({\n        ...obj,\n        [field.name.value]: variableValue(field.value, args)\n      }),\n      {}\n    );\n  }\n}\nfunction defaultComponentField({\n  cache,\n  component,\n  loading,\n  variables,\n  parent\n}) {\n  return (props) => {\n    const componentFn = cache._internal_unstable.componentCache[component.key];\n    const args = evaluateVariables(component.variables ?? {}, variables ?? {});\n    return cache._internal_unstable.createComponent(componentFn, {\n      ...props,\n      [component.prop]: {\n        [fragmentKey]: {\n          loading,\n          values: {\n            [component.fragment]: {\n              variables: args,\n              parent\n            }\n          }\n        }\n      }\n    });\n  };\n}\nvar cache_default = new Cache();\nconst serverSide = typeof globalThis.window === \"undefined\";\nconst cachePolicy = ({\n  enabled,\n  setFetching,\n  cache: localCache = cache_default,\n  serverSideFallback = true\n}) => () => {\n  return {\n    beforeNetwork(ctx, { initialValue, next, resolve, marshalVariables: marshalVariables2 }) {\n      const { policy, artifact: artifact2 } = ctx;\n      let useCache = false;\n      if (enabled && (artifact2.kind === ArtifactKind.Query || artifact2.kind === ArtifactKind.Fragment) && !ctx.cacheParams?.disableRead) {\n        const policyAllowsCache = policy !== CachePolicy.NetworkOnly && policy !== CachePolicy.NoCache;\n        if (policyAllowsCache) {\n          const value = localCache.read({\n            selection: artifact2.selection,\n            variables: marshalVariables2(ctx),\n            fullCheck: true\n          });\n          const allowed = !value.partial || artifact2.kind === ArtifactKind.Query && artifact2.partial;\n          if (policy === CachePolicy.CacheOnly) {\n            return resolve(ctx, {\n              fetching: false,\n              variables: ctx.variables ?? null,\n              data: allowed ? value.data : initialValue.data,\n              errors: null,\n              source: DataSource.Cache,\n              partial: allowed ? value.partial : false,\n              stale: value.stale\n            });\n          }\n          useCache = !!(value.data !== null && allowed);\n          if (useCache) {\n            resolve(ctx, {\n              fetching: false,\n              variables: ctx.variables ?? null,\n              data: value.data,\n              errors: null,\n              source: DataSource.Cache,\n              partial: value.partial,\n              stale: value.stale\n            });\n          }\n          if (useCache && !value.partial && !value.stale && ctx.policy !== \"CacheAndNetwork\") {\n            return;\n          }\n        }\n      }\n      if (enabled) {\n        setTimeout(() => {\n          localCache._internal_unstable.collectGarbage();\n        }, 0);\n      }\n      if (!ctx.stuff?.silenceLoading) {\n        let fetchingState = null;\n        if (!useCache && \"enableLoadingState\" in artifact2 && artifact2.enableLoadingState) {\n          fetchingState = localCache.read({\n            selection: artifact2.selection,\n            variables: marshalVariables2(ctx),\n            loading: true\n          }).data;\n        }\n        setFetching(!useCache, fetchingState);\n      }\n      return next(ctx);\n    },\n    afterNetwork(ctx, { resolve, value, marshalVariables: marshalVariables2 }) {\n      if (ctx.policy !== CachePolicy.NoCache && value.source !== DataSource.Cache && enabled && value.data && !ctx.cacheParams?.disableWrite) {\n        if (ctx.cacheParams && \"serverSideFallback\" in ctx.cacheParams) {\n          serverSideFallback = ctx.cacheParams?.serverSideFallback ?? serverSideFallback;\n        }\n        const targetCache = serverSide && serverSideFallback ? new Cache({ disabled: false }) : localCache;\n        let layer;\n        if (!serverSide && ctx.cacheParams?.layer) {\n          layer = ctx.cacheParams.layer.id;\n        }\n        targetCache.write({\n          ...ctx.cacheParams,\n          layer,\n          selection: ctx.artifact.selection,\n          data: value.data,\n          variables: marshalVariables2(ctx)\n        });\n        value = {\n          ...value,\n          data: targetCache.read({\n            selection: ctx.artifact.selection,\n            variables: marshalVariables2(ctx),\n            ignoreMasking: serverSide\n          }).data\n        };\n      }\n      resolve(ctx, value);\n    }\n  };\n};\nconst steps = {\n  forward: [\"start\", \"beforeNetwork\", \"network\"],\n  backwards: [\"end\", \"afterNetwork\"]\n};\nlet inflightRequests = {};\nclass DocumentStore extends Writable {\n  artifact;\n  #client;\n  #configFile;\n  #plugins;\n  #lastVariables;\n  #lastContext = null;\n  pendingPromise = null;\n  serverSideFallback;\n  controllerKey(variables) {\n    const usedVariables = \"dedupe\" in this.artifact && this.artifact.dedupe?.match !== DedupeMatchMode.Variables ? {} : variables;\n    return `${this.artifact.name}@${stableStringify(usedVariables)}`;\n  }\n  constructor({\n    artifact: artifact2,\n    plugins,\n    pipeline,\n    client: client2,\n    cache,\n    enableCache = true,\n    initialValue,\n    initialVariables,\n    fetching\n  }) {\n    fetching ??= artifact2.kind === ArtifactKind.Query;\n    const initialState = {\n      data: initialValue ?? null,\n      errors: null,\n      partial: false,\n      stale: false,\n      source: null,\n      fetching,\n      variables: initialVariables ?? null\n    };\n    super(initialState, () => {\n      return () => {\n        this.#lastVariables = null;\n        this.cleanup();\n      };\n    });\n    this.artifact = artifact2;\n    this.#client = client2;\n    this.#lastVariables = null;\n    this.#configFile = getCurrentConfig();\n    this.#plugins = pipeline ?? [\n      cachePolicy({\n        cache,\n        enabled: enableCache,\n        setFetching: (fetching2, data) => {\n          this.update((state) => {\n            const newState = { ...state, fetching: fetching2 };\n            if (fetching2 && data) {\n              newState.data = data;\n            }\n            return newState;\n          });\n        }\n      })(),\n      ...plugins ?? []\n    ];\n  }\n  async send({\n    metadata,\n    session,\n    fetch,\n    variables,\n    policy,\n    stuff,\n    cacheParams,\n    setup = false,\n    silenceEcho = false,\n    abortController = new AbortController()\n  } = {}) {\n    if (\"dedupe\" in this.artifact && this.artifact.dedupe && this.artifact.dedupe.match !== \"None\") {\n      const dedupeKey = this.controllerKey(variables);\n      if (inflightRequests[dedupeKey]) {\n        if (this.artifact.dedupe.cancel === \"first\") {\n          inflightRequests[dedupeKey].controller.abort();\n          inflightRequests[dedupeKey].controller = abortController;\n        } else {\n          abortController.abort();\n        }\n      } else {\n        inflightRequests[dedupeKey] = {\n          variables,\n          controller: abortController\n        };\n      }\n    }\n    let context = new ClientPluginContextWrapper({\n      abortController,\n      config: this.#configFile,\n      name: this.artifact.name,\n      text: this.artifact.raw,\n      hash: this.artifact.hash,\n      policy: policy ?? this.artifact.policy,\n      variables: null,\n      metadata,\n      session,\n      fetch: fetch ?? this.getFetch(() => session),\n      stuff: {\n        inputs: {\n          changed: false,\n          init: false,\n          marshaled: {}\n        },\n        ...stuff\n      },\n      artifact: this.artifact,\n      lastVariables: this.#lastVariables,\n      cacheParams\n    });\n    const draft = context.draft();\n    draft.variables = variables ?? null;\n    context = context.apply(draft, false);\n    const promise = new Promise((resolve, reject) => {\n      const state = {\n        setup,\n        currentStep: 0,\n        index: 0,\n        silenceEcho,\n        promise: {\n          resolved: false,\n          resolve,\n          reject,\n          then: (...args) => promise.then(...args)\n        },\n        context\n      };\n      if (this.pendingPromise === null) {\n        this.pendingPromise = state.promise;\n      }\n      this.#step(\"forward\", state);\n    });\n    const response = await promise;\n    delete inflightRequests[this.controllerKey(variables)];\n    return response;\n  }\n  async cleanup() {\n    for (const plugin of this.#plugins) {\n      plugin.cleanup?.(this.#lastContext);\n    }\n  }\n  getFetch(getSession2) {\n    return async (input, init) => {\n      let url = \"\";\n      let queries = [];\n      if (typeof input === \"string\") {\n        url = input.startsWith(\"http\") ? new URL(input).pathname : input;\n      }\n      if (input instanceof URL) {\n        url = input.pathname;\n      } else if (input instanceof Request) {\n        url = new URL(input.url).pathname;\n      }\n      if (input instanceof Request) {\n        const body = await input.json();\n        if (!Array.isArray(body)) {\n          queries = [body];\n        }\n      } else {\n        const body = JSON.parse(init?.body);\n        if (!Array.isArray(body)) {\n          queries = [body];\n        }\n      }\n      if (!url || queries.length === 0) {\n        return await globalThis.fetch(input, init);\n      }\n      if (this.#client?.proxies[url]) {\n        const result = await Promise.all(\n          queries.map(\n            (q) => this.#client?.proxies[url]({\n              ...q,\n              session: getSession2()\n            })\n          )\n        );\n        return new Response(JSON.stringify(result.length === 1 ? result[0] : result));\n      }\n      return await globalThis.fetch(input, init);\n    };\n  }\n  #step(direction, ctx, value) {\n    const hook = direction === \"error\" ? \"catch\" : steps[direction][ctx.currentStep];\n    let valid = (i) => i <= this.#plugins.length;\n    let step = (i) => i + 1;\n    if ([\"backwards\", \"error\"].includes(direction)) {\n      valid = (i) => i >= 0;\n      step = (i) => i - 1;\n    }\n    for (let index = ctx.index; valid(index); index = step(index)) {\n      let target = this.#plugins[index]?.[hook];\n      if (!target) {\n        continue;\n      }\n      const draft = ctx.context.draft();\n      let variablesRefChanged = (newContext) => newContext.variables !== draft.variables;\n      const common = {\n        initialValue: this.state,\n        client: this.#client,\n        variablesChanged,\n        marshalVariables,\n        updateState: this.update.bind(this),\n        next: (newContext) => {\n          const nextIndex = [\"forward\", \"error\"].includes(direction) ? index + 1 : index;\n          const nextStep = [\"backwards\", \"error\"].includes(direction) ? 0 : ctx.currentStep;\n          this.#step(\"forward\", {\n            ...ctx,\n            index: nextIndex,\n            currentStep: nextStep,\n            context: ctx.context.apply(newContext, variablesRefChanged(newContext))\n          });\n        },\n        resolve: (newContext, value2) => {\n          const nextIndex = direction === \"backwards\" ? index - 1 : index;\n          this.#step(\n            \"backwards\",\n            {\n              ...ctx,\n              index: nextIndex,\n              context: ctx.context.apply(newContext, variablesRefChanged(newContext))\n            },\n            value2\n          );\n        }\n      };\n      let handlers;\n      if (direction === \"forward\") {\n        handlers = common;\n      } else if (direction === \"backwards\") {\n        handlers = {\n          ...common,\n          value,\n          resolve: (ctx2, data) => {\n            return common.resolve(ctx2, data ?? value);\n          }\n        };\n      } else if (direction === \"error\") {\n        handlers = {\n          ...common,\n          error: value\n        };\n      }\n      try {\n        if (draft.abortController.signal.aborted) {\n          const abortError = new Error(\"aborted\");\n          abortError.name = \"AbortError\";\n          throw abortError;\n        }\n        const result = target(draft, handlers);\n        result?.catch((err) => {\n          this.#step(\"error\", { ...ctx, index: index - 1 }, err);\n        });\n      } catch (err) {\n        this.#step(\"error\", { ...ctx, index: index - 1 }, err);\n      }\n      return;\n    }\n    if (direction === \"forward\") {\n      if (ctx.setup) {\n        return this.#step(\n          \"backwards\",\n          {\n            ...ctx,\n            currentStep: 0,\n            index: this.#plugins.length\n          },\n          this.state\n        );\n      }\n      if (ctx.currentStep <= steps.forward.length - 2) {\n        return this.#step(\"forward\", {\n          ...ctx,\n          currentStep: ctx.currentStep + 1,\n          index: 0\n        });\n      }\n      throw new Error(\n        \"Called next() on last possible plugin. Your chain is missing a plugin that calls resolve().\"\n      );\n    }\n    if (direction === \"error\") {\n      if (!ctx.promise.resolved) {\n        ctx.promise.reject(value);\n        ctx.promise.resolved = true;\n      }\n      return;\n    }\n    if (ctx.currentStep > 0) {\n      return this.#step(\n        \"backwards\",\n        {\n          ...ctx,\n          currentStep: ctx.currentStep - 1,\n          index: this.#plugins.length - 1\n        },\n        value\n      );\n    }\n    if (!ctx.silenceEcho || value.data !== this.state.data) {\n      this.set(value);\n    }\n    if (!ctx.promise.resolved) {\n      ctx.promise.resolve(value);\n      ctx.promise.resolved = true;\n    }\n    this.#lastContext = ctx.context.draft();\n    this.#lastVariables = this.#lastContext.stuff.inputs.marshaled;\n  }\n}\nclass ClientPluginContextWrapper {\n  #context;\n  #lastVariables;\n  constructor({\n    lastVariables,\n    ...values\n  }) {\n    this.#context = values;\n    this.#lastVariables = lastVariables;\n  }\n  get variables() {\n    return this.#context.variables;\n  }\n  draft() {\n    const ctx = {\n      ...this.#context\n    };\n    const applyVariables = this.applyVariables.bind(this);\n    return {\n      ...ctx,\n      get stuff() {\n        return ctx.stuff;\n      },\n      set stuff(val) {\n        ctx.stuff = val;\n      },\n      get variables() {\n        return ctx.variables ?? null;\n      },\n      set variables(val) {\n        Object.assign(ctx, applyVariables(ctx, { variables: val }));\n      }\n    };\n  }\n  applyVariables(source, values) {\n    const artifact2 = source.artifact;\n    const ctx = {\n      ...source,\n      ...values\n    };\n    const val = values.variables;\n    let changed = {};\n    for (const [name, value] of Object.entries(val ?? {})) {\n      if (value !== source.variables?.[name]) {\n        changed[name] = value;\n      }\n    }\n    ctx.stuff = {\n      ...ctx.stuff,\n      inputs: {\n        ...ctx.stuff.inputs\n      }\n    };\n    const firstInit = !ctx.stuff.inputs || !ctx.stuff.inputs.init;\n    const hasChanged = Object.keys(changed).length > 0 || firstInit;\n    if (hasChanged) {\n      const newVariables = {\n        ...ctx.stuff.inputs?.marshaled,\n        ...marshalInputs({\n          artifact: artifact2,\n          input: changed,\n          config: source.config\n        })\n      };\n      ctx.stuff.inputs = {\n        init: true,\n        marshaled: newVariables,\n        changed: true\n      };\n      ctx.variables = val;\n    }\n    ctx.stuff = {\n      ...ctx.stuff,\n      inputs: {\n        ...ctx.stuff.inputs,\n        changed: !deepEquals(ctx.stuff.inputs.marshaled, this.#lastVariables)\n      }\n    };\n    return ctx;\n  }\n  apply(values, newVariables) {\n    if (newVariables) {\n      values = this.applyVariables(this.#context, values);\n    }\n    const wrapper = new ClientPluginContextWrapper({\n      ...values,\n      lastVariables: this.#lastVariables\n    });\n    return wrapper;\n  }\n}\nfunction marshalVariables(ctx) {\n  return ctx.stuff.inputs?.marshaled ?? {};\n}\nfunction variablesChanged(ctx) {\n  return ctx.stuff.inputs?.changed;\n}\nfunction stableStringify(obj) {\n  return JSON.stringify(sortObject(obj));\n}\nfunction sortObject(obj) {\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(sortObject);\n  }\n  return Object.keys(obj).sort().reduce((result, key) => {\n    result[key] = sortObject(obj[key]);\n    return result;\n  }, {});\n}\nclass BaseStore {\n  #params;\n  get artifact() {\n    return this.#params.artifact;\n  }\n  get name() {\n    return this.artifact.name;\n  }\n  #store;\n  #unsubscribe = null;\n  constructor(params) {\n    if (typeof params.initialize === \"undefined\") {\n      params.initialize = true;\n    }\n    this.#store = new DocumentStore({\n      artifact: params.artifact,\n      client: null,\n      fetching: params.fetching,\n      initialValue: params.initialValue\n    });\n    this.#params = params;\n  }\n  #observer = null;\n  get observer() {\n    if (this.#observer) {\n      return this.#observer;\n    }\n    this.#observer = getClient().observe(this.#params);\n    return this.#observer;\n  }\n  subscribe(...args) {\n    const bubbleUp = this.#store.subscribe(...args);\n    this.#subscriberCount = (this.#subscriberCount ?? 0) + 1;\n    return () => {\n      this.#subscriberCount--;\n      if (this.#subscriberCount <= 0) {\n        this.#unsubscribe?.();\n        this.#unsubscribe = null;\n        bubbleUp();\n      }\n    };\n  }\n  #subscriberCount = 0;\n  setup(init = true) {\n    let initPromise = Promise.resolve();\n    try {\n      getClient();\n    } catch {\n      initPromise = initClient();\n    }\n    initPromise.then(() => {\n      if (this.#unsubscribe) {\n        return;\n      }\n      this.#unsubscribe = this.observer.subscribe((value) => {\n        this.#store.set(value);\n      });\n      if (init && this.#params.initialize) {\n        return this.observer.send({\n          setup: true,\n          variables: get(this.observer).variables\n        });\n      }\n    });\n  }\n}\nclass QueryStore extends BaseStore {\n  variables;\n  kind = CompiledQueryKind;\n  loadPending = false;\n  storeName;\n  constructor({ artifact: artifact2, storeName, variables }) {\n    const fetching = artifact2.pluginData[\"houdini-svelte\"]?.isManualLoad !== true;\n    super({\n      artifact: artifact2,\n      fetching,\n      initialize: !artifact2.pluginData[\"houdini-svelte\"].isManualLoad\n    });\n    this.storeName = storeName;\n    this.variables = variables;\n  }\n  async fetch(args) {\n    const client2 = await initClient();\n    this.setup(false);\n    const { policy, params, context } = await fetchParams(this.artifact, this.storeName, args);\n    if (!(params && \"fetch\" in params) && (!params || !(\"event\" in params))) {\n      error(contextError(this.storeName));\n      throw new Error(\"Error, check above logs for help.\");\n    }\n    const isLoadFetch = Boolean(\"event\" in params && params.event);\n    const isComponentFetch = !isLoadFetch;\n    if (this.loadPending && isComponentFetch) {\n      error(`\u26A0\uFE0F Encountered fetch from your component while ${this.storeName}.load was running.\nThis will result in duplicate queries. If you are trying to ensure there is always a good value, please a CachePolicy instead.`);\n      return get(this.observer);\n    }\n    if (isComponentFetch) {\n      params.blocking = true;\n    }\n    const config2 = getCurrentConfig();\n    const config_svelte = config2.plugins[\"houdini-svelte\"];\n    const pluginArtifact = this.artifact.pluginData[\"houdini-svelte\"];\n    if (client2.throwOnError_operations.includes(\"all\") || client2.throwOnError_operations.includes(\"query\")) {\n      if (config_svelte.defaultRouteBlocking === false) {\n        info(\n          '[Houdini] \u26A0\uFE0F throwOnError with operation \"all\" or \"query\", is not compatible with defaultRouteBlocking set to \"false\"'\n        );\n      }\n    }\n    if (config_svelte.defaultRouteBlocking === true) ;\n    if (client2.throwOnError_operations.includes(\"all\") || client2.throwOnError_operations.includes(\"query\")) ;\n    if (pluginArtifact?.set_blocking === true) ;\n    else if (pluginArtifact?.set_blocking === false) ;\n    if (params?.blocking === true) ;\n    else if (params?.blocking === false) ;\n    if (isLoadFetch) {\n      this.loadPending = true;\n    }\n    const usedVariables = {\n      ...this.artifact.input?.defaults,\n      ...params.variables\n    };\n    const request = this.observer.send({\n      fetch: context.fetch,\n      variables: usedVariables,\n      metadata: params.metadata,\n      session: context.session,\n      policy,\n      stuff: {}\n    });\n    request.then((val) => {\n      this.loadPending = false;\n      params.then?.(val.data);\n    }).catch(() => {\n    });\n    {\n      await request;\n    }\n    return get(this.observer);\n  }\n}\nasync function fetchParams(artifact2, storeName, params) {\n  let policy = params?.policy;\n  if (!policy && artifact2.kind === ArtifactKind.Query) {\n    policy = artifact2.policy ?? CachePolicy.CacheOrNetwork;\n  }\n  let fetchFn = null;\n  if (params) {\n    if (\"fetch\" in params && params.fetch) {\n      fetchFn = params.fetch;\n    } else if (\"event\" in params && params.event && \"fetch\" in params.event) {\n      fetchFn = params.event.fetch;\n    }\n  }\n  if (!fetchFn) {\n    fetchFn = globalThis.fetch.bind(globalThis);\n  }\n  let session = void 0;\n  if (params && \"event\" in params && params.event) {\n    session = await getSession(params.event);\n  } else {\n    error(contextError(storeName));\n    throw new Error(\"Error, check above logs for help.\");\n  }\n  return {\n    context: {\n      fetch: fetchFn,\n      metadata: params?.metadata ?? {},\n      session\n    },\n    policy,\n    params: params ?? {}\n  };\n}\nconst contextError = (storeName) => `\n\t${red(`Missing event args in load function`)}.\n\nPlease remember to pass event to fetch like so:\n\nimport type { LoadEvent } from '@sveltejs/kit';\n\n// in a load function...\nexport async function load(${yellow(\"event\")}: LoadEvent) {\n\treturn {\n\t\t...load_${storeName}({ ${yellow(\"event\")}, variables: { ... } })\n\t};\n}\n\n// in a server-side mutation:\nawait mutation.mutate({ ... }, ${yellow(\"{ event }\")})\n`;\nconst artifact = {\n  \"name\": \"KVDemoPage\",\n  \"kind\": \"HoudiniQuery\",\n  \"hash\": \"d9541db8d01883c9ff02723ae2fbb68f9964d9704fbbcbeec428ff661f1649e1\",\n  \"raw\": `query KVDemoPage {\n  KVNames\n}\n`,\n  \"rootType\": \"Query\",\n  \"stripVariables\": [],\n  \"selection\": {\n    \"fields\": {\n      \"KVNames\": {\n        \"type\": \"String\",\n        \"keyRaw\": \"KVNames\",\n        \"visible\": true\n      }\n    }\n  },\n  \"pluginData\": {\n    \"houdini-svelte\": {}\n  },\n  \"policy\": \"CacheOrNetwork\",\n  \"partial\": false\n};\nclass KVDemoPageStore extends QueryStore {\n  constructor() {\n    super({\n      artifact,\n      storeName: \"KVDemoPageStore\",\n      variables: false\n    });\n  }\n}\nasync function load_KVDemoPage(params) {\n  await initClient();\n  const store = new KVDemoPageStore();\n  await store.fetch(params);\n  return {\n    KVDemoPage: store\n  };\n}\nasync function load(context) {\n  const houdini_context = new RequestContext(context);\n  getCurrentConfig();\n  const promises = [];\n  const inputs = {};\n  inputs[\"KVDemoPage\"] = {};\n  promises.push(load_KVDemoPage({\n    \"variables\": inputs[\"KVDemoPage\"],\n    \"event\": context,\n    \"blocking\": void 0\n  }));\n  let result = {};\n  try {\n    result = Object.assign({}, ...await Promise.all(promises));\n  } catch (err) {\n    throw err;\n  }\n  return {\n    ...houdini_context.returnValue,\n    ...result\n  };\n}\nexport {\n  ArtifactKind as A,\n  DataSource as D,\n  config as a,\n  getCurrentConfig as b,\n  computeID as c,\n  deepEquals as d,\n  cache_default as e,\n  flatten as f,\n  getFieldsForType as g,\n  DocumentStore as h,\n  load as i,\n  keyFieldsForType as k,\n  localApiEndpoint as l,\n  marshalSelection as m\n};\n", "import { i } from \"../../../chunks/_page.js\";\nimport \"../../../chunks/session.js\";\nexport {\n  i as load\n};\n", "import { s as store_get, e as ensure_array_like, u as unsubscribe_stores } from \"../../../chunks/index.js\";\nimport { e as escape_html } from \"../../../chunks/escaping.js\";\nfunction _page($$payload, $$props) {\n  var $$store_subs;\n  const { data } = $$props;\n  const { KVDemoPage } = data;\n  const page = store_get($$store_subs ??= {}, \"$KVDemoPage\", KVDemoPage);\n  const names = page.data?.KVNames ?? [];\n  const each_array = ensure_array_like(names);\n  $$payload.out += `<h1>Cloudflare KV Demo</h1> <br> <ul><!--[-->`;\n  for (let $$index = 0, $$length = each_array.length; $$index < $$length; $$index++) {\n    let name = each_array[$$index];\n    $$payload.out += `<li>${escape_html(name)}</li>`;\n  }\n  $$payload.out += `<!--]--></ul>`;\n  if ($$store_subs) unsubscribe_stores($$store_subs);\n}\nexport {\n  _page as default\n};\n", "import * as universal from '../entries/pages/kv-storage/_page.js';\n\nexport const index = 3;\nlet component_cache;\nexport const component = async () => component_cache ??= (await import('../entries/pages/kv-storage/_page.svelte.js')).default;\nexport { universal };\nexport const universal_id = \"src/routes/kv-storage/+page.js\";\nexport const imports = [\"_app/immutable/nodes/3.BTl82j1_.js\",\"_app/immutable/chunks/BnoH9lR6.js\",\"_app/immutable/chunks/1yBzCswO.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/Cul8aYZn.js\",\"_app/immutable/chunks/CYgJF_JY.js\",\"_app/immutable/chunks/Ds6A-agx.js\",\"_app/immutable/chunks/DKPK2Ygc.js\",\"_app/immutable/chunks/B0QV6bzL.js\"];\nexport const stylesheets = [];\nexport const fonts = [];\n", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = Object.getPrototypeOf(value).constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\tidentity: undefined | 'always' | 'byDefault';\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly keyAsName: boolean;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.keyAsName = config.keyAsName;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SingleStoreColumn } from './singlestore-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Assume, Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'singlestore' | 'common';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tidentity: T extends { identity: 'always' } ? 'always' : T extends { identity: 'byDefault' } ? 'byDefault' : undefined;\n\tgenerated: T extends { generated: infer G } ? unknown extends G ? undefined\n\t\t: G extends undefined ? undefined\n\t\t: G\n\t\t: undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tidentity: T extends { identity: infer U } ? U : unknown;\n\t\tgenerated: T extends { generated: infer G } ? G extends undefined ? unknown : G : unknown;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tkeyAsName: boolean;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentity<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tidentity: TType;\n\t};\n};\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tkeyAsName: name === '',\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this, {\n\t\ttype: 'always';\n\t}>;\n\n\t/** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n\tsetName(name: string) {\n\t\tif (this.config.name !== '') return;\n\t\tthis.config.name = name;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<\n\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t{},\n\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t>\n\t: TDialect extends 'mysql' ? MySqlColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'mysqlColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'common' ? Column<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'singlestore' ? SingleStoreColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'singlestoreColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn : never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, {\n\t\t\t_:\n\t\t\t\t& Omit<TConfigMap[Key]['_'], 'name'>\n\t\t\t\t& { name: TConfigMap[Key]['_']['name'] extends '' ? Assume<Key, string> : TConfigMap[Key]['_']['name'] };\n\t\t}, TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'singlestore' ? SingleStoreColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Simplify, Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic override readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray<TSize extends number | undefined = undefined>(size?: TSize): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tsize: TSize;\n\t\t\tbaseBuilder: T;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size as any);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as HasGenerated<this, {\n\t\t\ttype: 'always';\n\t\t}>;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic override readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic override readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\tkeyAsName: boolean,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.keyAsName = keyAsName;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\tkeyAsName: boolean;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type PgArrayColumnBuilderBaseConfig = ColumnBuilderBaseConfig<'array', 'PgArray'> & {\n\tsize: number | undefined;\n\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n};\n\nexport class PgArrayBuilder<\n\tT extends PgArrayColumnBuilderBaseConfig,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string> | PgArrayColumnBuilderBaseConfig,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t},\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: T['size'],\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'> & {\n\t\tsize: number | undefined;\n\t\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n\t},\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, {}, { size: T['size']; baseBuilder: T['baseBuilder'] }> {\n\treadonly size: T['size'];\n\n\tstatic override readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t(): PgEnumColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Gratitude to zod for the enum function types\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>> {\n\treturn pgEnumWithSchema(enumName, values, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic override readonly [entityKind]: string = 'WithSubquery';\n}\n\nexport type WithSubqueryWithoutSelection<TAlias extends string> = WithSubquery<TAlias, {}>;\n", "// package.json\nvar version = \"0.39.3\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { ExtraConfigColumn } from './pg-core/index.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport { TableName } from './table.utils.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, ExtraConfigColumn>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown> | unknown[]) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key],\n\t\t\t\t\t\tTConfig['override']\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'> | undefined;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n", "import type { CasingCache } from '~/casing.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport type { SelectResult } from '~/query-builders/select.types.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { IsAlias, Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tcasing: CasingCache;\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tcasing,\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[IsAlias]\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tconst columnName = casing.getColumnCasing(chunk);\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(columnName), params: [] };\n\t\t\t\t}\n\n\t\t\t\tconst schemaName = chunk.table[Table.Symbol.Schema];\n\t\t\t\treturn {\n\t\t\t\t\tsql: chunk.table[IsAlias] || schemaName === undefined\n\t\t\t\t\t\t? escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(columnName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(chunk.table[Table.Symbol.Name]) + '.'\n\t\t\t\t\t\t\t+ escapeName(columnName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[ViewBaseConfig].isAlias\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nconst IsDrizzleView = Symbol.for('drizzle:IsDrizzleView');\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: ColumnsSelection;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\t/** @internal */\n\t[IsDrizzleView] = true;\n\n\tdeclare readonly $inferSelect: InferSelectViewModel<View<Assume<TName, string>, TExisting, TSelection>>;\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport function isView(view: unknown): view is View {\n\treturn typeof view === 'object' && view !== null && IsDrizzleView in view;\n}\n\nexport function getViewName<T extends View>(view: T): T['_']['name'] {\n\treturn view[ViewBaseConfig].name;\n}\n\nexport type InferSelectViewModel<TView extends View> =\n\tEqual<TView['_']['selectedFields'], { [x: string]: unknown }> extends true ? { [x: string]: unknown }\n\t\t: SelectResult<\n\t\t\tTView['_']['selectedFields'],\n\t\t\t'single',\n\t\t\tRecord<TView['_']['name'], 'not-null'>\n\t\t>;\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table | View>(\n\ttable: T,\n\ttableAlias: string,\n): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false)) as any;\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n", "import { TableAliasProxyHandler } from '~/alias.ts';\nimport type { BuildAliasTable } from './query-builders/select.types.ts';\n\nimport type { SQLiteTable } from './table.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport function alias<TTable extends SQLiteTable | SQLiteViewBase, TAlias extends string>(\n\ttable: TTable,\n\talias: TAlias,\n): BuildAliasTable<TTable, TAlias> {\n\treturn new Proxy(table, new TableAliasProxyHandler(alias, false)) as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteCheckBuilder';\n\n\tprotected brand!: 'SQLiteConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\tbuild(table: SQLiteTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'SQLiteCheck';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteCheck';\n\t};\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: SQLiteTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL) || is(value, Column)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | AnyColumn | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\nexport function getViewSelectedFields<T extends View>(view: T): T['_']['selectedFields'] {\n\treturn view[ViewBaseConfig].selectedFields;\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport type Casing = 'snake_case' | 'camelCase';\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n\tcasing?: Casing;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n\n/** @internal */\nexport function getColumnNameAndConfig<\n\tTConfig extends Record<string, any> | undefined,\n>(a: string | TConfig | undefined, b: TConfig | undefined) {\n\treturn {\n\t\tname: typeof a === 'string' && a.length > 0 ? a : '' as string,\n\t\tconfig: typeof a === 'object' ? a : b as TConfig,\n\t};\n}\n\nexport type IfNotImported<T, Y, N> = unknown extends T ? Y : N;\n\nexport type ImportTypeError<TPackageName extends string> =\n\t`Please install \\`${TPackageName}\\` to allow Drizzle ORM to connect to the database`;\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Keys extends any\n\t? Required<Pick<T, Keys>> & Partial<Omit<T, Keys>>\n\t: never;\n\ntype ExpectedConfigShape = {\n\tlogger?: boolean | {\n\t\tlogQuery(query: string, params: unknown[]): void;\n\t};\n\tschema?: Record<string, never>;\n\tcasing?: 'snake_case' | 'camelCase';\n};\n\n// If this errors, you must update config shape checker function with new config specs\nconst _: DrizzleConfig = {} as ExpectedConfigShape;\nconst __: ExpectedConfigShape = {} as DrizzleConfig;\n\nexport function isConfig(data: any): boolean {\n\tif (typeof data !== 'object' || data === null) return false;\n\n\tif (data.constructor.name !== 'Object') return false;\n\n\tif ('logger' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (\n\t\t\ttype !== 'boolean' && (type !== 'object' || typeof data['logger']['logQuery'] !== 'function')\n\t\t\t&& type !== 'undefined'\n\t\t) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('schema' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('casing' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'string' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('mode' in data) {\n\t\tif (data['mode'] !== 'default' || data['mode'] !== 'planetscale' || data['mode'] !== undefined) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('connection' in data) {\n\t\tconst type = typeof data['connection'];\n\t\tif (type !== 'string' && type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('client' in data) {\n\t\tconst type = typeof data['client'];\n\t\tif (type !== 'object' && type !== 'function' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif (Object.keys(data).length === 0) return true;\n\n\treturn false;\n}\n\nexport type NeonAuthToken = string | (() => string | Promise<string>);\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): bigint {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn BigInt(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn BigInt(decoder.decode(value));\n\t\t}\n\n\t\treturn BigInt(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): T['data'] {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn JSON.parse(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn JSON.parse(decoder.decode(value));\n\t\t}\n\n\t\treturn JSON.parse(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob(): SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TMode extends BlobMode = BlobMode>(\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<''>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<''>\n\t: SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(a?: string | BlobConfig, b?: BlobConfig) {\n\tconst { name, config } = getColumnNameAndConfig<BlobConfig | undefined>(a, b);\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tname as ConvertCustomConfig<TName, T>['name'],\n\t\t\tconfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport { type Equal, getColumnNameAndConfig, type Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer(): SQLiteIntegerBuilderInitial<''>;\nexport function integer<TMode extends IntegerConfig['mode']>(\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<''>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<''>\n\t: SQLiteIntegerBuilderInitial<''>;\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(a?: string | IntegerConfig, b?: IntegerConfig) {\n\tconst { name, config } = getColumnNameAndConfig<IntegerConfig | undefined>(a, b);\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumeric';\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport function numeric(): SQLiteNumericBuilderInitial<''>;\nexport function numeric<TName extends string>(name: TName): SQLiteNumericBuilderInitial<TName>;\nexport function numeric(name?: string) {\n\treturn new SQLiteNumericBuilder(name ?? '');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real(): SQLiteRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new SQLiteRealBuilder(name ?? '');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tlength: TLength;\n}>;\n\nexport class SQLiteTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined },\n> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: T['length']; enumValues: T['enumValues'] },\n\t{ length: T['length'] }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined }>\n\textends SQLiteColumn<T, { length: T['length']; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: T['length'] = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: TLength;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text(): SQLiteTextBuilderInitial<'', [string, ...string[]], undefined>;\nexport function text<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<''>\n\t: SQLiteTextBuilderInitial<'', Writable<T>, L>;\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>, L>;\nexport function text(a?: string | SQLiteTextConfig, b: SQLiteTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteTextConfig>(a, b);\n\tif (config.mode === 'json') {\n\t\treturn new SQLiteTextJsonBuilder(name);\n\t}\n\treturn new SQLiteTextBuilder(name, config as any);\n}\n", "export * from './blob.ts';\nexport * from './common.ts';\nexport * from './custom.ts';\nexport * from './integer.ts';\nexport * from './numeric.ts';\nexport * from './real.ts';\nexport * from './text.ts';\n", "import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n", "import { blob } from './blob.ts';\nimport { customType } from './custom.ts';\nimport { integer } from './integer.ts';\nimport { numeric } from './numeric.ts';\nimport { real } from './real.ts';\nimport { text } from './text.ts';\n\nexport function getSQLiteColumnBuilders() {\n\treturn {\n\t\tblob,\n\t\tcustomType,\n\t\tinteger,\n\t\tnumeric,\n\t\treal,\n\t\ttext,\n\t};\n}\n\nexport type SQLiteColumnBuilders = ReturnType<typeof getSQLiteColumnBuilders>;\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getSQLiteColumnBuilders, type SQLiteColumnBuilders } from './columns/all.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfigValue =\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder;\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\tSQLiteTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: SQLiteColumnBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfig | SQLiteTableExtraConfigValue[])\n\t\t| undefined,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getSQLiteColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields, type ValueOrArray } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteDeleteWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import type { Column } from '~/column.ts';\nimport { entityKind } from './entity.ts';\nimport { Table } from './table.ts';\nimport type { Casing } from './utils.ts';\n\nexport function toSnakeCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.map((word) => word.toLowerCase()).join('_');\n}\n\nexport function toCamelCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.reduce((acc, word, i) => {\n\t\tconst formattedWord = i === 0 ? word.toLowerCase() : `${word[0]!.toUpperCase()}${word.slice(1)}`;\n\t\treturn acc + formattedWord;\n\t}, '');\n}\n\nfunction noopCase(input: string) {\n\treturn input;\n}\n\nexport class CasingCache {\n\tstatic readonly [entityKind]: string = 'CasingCache';\n\n\t/** @internal */\n\tcache: Record<string, string> = {};\n\tprivate cachedTables: Record<string, true> = {};\n\tprivate convert: (input: string) => string;\n\n\tconstructor(casing?: Casing) {\n\t\tthis.convert = casing === 'snake_case'\n\t\t\t? toSnakeCase\n\t\t\t: casing === 'camelCase'\n\t\t\t? toCamelCase\n\t\t\t: noopCase;\n\t}\n\n\tgetColumnCasing(column: Column): string {\n\t\tif (!column.keyAsName) return column.name;\n\n\t\tconst schema = column.table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = column.table[Table.Symbol.OriginalName];\n\t\tconst key = `${schema}.${tableName}.${column.name}`;\n\n\t\tif (!this.cache[key]) {\n\t\t\tthis.cacheTable(column.table);\n\t\t}\n\t\treturn this.cache[key]!;\n\t}\n\n\tprivate cacheTable(table: Table) {\n\t\tconst schema = table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = table[Table.Symbol.OriginalName];\n\t\tconst tableKey = `${schema}.${tableName}`;\n\n\t\tif (!this.cachedTables[tableKey]) {\n\t\t\tfor (const column of Object.values(table[Table.Symbol.Columns])) {\n\t\t\t\tconst columnKey = `${tableKey}.${column.name}`;\n\t\t\t\tthis.cache[columnKey] = this.convert(column.name);\n\t\t\t}\n\t\t\tthis.cachedTables[tableKey] = true;\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.cache = {};\n\t\tthis.cachedTables = {};\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic override readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getPgColumnBuilders, type PgColumnsBuilders } from './columns/all.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PgPolicy } from './policies.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfigValue =\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n\t| PgPolicy;\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\tPgTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n/** @internal */\nexport const EnableRLS = Symbol.for('drizzle:EnableRLS');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t\tEnableRLS: EnableRLS as typeof EnableRLS,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\t[EnableRLS]: boolean = false;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t}\n\t& {\n\t\tenableRLS: () => Omit<\n\t\t\tPgTableWithColumns<T>,\n\t\t\t'enableRLS'\n\t\t>;\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: PgColumnsBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig | PgTableExtraConfigValue[])\n\t\t| undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getPgColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn Object.assign(table, {\n\t\tenableRLS: () => {\n\t\t\ttable[PgTable.Symbol.EnableRLS] = true;\n\t\t\treturn table as PgTableWithColumns<{\n\t\t\t\tname: TTableName;\n\t\t\t\tschema: TSchemaName;\n\t\t\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\t\t\tdialect: 'pg';\n\t\t\t}>;\n\t\t},\n\t});\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n", "import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n", "export * from './conditions.ts';\nexport * from './select.ts';\n", "import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t\t}\n\t\t\t| undefined;\n\t\twith?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t\t| true\n\t\t\t\t\t| DBQueryConfig<\n\t\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t\t>\n\t\t\t\t\t>\n\t\t\t\t\t| undefined;\n\t\t\t}\n\t\t\t| undefined;\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>)\n\t\t\t| undefined;\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>)\n\t\t\t\t\t| undefined;\n\t\t\t\tlimit?: number | Placeholder | undefined;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder | undefined;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n", "import { type AnyColumn, Column } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\n/**\n * Returns the number of values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number employees with null values\n * db.select({ value: count() }).from(employees)\n * // Number of employees where `name` is not null\n * db.select({ value: count(employees.name) }).from(employees)\n * ```\n *\n * @see countDistinct to get the number of non-duplicate values in `expression`\n */\nexport function count(expression?: SQLWrapper): SQL<number> {\n\treturn sql`count(${expression || sql.raw('*')})`.mapWith(Number);\n}\n\n/**\n * Returns the number of non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number of employees where `name` is distinct\n * db.select({ value: countDistinct(employees.name) }).from(employees)\n * ```\n *\n * @see count to get the number of values in `expression`, including duplicates\n */\nexport function countDistinct(expression: SQLWrapper): SQL<number> {\n\treturn sql`count(distinct ${expression})`.mapWith(Number);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee\n * db.select({ value: avg(employees.salary) }).from(employees)\n * ```\n *\n * @see avgDistinct to get the average of all non-null and non-duplicate values in `expression`\n */\nexport function avg(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee where `salary` is distinct\n * db.select({ value: avgDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see avg to get the average of all non-null values in `expression`, including duplicates\n */\nexport function avgDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary\n * db.select({ value: sum(employees.salary) }).from(employees)\n * ```\n *\n * @see sumDistinct to get the sum of all non-null and non-duplicate values in `expression`\n */\nexport function sum(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary where `salary` is distinct (no duplicates)\n * db.select({ value: sumDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see sum to get the sum of all non-null values in `expression`, including duplicates\n */\nexport function sumDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the maximum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the highest salary\n * db.select({ value: max(employees.salary) }).from(employees)\n * ```\n */\nexport function max<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`max(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n\n/**\n * Returns the minimum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the lowest salary\n * db.select({ value: min(employees.salary) }).from(employees)\n * ```\n */\nexport function min<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`min(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n", "import type { AnyColumn } from '~/column.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\nfunction toSql(value: number[] | string[]): string {\n\treturn JSON.stringify(value);\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the L2 distance to the given value.\n * If used in querying, this specifies that it should return the L2 distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l2Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l2Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l2Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <-> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <-> ${value}`;\n}\n\n/**\n * L1 distance is one of the possible distance measures between two probability distribution vectors and it is\n * calculated as the sum of the absolute differences.\n * The smaller the distance between the observed probability vectors, the higher the accuracy of the synthetic data\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l1Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l1Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l1Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <+> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <+> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the inner product distance to the given value.\n * If used in querying, this specifies that it should return the inner product distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(innerProduct(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({ distance: innerProduct(cars.embedding, embedding) }).from(cars)\n * ```\n */\nexport function innerProduct(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <#> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <#> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the cosine distance to the given value.\n * If used in querying, this specifies that it should return the cosine distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(cosineDistance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: cosineDistance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function cosineDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <=> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <=> ${value}`;\n}\n\n/**\n * Hamming distance between two strings or vectors of equal length is the number of positions at which the\n * corresponding symbols are different. In other words, it measures the minimum number of\n * substitutions required to change one string into the other, or equivalently,\n * the minimum number of errors that could have transformed one string into the other\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(hammingDistance(cars.embedding, embedding));\n * ```\n */\nexport function hammingDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <~> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <~> ${value}`;\n}\n\n/**\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(jaccardDistance(cars.embedding, embedding));\n * ```\n */\nexport function jaccardDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <%> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <%> ${value}`;\n}\n", "export * from './aggregate.ts';\nexport * from './vector.ts';\n", "export * from './expressions/index.ts';\nexport * from './functions/index.ts';\nexport * from './sql.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name, Placeholder } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type {\n\tAnySQLiteSelectQueryBuilder,\n\tSQLiteDeleteConfig,\n\tSQLiteInsertConfig,\n\tSQLiteUpdateConfig,\n} from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface SQLiteDialectConfig {\n\tcasing?: Casing;\n}\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: SQLiteDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList, limit, orderBy }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: SQLiteSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildLimit(limit: number | Placeholder | undefined): SQL | undefined {\n\t\treturn typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\t}\n\n\tprivate buildOrderBy(orderBy: (SQLiteColumn | SQL | SQL.Aliased)[] | undefined): SQL | undefined {\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined,\n\t): SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select }: SQLiteInsertConfig,\n\t): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnySQLiteSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\tlet defaultValue;\n\t\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict?.length\n\t\t\t? sql.join(onConflict)\n\t\t\t: undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn)\n\t\t\t\t\t\t\t? sql.identifier(this.casing.getColumnCasing(field))\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectJoinFn,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport type { SQLiteDialectConfig } from '~/sqlite-core/dialect.ts';\nimport { SQLiteDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithBuilder } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteDialect | undefined;\n\tprivate dialectConfig: SQLiteDialectConfig | undefined;\n\n\tconstructor(dialect?: SQLiteDialect | SQLiteDialectConfig) {\n\t\tthis.dialect = is(dialect, SQLiteDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, SQLiteDialect) ? undefined : dialect;\n\t}\n\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst queryBuilder = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(queryBuilder);\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t) as any;\n\t\t};\n\t\treturn { as };\n\t};\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Columns, Table } from '~/table.ts';\nimport { type DrizzleTypeError, haveSameKeys, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | SQLiteInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL[];\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport type SQLiteInsertSelectQueryBuilder<TTable extends SQLiteTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnySQLiteColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n\n\tselect(\n\t\tselectQuery: (qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable>,\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQLiteInsertSelectQueryBuilder<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| SQLiteInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable> | SQL),\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict.push(sql` on conflict do nothing`);\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict.push(\n\t\t\tsql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "//# sourceMappingURL=select.types.js.map", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { JoinType, SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\ttype DrizzleTypeError,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\torderSelectedFields,\n\ttype UpdateSet,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type { SelectedFields, SelectedFieldsOrdered, SQLiteSelectJoinConfig } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\tfrom?: SQLiteTable | Subquery | SQLiteViewBase | SQL;\n\tjoins: SQLiteSelectJoinConfig[];\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL\n\t\t\t| SQLiteColumn\n\t\t\t| undefined;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(\n\t\tvalues: SQLiteUpdateSetSource<TTable>,\n\t): SQLiteUpdateWithout<\n\t\tSQLiteUpdateBase<TTable, TResultType, TRunResult>,\n\t\tfalse,\n\t\t'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'\n\t> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t) as any;\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateWithJoins<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tTFrom,\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateJoinFn<\n\tT extends AnySQLiteUpdate,\n> = <\n\tTJoinedTable extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n>(\n\ttable: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends SQLiteTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | SQLiteViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => T;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TFrom, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly from: TFrom;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): SQLiteUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tthis.config.from = source;\n\t\treturn this as any;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteUpdateJoinFn<this> {\n\t\treturn ((\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from\n\t\t\t\t\t? is(table, SQLiteTable)\n\t\t\t\t\t\t? table[Table.Symbol.Columns]\n\t\t\t\t\t\t: is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: undefined\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteUpdateWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "export * from './delete.ts';\nexport * from './insert.ts';\nexport * from './query-builder.ts';\nexport * from './select.ts';\nexport * from './select.types.ts';\nexport * from './update.ts';\n", "import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\nimport type { SQLiteView } from '../view.ts';\n\nexport class SQLiteCountBuilder<\n\tTSession extends SQLiteSession<any, any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\n\tstatic override readonly [entityKind] = 'SQLiteCountBuilderAsync';\n\t[Symbol.toStringTag] = 'SQLiteCountBuilderAsync';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters}`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = SQLiteCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql)).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => never | PromiseLike<never>) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { SQLiteCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithBuilder } from './subquery.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst self = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t);\n\t\t};\n\t\treturn { as };\n\t};\n\n\t$count(\n\t\tsource: SQLiteTable | SQLiteViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new SQLiteCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper | string): DBResult<TResultKind, TRunResult> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sequel) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sequel) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $count: Q['$count'] = (...args: [any]) => getReplica(replicas).$count(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\t$count,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport interface IndexConfig {\n\tname: string;\n\tcolumns: IndexColumn[];\n\tunique: boolean;\n\twhere: SQL | undefined;\n}\n\nexport type IndexColumn = SQLiteColumn | SQL;\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilderOn';\n\n\tconstructor(private name: string, private unique: boolean) {}\n\n\ton(...columns: [IndexColumn, ...IndexColumn[]]): IndexBuilder {\n\t\treturn new IndexBuilder(this.name, columns, this.unique);\n\t}\n}\n\nexport class IndexBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndexBuilder';\n\t};\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(name: string, columns: IndexColumn[], unique: boolean) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t\twhere: undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Condition for partial index.\n\t */\n\twhere(condition: SQL): this {\n\t\tthis.config.where = condition;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'SQLiteIndex';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndex';\n\t};\n\n\treadonly config: IndexConfig & { table: SQLiteTable };\n\n\tconstructor(config: IndexConfig, table: SQLiteTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport function index(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, false);\n}\n\nexport function uniqueIndex(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, true);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnySQLiteColumn<{ tableName: TTableName }>,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLitePrimaryKeyBuilder';\n\t};\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKey';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[SQLiteTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { DrizzleError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\n// import { QueryPromise } from '../index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport { BaseSQLiteDatabase } from './db.ts';\nimport type { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\ttype: 'sync' | 'async';\n\trun: unknown;\n\tall: unknown;\n\tget: unknown;\n\tvalues: unknown;\n\texecute: unknown;\n}\n\nexport class ExecuteResultSync<T> extends QueryPromise<T> {\n\tstatic override readonly [entityKind]: string = 'ExecuteResultSync';\n\n\tconstructor(private resultCb: () => T) {\n\t\tsuper();\n\t}\n\n\toverride async execute(): Promise<T> {\n\t\treturn this.resultCb();\n\t}\n\n\tsync(): T {\n\t\treturn this.resultCb();\n\t}\n}\n\nexport type ExecuteResult<TType extends 'sync' | 'async', TResult> = TType extends 'async' ? Promise<TResult>\n\t: ExecuteResultSync<TResult>;\n\nexport abstract class SQLitePreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tstatic readonly [entityKind]: string = 'PreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tconstructor(\n\t\tprivate mode: 'sync' | 'async',\n\t\tprivate executeMethod: SQLiteExecuteMethod,\n\t\tprotected query: Query,\n\t) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tabstract run(placeholderValues?: Record<string, unknown>): Result<T['type'], T['run']>;\n\n\tmapRunResult(result: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn result;\n\t}\n\n\tabstract all(placeholderValues?: Record<string, unknown>): Result<T['type'], T['all']>;\n\n\tmapAllResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract get(placeholderValues?: Record<string, unknown>): Result<T['type'], T['get']>;\n\n\tmapGetResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract values(placeholderValues?: Record<string, unknown>): Result<T['type'], T['values']>;\n\n\texecute(placeholderValues?: Record<string, unknown>): ExecuteResult<T['type'], T['execute']> {\n\t\tif (this.mode === 'async') {\n\t\t\treturn this[this.executeMethod](placeholderValues) as ExecuteResult<T['type'], T['execute']>;\n\t\t}\n\t\treturn new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n\t}\n\n\tmapResult(response: unknown, isFromBatch?: boolean) {\n\t\tswitch (this.executeMethod) {\n\t\t\tcase 'run': {\n\t\t\t\treturn this.mapRunResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'all': {\n\t\t\t\treturn this.mapAllResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'get': {\n\t\t\t\treturn this.mapGetResult(response, isFromBatch);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface SQLiteTransactionConfig {\n\tbehavior?: 'deferred' | 'immediate' | 'exclusive';\n}\n\nexport type SQLiteExecuteMethod = 'run' | 'all' | 'get';\n\nexport abstract class SQLiteSession<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSession';\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t) {}\n\n\tabstract prepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }>;\n\n\tprepareOneTimeQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }> {\n\t\treturn this.prepareQuery(query, fields, executeMethod, isResponseInArrayMode);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T>;\n\n\trun(query: SQL): Result<TResultKind, TRunResult> {\n\t\tconst staticQuery = this.dialect.sqlToQuery(query);\n\t\ttry {\n\t\t\treturn this.prepareOneTimeQuery(staticQuery, undefined, 'run', false).run() as Result<TResultKind, TRunResult>;\n\t\t} catch (err) {\n\t\t\tthrow new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n\t\t}\n\t}\n\n\t/** @internal */\n\textractRawRunValueFromBatchResult(result: unknown) {\n\t\treturn result;\n\t}\n\n\tall<T = unknown>(query: SQL): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).all() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawAllValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tget<T = unknown>(query: SQL): Result<TResultKind, T> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).get() as Result<\n\t\t\tTResultKind,\n\t\t\tT\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawGetValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tvalues<T extends any[] = unknown[]>(\n\t\tquery: SQL,\n\t): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).values() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\tasync count(sql: SQL) {\n\t\tconst result = await this.values(sql) as [[number]];\n\n\t\treturn result[0][0];\n\t}\n\n\t/** @internal */\n\textractRawValuesValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport type Result<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: Promise<TResult> }[TKind];\n\nexport type DBResult<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: SQLiteRaw<TResult> }[TKind];\n\nexport abstract class SQLiteTransaction<\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends BaseSQLiteDatabase<TResultType, TRunResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTransaction';\n\n\tconstructor(\n\t\tresultType: TResultType,\n\t\tdialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultType],\n\t\tsession: SQLiteSession<TResultType, TRunResult, TFullSchema, TSchema>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(resultType, dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n}\n", "//# sourceMappingURL=subquery.js.map", "import { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { Check } from './checks.ts';\nimport { CheckBuilder } from './checks.ts';\nimport type { ForeignKey } from './foreign-keys.ts';\nimport { ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKey } from './primary-keys.ts';\nimport { PrimaryKeyBuilder } from './primary-keys.ts';\nimport { SQLiteTable } from './table.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport type { SQLiteView } from './view.ts';\n\nexport function getTableConfig<TTable extends SQLiteTable>(table: TTable) {\n\tconst columns = Object.values(table[SQLiteTable.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[SQLiteTable.Symbol.InlineForeignKeys]);\n\tconst name = table[Table.Symbol.Name];\n\n\tconst extraConfigBuilder = table[SQLiteTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[SQLiteTable.Symbol.Columns]);\n\t\tconst extraValues = Array.isArray(extraConfig) ? extraConfig.flat(1) as any[] : Object.values(extraConfig);\n\t\tfor (const builder of Object.values(extraValues)) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t};\n}\n\nexport type OnConflict = 'rollback' | 'abort' | 'fail' | 'ignore' | 'replace';\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: SQLiteView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t// ...view[SQLiteViewConfig],\n\t};\n}\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport { sqliteTable } from './table.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface ViewBuilderConfig {\n\talgorithm?: 'undefined' | 'merge' | 'temptable';\n\tdefiner?: string;\n\tsqlSecurity?: 'definer' | 'invoker';\n\twithCheckOption?: 'cascaded' | 'local';\n}\n\nexport class ViewBuilderCore<\n\tTConfig extends { name: string; columns?: unknown },\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBuilderCore';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t) {}\n\n\tprotected config: ViewBuilderConfig = {};\n}\n\nexport class ViewBuilder<TName extends string = string> extends ViewBuilderCore<{ name: TName }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBuilder';\n\n\tas<TSelection extends ColumnsSelection>(\n\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t): SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelection>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\t// const aliasedSelectedFields = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\tconst aliasedSelectedFields = qb.getSelectedFields();\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\t// sqliteConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: aliasedSelectedFields,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, SQLiteColumnBuilderBase> = Record<string, SQLiteColumnBuilderBase>,\n> extends ViewBuilderCore<\n\t{ name: TName; columns: TColumns }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteManualViewBuilder';\n\n\tprivate columns: Record<string, SQLiteColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t) {\n\t\tsuper(name);\n\t\tthis.columns = getTableColumns(sqliteTable(name, columns)) as BuildColumns<TName, TColumns, 'sqlite'>;\n\t}\n\n\texisting(): SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n\n\tas(query: SQL): SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n}\n\nexport class SQLiteView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends SQLiteViewBase<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteView';\n\n\tconstructor({ config }: {\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t}\n}\n\nexport type SQLiteViewWithSelection<\n\tTName extends string,\n\tTExisting extends boolean,\n\tTSelection extends ColumnsSelection,\n> = SQLiteView<TName, TExisting, TSelection> & TSelection;\n\nexport function sqliteView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function sqliteView<TName extends string, TColumns extends Record<string, SQLiteColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function sqliteView(\n\tname: string,\n\tselection?: Record<string, SQLiteColumnBuilderBase>,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection);\n\t}\n\treturn new ViewBuilder(name);\n}\n\nexport const view = sqliteView;\n", "export * from './alias.ts';\nexport * from './checks.ts';\nexport * from './columns/index.ts';\nexport * from './db.ts';\nexport * from './dialect.ts';\nexport * from './foreign-keys.ts';\nexport * from './indexes.ts';\nexport * from './primary-keys.ts';\nexport * from './query-builders/index.ts';\nexport * from './session.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './unique-constraint.ts';\nexport * from './utils.ts';\nexport * from './view.ts';\n", "import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\nimport type { BatchItem } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport type {\n\tPreparedQueryConfig as PreparedQueryConfigBase,\n\tSQLiteExecuteMethod,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface SQLiteD1SessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class SQLiteD1Session<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', D1Result, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'SQLiteD1Session';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: D1Database,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: SQLiteD1SessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): D1PreparedQuery {\n\t\tconst stmt = this.client.prepare(query.sql);\n\t\treturn new D1PreparedQuery(\n\t\t\tstmt,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tasync batch<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: D1PreparedStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query._prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tif (builtQuery.params.length > 0) {\n\t\t\t\tbuiltQueries.push((preparedQuery as D1PreparedQuery).stmt.bind(...builtQuery.params));\n\t\t\t} else {\n\t\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\t\tbuiltQueries.push(\n\t\t\t\t\tthis.client.prepare(builtQuery.sql).bind(...builtQuery.params),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst batchResults = await this.client.batch<any>(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\toverride extractRawAllValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results;\n\t}\n\n\toverride extractRawGetValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results[0];\n\t}\n\n\toverride extractRawValuesValueFromBatchResult(result: unknown): unknown {\n\t\treturn d1ToRawMapping((result as D1Result).results);\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (tx: D1Transaction<TFullSchema, TSchema>) => T | Promise<T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Promise<T> {\n\t\tconst tx = new D1Transaction('async', this.dialect, this, this.schema);\n\t\tawait this.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.run(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.run(sql`rollback`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class D1Transaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', D1Result, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'D1Transaction';\n\n\toverride async transaction<T>(transaction: (tx: D1Transaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new D1Transaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tawait this.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * This function was taken from the D1 implementation: https://github.com/cloudflare/workerd/blob/4aae9f4c7ae30a59a88ca868c4aff88bda85c956/src/cloudflare/internal/d1-api.ts#L287\n * It may cause issues with duplicated column names in join queries, which should be fixed on the D1 side.\n * @param results\n * @returns\n */\nfunction d1ToRawMapping(results: any) {\n\tconst rows: unknown[][] = [];\n\tfor (const row of results) {\n\t\tconst entry = Object.keys(row).map((k) => row[k]);\n\t\trows.push(entry);\n\t}\n\treturn rows;\n}\n\nexport class D1PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: D1Response; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic override readonly [entityKind]: string = 'D1PreparedQuery';\n\n\t/** @internal */\n\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown;\n\n\t/** @internal */\n\tfields?: SelectedFieldsOrdered;\n\n\t/** @internal */\n\tstmt: D1PreparedStatement;\n\n\tconstructor(\n\t\tstmt: D1PreparedStatement,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t) {\n\t\tsuper('async', executeMethod, query);\n\t\tthis.customResultMapper = customResultMapper;\n\t\tthis.fields = fields;\n\t\tthis.stmt = stmt;\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<D1Response> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).run();\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => this.mapAllResult(results!));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\treturn this.mapAllResult(rows);\n\t}\n\n\toverride mapAllResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = d1ToRawMapping((rows as D1Result).results);\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn rows;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][]);\n\t\t}\n\n\t\treturn (rows as unknown[][]).map((row) => mapResultRow(this.fields!, row, this.joinsNotNullableMap));\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, joinsNotNullableMap, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => results![0]);\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\tif (!rows[0]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(fields!, rows[0], joinsNotNullableMap);\n\t}\n\n\toverride mapGetResult(result: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\tresult = d1ToRawMapping((result as D1Result).results)[0];\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper([result as unknown[]]) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(this.fields!, result as unknown[], this.joinsNotNullableMap);\n\t}\n\n\tvalues<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).raw();\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n", "/// <reference types=\"@cloudflare/workers-types\" />\nimport type { D1Database as MiniflareD1Database } from '@miniflare/d1';\nimport type { BatchItem, BatchResponse } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype ExtractTablesWithRelations,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { BaseSQLiteDatabase } from '~/sqlite-core/db.ts';\nimport { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { DrizzleConfig, IfNotImported } from '~/utils.ts';\nimport { SQLiteD1Session } from './session.ts';\n\nexport type AnyD1Database = IfNotImported<\n\tD1Database,\n\tMiniflareD1Database,\n\tD1Database | IfNotImported<MiniflareD1Database, never, MiniflareD1Database>\n>;\n\nexport class DrizzleD1Database<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends BaseSQLiteDatabase<'async', D1Result, TSchema> {\n\tstatic override readonly [entityKind]: string = 'D1Database';\n\n\t/** @internal */\n\tdeclare readonly session: SQLiteD1Session<TSchema, ExtractTablesWithRelations<TSchema>>;\n\n\tasync batch<U extends BatchItem<'sqlite'>, T extends Readonly<[U, ...U[]]>>(\n\t\tbatch: T,\n\t): Promise<BatchResponse<T>> {\n\t\treturn this.session.batch(batch) as Promise<BatchResponse<T>>;\n\t}\n}\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends AnyD1Database = AnyD1Database,\n>(\n\tclient: TClient,\n\tconfig: DrizzleConfig<TSchema> = {},\n): DrizzleD1Database<TSchema> & {\n\t$client: TClient;\n} {\n\tconst dialect = new SQLiteAsyncDialect({ casing: config.casing });\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new SQLiteD1Session(client as D1Database, dialect, schema, { logger });\n\tconst db = new DrizzleD1Database('async', dialect, session, schema) as DrizzleD1Database<TSchema>;\n\t(<any> db).$client = client;\n\n\treturn db as any;\n}\n", "export * from './driver.ts';\nexport * from './session.ts';\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nconst ansiCodes = {\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    reset: '\\x1b[0m',\n};\nexport const warnPrefix = ansiCodes.yellow + 'WARN' + ansiCodes.reset;\nexport const infoPrefix = ansiCodes.cyan + 'INFO' + ansiCodes.reset;\nexport const errorPrefix = ansiCodes.red + 'ERR' + ansiCodes.reset;\nexport const debugPrefix = ansiCodes.magenta + 'DEBUG' + ansiCodes.reset;\nconst logLevelScores = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n    silent: 4,\n};\nconst noop = () => { };\nconst consoleLog = (prefix) => (...args) => console.log(prefix, ...args);\nconst debugLog = console.debug\n    ? (...args) => console.debug(debugPrefix, ...args)\n    : consoleLog(debugPrefix);\nconst infoLog = console.info\n    ? (...args) => console.info(infoPrefix, ...args)\n    : consoleLog(infoPrefix);\nconst warnLog = console.warn\n    ? (...args) => console.warn(warnPrefix, ...args)\n    : consoleLog(warnPrefix);\nconst errorLog = console.error\n    ? (...args) => console.error(errorPrefix, ...args)\n    : consoleLog(errorPrefix);\nexport const createLogger = (logLevel = globalThis.process?.env['DEBUG'] === '1' ? 'debug' : 'info') => {\n    const score = logLevelScores[logLevel];\n    return {\n        debug: score > logLevelScores.debug ? noop : debugLog,\n        info: score > logLevelScores.info ? noop : infoLog,\n        warn: score > logLevelScores.warn ? noop : warnLog,\n        error: score > logLevelScores.error ? noop : errorLog,\n    };\n};\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><link crossorigin rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/graphiql.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from\\\"https://unpkg.com/@graphql-yoga/graphiql@4.3.5/dist/yoga-graphiql.es.js\\\";renderYogaGraphiQL(root,__OPTS__)</script></body></html>\";\n", "import graphiqlHTML from '../graphiql-html.js';\nexport function shouldRenderGraphiQL({ headers, method }) {\n    return method === 'GET' && !!headers?.get('accept')?.includes('text/html');\n}\nexport const renderGraphiQL = (opts) => graphiqlHTML\n    .replace('__TITLE__', opts?.title || 'Yoga GraphiQL')\n    .replace('__OPTS__', JSON.stringify(opts ?? {}));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useGraphiQL(config) {\n    const logger = config.logger ?? console;\n    let graphiqlOptionsFactory;\n    if (typeof config?.options === 'function') {\n        graphiqlOptionsFactory = config?.options;\n    }\n    else if (typeof config?.options === 'object') {\n        graphiqlOptionsFactory = () => config?.options;\n    }\n    else if (config?.options === false) {\n        graphiqlOptionsFactory = () => false;\n    }\n    else {\n        graphiqlOptionsFactory = () => ({});\n    }\n    const renderer = config?.render ?? renderGraphiQL;\n    let urlPattern;\n    const getUrlPattern = ({ URLPattern }) => {\n        urlPattern ||= new URLPattern({\n            pathname: config.graphqlEndpoint,\n        });\n        return urlPattern;\n    };\n    return {\n        async onRequest({ request, serverContext, fetchAPI, endResponse, url }) {\n            if (shouldRenderGraphiQL(request) &&\n                (request.url.endsWith(config.graphqlEndpoint) ||\n                    request.url.endsWith(`${config.graphqlEndpoint}/`) ||\n                    url.pathname === config.graphqlEndpoint ||\n                    url.pathname === `${config.graphqlEndpoint}/` ||\n                    getUrlPattern(fetchAPI).test(url))) {\n                logger.debug(`Rendering GraphiQL`);\n                const graphiqlOptions = await graphiqlOptionsFactory(request, serverContext);\n                if (graphiqlOptions) {\n                    const graphiQLBody = await renderer({\n                        ...(graphiqlOptions === true ? {} : graphiqlOptions),\n                    });\n                    const response = new fetchAPI.Response(graphiQLBody, {\n                        headers: {\n                            'Content-Type': 'text/html',\n                        },\n                        status: 200,\n                    });\n                    endResponse(response);\n                }\n            }\n        },\n    };\n}\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.10.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 10,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = keyMap(this.getValues(), (value) => value.name);\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: GraphQLBoolean,\n      resolve: (type) => {\n        if (isInputObjectType(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive);\n\n    if (directive.locations.length === 0) {\n      context.reportError(\n        `Directive @${directive.name} must include 1 or more locations.`,\n        directive.astNode,\n      );\n    } // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if (isNonNullType(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nconst MAX_LISTS_DEPTH = 3;\nexport function MaxIntrospectionDepthRule(context) {\n  /**\n   * Counts the depth of list fields in \"__Type\" recursively and\n   * returns `true` if the limit has been reached.\n   */\n  function checkDepth(node, visitedFragments = Object.create(null), depth = 0) {\n    if (node.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentName = node.name.value;\n\n      if (visitedFragments[fragmentName] === true) {\n        // Fragment cycles are handled by `NoFragmentCyclesRule`.\n        return false;\n      }\n\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        // Missing fragments checks are handled by `KnownFragmentNamesRule`.\n        return false;\n      } // Rather than following an immutable programming pattern which has\n      // significant memory and garbage collection overhead, we've opted to\n      // take a mutable approach for efficiency's sake. Importantly visiting a\n      // fragment twice is fine, so long as you don't do one visit inside the\n      // other.\n\n      try {\n        visitedFragments[fragmentName] = true;\n        return checkDepth(fragment, visitedFragments, depth);\n      } finally {\n        visitedFragments[fragmentName] = undefined;\n      }\n    }\n\n    if (\n      node.kind === Kind.FIELD && // check all introspection lists\n      (node.name.value === 'fields' ||\n        node.name.value === 'interfaces' ||\n        node.name.value === 'possibleTypes' ||\n        node.name.value === 'inputFields')\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      depth++;\n\n      if (depth >= MAX_LISTS_DEPTH) {\n        return true;\n      }\n    } // handles fields and inline fragments\n\n    if ('selectionSet' in node && node.selectionSet) {\n      for (const child of node.selectionSet.selections) {\n        if (checkDepth(child, visitedFragments, depth)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    Field(node) {\n      if (node.name.value === '__schema' || node.name.value === '__type') {\n        if (checkDepth(node)) {\n          context.reportError(\n            new GraphQLError('Maximum introspection depth exceeded', {\n              nodes: [node],\n            }),\n          );\n          return false;\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when fields and a fragment or two fragments are compared\n  // \"between\" each other for conflicts. Comparisons made be made many times,\n  // so memoizing this can dramatically improve the performance of this validator.\n  const comparedFieldsAndFragmentPairs = new OrderedPairSet();\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFieldsAndFragmentPairs,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  // Memoize so the fields and fragments are not compared for conflicts more\n  // than once.\n  if (\n    comparedFieldsAndFragmentPairs.has(\n      fieldMap,\n      fragmentName,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFieldsAndFragmentPairs.add(\n    fieldMap,\n    fragmentName,\n    areMutuallyExclusive,\n  );\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFieldsAndFragmentPairs,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFieldsAndFragmentPairs,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFieldsAndFragmentPairs,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFieldsAndFragmentPairs,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFieldsAndFragmentPairs,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return print(sortValueNode(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things where the ordering of the pair\n * matters.\n *\n * Provides a third argument for has/set to allow flagging the pair as\n * weakly or strongly present within the collection.\n */\n\nclass OrderedPairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, weaklyPresent) {\n    var _this$_data$get;\n\n    const result =\n      (_this$_data$get = this._data.get(a)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(b);\n\n    if (result === undefined) {\n      return false;\n    }\n\n    return weaklyPresent ? true : weaklyPresent === result;\n  }\n\n  add(a, b, weaklyPresent) {\n    const map = this._data.get(a);\n\n    if (map === undefined) {\n      this._data.set(a, new Map([[b, weaklyPresent]]));\n    } else {\n      map.set(b, weaklyPresent);\n    }\n  }\n}\n/**\n * A way to keep track of pairs of similar things when the ordering of the pair\n * does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._orderedPairSet = new OrderedPairSet();\n  }\n\n  has(a, b, weaklyPresent) {\n    return a < b\n      ? this._orderedPairSet.has(a, b, weaklyPresent)\n      : this._orderedPairSet.has(b, a, weaklyPresent);\n  }\n\n  add(a, b, weaklyPresent) {\n    if (a < b) {\n      this._orderedPairSet.add(a, b, weaklyPresent);\n    } else {\n      this._orderedPairSet.add(b, a, weaklyPresent);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else if (selectionSet.selections.length === 0) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have at least one field selected.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n\n      if (keys.length !== 1) {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Exactly one key must be specified for OneOf type \"${type.name}\".`,\n          ),\n        );\n      }\n\n      const key = keys[0];\n      const value = coercedValue[key];\n\n      if (value === null) {\n        onError(\n          pathToArray(path).concat(key),\n          value,\n          new GraphQLError(`Field \"${key}\" must be non-null.`),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedObj);\n\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedObj[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  let variableDefinitions = {};\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context,\n  node,\n  type,\n  fieldNodeMap,\n  variableDefinitions,\n) {\n  var _fieldNodeMap$keys$;\n\n  const keys = Object.keys(fieldNodeMap);\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new GraphQLError(\n        `OneOf Input Object \"${type.name}\" must specify exactly one key.`,\n        {\n          nodes: [node],\n        },\n      ),\n    );\n    return;\n  }\n\n  const value =\n    (_fieldNodeMap$keys$ = fieldNodeMap[keys[0]]) === null ||\n    _fieldNodeMap$keys$ === void 0\n      ? void 0\n      : _fieldNodeMap$keys$.value;\n  const isNullLiteral = !value || value.kind === Kind.NULL;\n  const isVariable =\n    (value === null || value === void 0 ? void 0 : value.kind) ===\n    Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new GraphQLError(`Field \"${type.name}.${keys[0]}\" must be non-null.`, {\n        nodes: [node],\n      }),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new GraphQLError(\n          `Variable \"${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type.name}\".`,\n          {\n            nodes: [node],\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // TODO: Spec Section\n\nimport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nexport const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { visit, visitInParallel } from '../language/visitor.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.mjs';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.mjs';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(\n  schema,\n  documentAST,\n  rules = specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n", "export {\n  // Predicate\n  isSchema, // Assertion\n  assertSchema, // GraphQL Schema definition\n  GraphQLSchema,\n} from './schema.mjs';\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Predicates\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField, // Assertions\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Definitions\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType, // Type Wrappers\n  GraphQLList,\n  GraphQLNonNull,\n} from './definition.mjs';\nexport {\n  // Predicate\n  isDirective, // Assertion\n  assertDirective, // Directives Definition\n  GraphQLDirective, // Built-in Directives defined by the Spec\n  isSpecifiedDirective,\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON,\n} from './directives.mjs';\n// Common built-in scalar instances.\nexport {\n  // Predicate\n  isSpecifiedScalarType, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT,\n} from './scalars.mjs';\nexport {\n  // Predicate\n  isIntrospectionType, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // \"Enum\" of Type Kinds\n  TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from './introspection.mjs'; // Validate GraphQL schema.\n\nexport { validateSchema, assertValidSchema } from './validate.mjs'; // Upholds the spec rules about naming.\n\nexport { assertName, assertEnumValueName } from './assertName.mjs';\n", "export { Source } from './source.mjs';\nexport { getLocation } from './location.mjs';\nexport { printLocation, printSourceLocation } from './printLocation.mjs';\nexport { Kind } from './kinds.mjs';\nexport { TokenKind } from './tokenKind.mjs';\nexport { Lexer } from './lexer.mjs';\nexport { parse, parseValue, parseConstValue, parseType } from './parser.mjs';\nexport { print } from './printer.mjs';\nexport {\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n} from './visitor.mjs';\nexport { Location, Token, OperationTypeNode } from './ast.mjs';\nexport {\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './predicates.mjs';\nexport { DirectiveLocation } from './directiveLocation.mjs';\n", "export { pathToArray as responsePathAsArray } from '../jsutils/Path.mjs';\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n} from './execute.mjs';\nexport { subscribe, createSourceEventStream } from './subscribe.mjs';\nexport {\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n} from './values.mjs';\n", "export { validate } from './validate.mjs';\nexport { ValidationContext } from './ValidationContext.mjs';\n// All validation rules in the GraphQL Specification.\nexport { specifiedRules, recommendedRules } from './specifiedRules.mjs'; // Spec Section: \"Executable Definitions\"\n\nexport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nexport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nexport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nexport { KnownArgumentNamesRule } from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nexport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nexport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nexport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nexport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nexport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nexport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nexport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nexport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nexport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nexport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nexport { ProvidedRequiredArgumentsRule } from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nexport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nexport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nexport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nexport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nexport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nexport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nexport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nexport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Values Type Correctness\"\n\nexport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nexport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nexport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\nexport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.mjs'; // SDL-specific validation rules\n\nexport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nexport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nexport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nexport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nexport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nexport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nexport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nexport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Optional rules not defined by the GraphQL Specification\n\nexport { NoDeprecatedCustomRule } from './rules/custom/NoDeprecatedCustomRule.mjs';\nexport { NoSchemaIntrospectionCustomRule } from './rules/custom/NoSchemaIntrospectionCustomRule.mjs';\n", "export { GraphQLError, printError, formatError } from './GraphQLError.mjs';\nexport { syntaxError } from './syntaxError.mjs';\nexport { locatedError } from './locatedError.mjs';\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLOneOfDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n          isOneOf: isOneOf(astNode),\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n/**\n * Given an input object node, returns if the node should be OneOf.\n */\n\nfunction isOneOf(node) {\n  return Boolean(getDirectiveValues(GraphQLOneOfDirective, node));\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n", "// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.mjs'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType.mjs'; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from './introspectionFromSchema.mjs'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema.mjs'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from './buildASTSchema.mjs';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.mjs'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema.mjs'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport {\n  printSchema,\n  printType,\n  printIntrospectionSchema,\n} from './printSchema.mjs'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped.mjs'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue.mjs'; // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.mjs'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from './coerceInputValue.mjs'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST.mjs'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations.mjs'; // Strips characters that are not significant to the validity or execution of a GraphQL document.\n\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.mjs'; // Comparators for types\n\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.mjs'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName.mjs'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './findBreakingChanges.mjs';\n", "/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Definitions\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT, // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective, // \"Enum\" of Type Kinds\n  TypeKind, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef, // Predicates\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective, // Assertions\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Validate GraphQL schema.\n  validateSchema,\n  assertValidSchema, // Upholds the spec rules about naming.\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n// Parse and operate on GraphQL language source files.\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation, // Print source location.\n  printLocation,\n  printSourceLocation, // Lex\n  Lexer,\n  TokenKind, // Parse\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType, // Print\n  print, // Visit\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation, // Predicates\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n// Execute GraphQL queries.\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n// Validate GraphQL documents.\nexport {\n  validate,\n  ValidationContext, // All validation rules in the GraphQL Specification.\n  specifiedRules,\n  recommendedRules, // Individual validation rules.\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n  MaxIntrospectionDepthRule, // SDL-specific validation rules\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule, // Custom validation rules\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n// Create, format, and print GraphQL errors.\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // Produce the GraphQL query recommended for a full schema introspection.\n  // Accepts optional IntrospectionOptions.\n  getIntrospectionQuery, // Gets the target Operation from a Document.\n  getOperationAST, // Gets the Type for the target Operation AST.\n  getOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\n  introspectionFromSchema, // Build a GraphQLSchema from an introspection result.\n  buildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema, // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n  extendSchema, // Sort a GraphQLSchema.\n  lexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema, // Print a GraphQLType to GraphQL Schema language.\n  printType, // Prints the built-in introspection schema in the Schema Language format.\n  printIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\n  valueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\n  valueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\n  astFromValue, // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n  TypeInfo,\n  visitWithTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\n  coerceInputValue, // Concatenates multiple AST together.\n  concatAST, // Separates an AST into an AST per Operation.\n  separateOperations, // Strips characters that are not significant to the validity or execution of a GraphQL document.\n  stripIgnoredCharacters, // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap, // Asserts a string is a valid GraphQL name.\n  assertValidName, // Determine if a string is a valid GraphQL name.\n  isValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n", "import { isSchema } from 'graphql';\nexport const useSchema = (schemaDef) => {\n    if (schemaDef == null) {\n        return {};\n    }\n    if (isSchema(schemaDef)) {\n        return {\n            onPluginInit({ setSchema }) {\n                setSchema(schemaDef);\n            },\n        };\n    }\n    if ('then' in schemaDef) {\n        let schema;\n        return {\n            onRequestParse() {\n                return {\n                    async onRequestParseDone() {\n                        schema ||= await schemaDef;\n                    },\n                };\n            },\n            onEnveloped({ setSchema }) {\n                if (!schema) {\n                    throw new Error(`You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.`);\n                }\n                setSchema(schema);\n            },\n        };\n    }\n    const schemaByRequest = new WeakMap();\n    return {\n        onRequestParse({ request, serverContext }) {\n            return {\n                async onRequestParseDone() {\n                    const schema = await schemaDef({\n                        ...serverContext,\n                        request,\n                    });\n                    schemaByRequest.set(request, schema);\n                },\n            };\n        },\n        onEnveloped({ setSchema, context }) {\n            if (context?.request == null) {\n                throw new Error('Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.');\n            }\n            const schema = schemaByRequest.get(context.request);\n            if (schema == null) {\n                throw new Error(`No schema found for this request. Make sure you use this plugin with GraphQL Yoga.`);\n            }\n            setSchema(schema);\n        },\n    };\n};\n", "", "import { parse } from 'graphql';\nconst URL_REGEXP = /^(https?|wss?|file):\\/\\//;\n/**\n * Checks if the given string is a valid URL.\n *\n * @param str - The string to validate as a URL\n * @returns A boolean indicating whether the string is a valid URL\n *\n * @remarks\n * This function first attempts to use the `URL.canParse` method if available.\n * If not, it falls back to creating a new `URL` object to validate the string.\n */\nexport function isUrl(str) {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    if (!URL_REGEXP.test(str)) {\n        return false;\n    }\n    if (URL.canParse) {\n        return URL.canParse(str);\n    }\n    try {\n        const url = new URL(str);\n        return !!url;\n    }\n    catch (e) {\n        return false;\n    }\n}\nexport const asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);\nconst invalidDocRegex = /\\.[a-z0-9]+$/i;\n/**\n * Determines if a given input is a valid GraphQL document string.\n *\n * @param str - The input to validate as a GraphQL document\n * @returns A boolean indicating whether the input is a valid GraphQL document string\n *\n * @remarks\n * This function performs several validation checks:\n * - Ensures the input is a string\n * - Filters out strings with invalid document extensions\n * - Excludes URLs\n * - Attempts to parse the string as a GraphQL document\n *\n * @throws {Error} If the document fails to parse and is empty except GraphQL comments\n */\nexport function isDocumentString(str) {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    // XXX: is-valid-path or is-glob treat SDL as a valid path\n    // (`scalar Date` for example)\n    // this why checking the extension is fast enough\n    // and prevent from parsing the string in order to find out\n    // if the string is a SDL\n    if (invalidDocRegex.test(str) || isUrl(str)) {\n        return false;\n    }\n    try {\n        parse(str);\n        return true;\n    }\n    catch (e) {\n        if (!e.message.includes('EOF') &&\n            str.replace(/(\\#[^*]*)/g, '').trim() !== '' &&\n            str.includes(' ')) {\n            throw new Error(`Failed to parse the GraphQL document. ${e.message}\\n${str}`);\n        }\n    }\n    return false;\n}\nconst invalidPathRegex = /[\u2018\u201C!%^<>`\\n]/;\n/**\n * Checkes whether the `str` contains any path illegal characters.\n *\n * A string may sometimes look like a path but is not (like an SDL of a simple\n * GraphQL schema). To make sure we don't yield false-positives in such cases,\n * we disallow new lines in paths (even though most Unix systems support new\n * lines in file names).\n */\nexport function isValidPath(str) {\n    return typeof str === 'string' && !invalidPathRegex.test(str);\n}\nexport function compareStrings(a, b) {\n    if (String(a) < String(b)) {\n        return -1;\n    }\n    if (String(a) > String(b)) {\n        return 1;\n    }\n    return 0;\n}\nexport function nodeToString(a) {\n    let name;\n    if ('alias' in a) {\n        name = a.alias?.value;\n    }\n    if (name == null && 'name' in a) {\n        name = a.name?.value;\n    }\n    if (name == null) {\n        name = a.kind;\n    }\n    return name;\n}\nexport function compareNodes(a, b, customFn) {\n    const aStr = nodeToString(a);\n    const bStr = nodeToString(b);\n    if (typeof customFn === 'function') {\n        return customFn(aStr, bStr);\n    }\n    return compareStrings(aStr, bStr);\n}\nexport function isSome(input) {\n    return input != null;\n}\nexport function assertSome(input, message = 'Value should be something') {\n    if (input == null) {\n        throw new Error(message);\n    }\n}\n", "// Taken from graphql-js\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/inspect.ts\nconst MAX_RECURSIVE_DEPTH = 3;\n/**\n * Used to print values in error messages.\n */\nexport function inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch (typeof value) {\n        case 'string':\n            return JSON.stringify(value);\n        case 'function':\n            return value.name ? `[function ${value.name}]` : '[function]';\n        case 'object':\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatError(value) {\n    // eslint-disable-next-line no-constant-condition\n    if ((value.name = 'GraphQLError')) {\n        return value.toString();\n    }\n    return `${value.name}: ${value.message};\\n ${value.stack}`;\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return 'null';\n    }\n    if (value instanceof Error) {\n        if (value.name === 'AggregateError') {\n            return (formatError(value) +\n                '\\n' +\n                formatArray(value.errors, previouslySeenValues));\n        }\n        return formatError(value);\n    }\n    if (previouslySeenValues.includes(value)) {\n        return '[Circular]';\n    }\n    const seenValues = [...previouslySeenValues, value];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON();\n        // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    }\n    else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === 'function';\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return '{}';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[' + getObjectTag(object) + ']';\n    }\n    const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));\n    return '{ ' + properties.join(', ') + ' }';\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return '[]';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[Array]';\n    }\n    const len = array.length;\n    const items = [];\n    for (let i = 0; i < len; ++i) {\n        items.push(formatValue(array[i], seenValues));\n    }\n    return '[' + items.join(', ') + ']';\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object /, '')\n        .replace(/]$/, '');\n    if (tag === 'Object' && typeof object.constructor === 'function') {\n        const name = object.constructor.name;\n        if (typeof name === 'string' && name !== '') {\n            return name;\n        }\n    }\n    return tag;\n}\n", "import { GraphQLError, versionInfo } from 'graphql';\nconst possibleGraphQLErrorProperties = [\n    'message',\n    'locations',\n    'path',\n    'nodes',\n    'source',\n    'positions',\n    'originalError',\n    'name',\n    'stack',\n    'extensions',\n];\nfunction isGraphQLErrorLike(error) {\n    return (error != null &&\n        typeof error === 'object' &&\n        Object.keys(error).every(key => possibleGraphQLErrorProperties.includes(key)));\n}\nexport function createGraphQLError(message, options) {\n    if (options?.originalError &&\n        !(options.originalError instanceof Error) &&\n        isGraphQLErrorLike(options.originalError)) {\n        options.originalError = createGraphQLError(options.originalError.message, options.originalError);\n    }\n    if (versionInfo.major >= 17) {\n        return new GraphQLError(message, options);\n    }\n    return new GraphQLError(message, options?.nodes, options?.source, options?.positions, options?.path, options?.originalError, options?.extensions);\n}\nexport function relocatedError(originalError, path) {\n    return createGraphQLError(originalError.message, {\n        nodes: originalError.nodes,\n        source: originalError.source,\n        positions: originalError.positions,\n        path: path == null ? originalError.path : path,\n        originalError,\n        extensions: originalError.extensions,\n    });\n}\n", "import { isPromise } from './jsutils.js';\nexport function mapMaybePromise(value, mapper, errorMapper) {\n    if (isPromise(value)) {\n        if (errorMapper) {\n            try {\n                return value.then(mapper, errorMapper);\n            }\n            catch (e) {\n                return errorMapper(e);\n            }\n        }\n        return value.then(mapper);\n    }\n    if (errorMapper) {\n        try {\n            return mapper(value);\n        }\n        catch (e) {\n            return errorMapper(e);\n        }\n    }\n    return mapper(value);\n}\n", "import { mapMaybePromise } from './map-maybe-promise.js';\nexport function isIterableObject(value) {\n    return value != null && typeof value === 'object' && Symbol.iterator in value;\n}\nexport function isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nexport function isPromise(value) {\n    return value?.then != null;\n}\nexport function promiseReduce(values, callbackFn, initialValue) {\n    let accumulator = initialValue;\n    for (const value of values) {\n        accumulator = mapMaybePromise(accumulator, resolved => callbackFn(resolved, value));\n    }\n    return accumulator;\n}\nexport function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { inspect } from 'cross-inspect';\nimport { isNonNullType, Kind, print, valueFromAST, } from 'graphql';\nimport { createGraphQLError } from './errors.js';\nimport { hasOwnProperty } from './jsutils.js';\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getArgumentValues(def, node, variableValues = {}) {\n    const coercedValues = {};\n    const argumentNodes = node.arguments ?? [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if (isNonNullType(argType)) {\n                throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === Kind.NULL;\n        if (valueNode.kind === Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if (isNonNullType(argType)) {\n                    throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && isNonNullType(argType)) {\n            throw createGraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = valueFromAST(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw createGraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\n", "export function memoize1(fn) {\n    const memoize1cache = new WeakMap();\n    return function memoized(a1) {\n        const cachedValue = memoize1cache.get(a1);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1);\n            memoize1cache.set(a1, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2(fn) {\n    const memoize2cache = new WeakMap();\n    return function memoized(a1, a2) {\n        let cache2 = memoize2cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2cache.set(a1, cache2);\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize3(fn) {\n    const memoize3Cache = new WeakMap();\n    return function memoized(a1, a2, a3) {\n        let cache2 = memoize3Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize3Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        const cachedValue = cache3.get(a3);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize4(fn) {\n    const memoize4Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize4Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize4Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cache4 = cache3.get(a3);\n        if (!cache4) {\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cachedValue = cache4.get(a4);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize5(fn) {\n    const memoize5Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize5Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize5Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache4 = cache3.get(a3);\n        if (!cache4) {\n            cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache5 = cache4.get(a4);\n        if (!cache5) {\n            cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        const cachedValue = cache5.get(a5);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of4(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of5(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\n", "import { valueFromAST, valueFromASTUntyped } from 'graphql';\nimport { getArgumentValues } from './getArgumentValues.js';\nimport { memoize1 } from './memoize.js';\nexport function getDirectiveExtensions(directableObj, schema, pathToDirectivesInExtensions = ['directives']) {\n    const directiveExtensions = {};\n    if (directableObj.extensions) {\n        let directivesInExtensions = directableObj.extensions;\n        for (const pathSegment of pathToDirectivesInExtensions) {\n            directivesInExtensions = directivesInExtensions?.[pathSegment];\n        }\n        if (directivesInExtensions != null) {\n            for (const directiveNameProp in directivesInExtensions) {\n                const directiveObjs = directivesInExtensions[directiveNameProp];\n                const directiveName = directiveNameProp;\n                if (Array.isArray(directiveObjs)) {\n                    for (const directiveObj of directiveObjs) {\n                        let existingDirectiveExtensions = directiveExtensions[directiveName];\n                        if (!existingDirectiveExtensions) {\n                            existingDirectiveExtensions = [];\n                            directiveExtensions[directiveName] = existingDirectiveExtensions;\n                        }\n                        existingDirectiveExtensions.push(directiveObj);\n                    }\n                }\n                else {\n                    let existingDirectiveExtensions = directiveExtensions[directiveName];\n                    if (!existingDirectiveExtensions) {\n                        existingDirectiveExtensions = [];\n                        directiveExtensions[directiveName] = existingDirectiveExtensions;\n                    }\n                    existingDirectiveExtensions.push(directiveObjs);\n                }\n            }\n        }\n    }\n    const memoizedStringify = memoize1(obj => JSON.stringify(obj));\n    const astNodes = [];\n    if (directableObj.astNode) {\n        astNodes.push(directableObj.astNode);\n    }\n    if (directableObj.extensionASTNodes) {\n        astNodes.push(...directableObj.extensionASTNodes);\n    }\n    for (const astNode of astNodes) {\n        if (astNode.directives?.length) {\n            for (const directive of astNode.directives) {\n                const directiveName = directive.name.value;\n                let existingDirectiveExtensions = directiveExtensions[directiveName];\n                if (!existingDirectiveExtensions) {\n                    existingDirectiveExtensions = [];\n                    directiveExtensions[directiveName] = existingDirectiveExtensions;\n                }\n                const directiveInSchema = schema?.getDirective(directiveName);\n                let value = {};\n                if (directiveInSchema) {\n                    value = getArgumentValues(directiveInSchema, directive);\n                }\n                if (directive.arguments) {\n                    for (const argNode of directive.arguments) {\n                        const argName = argNode.name.value;\n                        if (value[argName] == null) {\n                            const argInDirective = directiveInSchema?.args.find(arg => arg.name === argName);\n                            if (argInDirective) {\n                                value[argName] = valueFromAST(argNode.value, argInDirective.type);\n                            }\n                        }\n                        if (value[argName] == null) {\n                            value[argName] = valueFromASTUntyped(argNode.value);\n                        }\n                    }\n                }\n                if (astNodes.length > 0 && existingDirectiveExtensions.length > 0) {\n                    const valStr = memoizedStringify(value);\n                    if (existingDirectiveExtensions.some(val => memoizedStringify(val) === valStr)) {\n                        continue;\n                    }\n                }\n                existingDirectiveExtensions.push(value);\n            }\n        }\n    }\n    return directiveExtensions;\n}\n", "import { getDirectiveExtensions } from './getDirectiveExtensions.js';\nexport function getDirectivesInExtensions(node, pathToDirectivesInExtensions = ['directives']) {\n    const directiveExtensions = getDirectiveExtensions(node, undefined, pathToDirectivesInExtensions);\n    return Object.entries(directiveExtensions)\n        .map(([directiveName, directiveArgsArr]) => directiveArgsArr?.map(directiveArgs => ({\n        name: directiveName,\n        args: directiveArgs,\n    })))\n        .flat(Infinity)\n        .filter(Boolean);\n}\nexport function getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directiveExtensions = getDirectiveExtensions(node, undefined, pathToDirectivesInExtensions);\n    return directiveExtensions[directiveName];\n}\nexport function getDirectives(schema, node, pathToDirectivesInExtensions = ['directives']) {\n    const directiveExtensions = getDirectiveExtensions(node, schema, pathToDirectivesInExtensions);\n    return Object.entries(directiveExtensions)\n        .map(([directiveName, directiveArgsArr]) => directiveArgsArr?.map(directiveArgs => ({\n        name: directiveName,\n        args: directiveArgs,\n    })))\n        .flat(Infinity)\n        .filter(Boolean);\n}\nexport function getDirective(schema, node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directiveExtensions = getDirectiveExtensions(node, schema, pathToDirectivesInExtensions);\n    return directiveExtensions[directiveName];\n}\n", "import { valueFromASTUntyped, } from 'graphql';\nexport function getFieldsWithDirectives(documentNode, options = {}) {\n    const result = {};\n    let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n    if (options.includeInputTypes) {\n        selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n    }\n    const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind));\n    for (const type of allTypes) {\n        const typeName = type.name.value;\n        if (type.fields == null) {\n            continue;\n        }\n        for (const field of type.fields) {\n            if (field.directives && field.directives.length > 0) {\n                const fieldName = field.name.value;\n                const key = `${typeName}.${fieldName}`;\n                const directives = field.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: valueFromASTUntyped(arg.value) }), {}),\n                }));\n                result[key] = directives;\n            }\n        }\n    }\n    return result;\n}\n", "import { Kind, valueFromASTUntyped, } from 'graphql';\nfunction isTypeWithFields(t) {\n    return t.kind === Kind.OBJECT_TYPE_DEFINITION || t.kind === Kind.OBJECT_TYPE_EXTENSION;\n}\nexport function getArgumentsWithDirectives(documentNode) {\n    const result = {};\n    const allTypes = documentNode.definitions.filter(isTypeWithFields);\n    for (const type of allTypes) {\n        if (type.fields == null) {\n            continue;\n        }\n        for (const field of type.fields) {\n            const argsWithDirectives = field.arguments?.filter(arg => arg.directives?.length);\n            if (!argsWithDirectives?.length) {\n                continue;\n            }\n            const typeFieldResult = (result[`${type.name.value}.${field.name.value}`] = {});\n            for (const arg of argsWithDirectives) {\n                const directives = arg.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, dArg) => ({ ...prev, [dArg.name.value]: valueFromASTUntyped(dArg.value) }), {}),\n                }));\n                typeFieldResult[arg.name.value] = directives;\n            }\n        }\n    }\n    return result;\n}\n", "export function getImplementingTypes(interfaceName, schema) {\n    const allTypesMap = schema.getTypeMap();\n    const result = [];\n    for (const graphqlTypeName in allTypesMap) {\n        const graphqlType = allTypesMap[graphqlTypeName];\n        if ('getInterfaces' in graphqlType) {\n            const allInterfaces = graphqlType.getInterfaces();\n            if (allInterfaces.find(int => int.name === interfaceName)) {\n                result.push(graphqlType.name);\n            }\n        }\n    }\n    return result;\n}\n", "import { inspect } from 'cross-inspect';\nimport { isListType, isNonNullType, Kind } from 'graphql';\nexport function astFromType(type) {\n    if (isNonNullType(type)) {\n        const innerType = astFromType(type.ofType);\n        if (innerType.kind === Kind.NON_NULL_TYPE) {\n            throw new Error(`Invalid type node ${inspect(type)}. Inner type of non-null type cannot be a non-null type.`);\n        }\n        return {\n            kind: Kind.NON_NULL_TYPE,\n            type: innerType,\n        };\n    }\n    else if (isListType(type)) {\n        return {\n            kind: Kind.LIST_TYPE,\n            type: astFromType(type.ofType),\n        };\n    }\n    return {\n        kind: Kind.NAMED_TYPE,\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n    };\n}\n", "import { Kind } from 'graphql';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | BigInt        | Int                  |\n * | null          | NullValue            |\n *\n */\nexport function astFromValueUntyped(value) {\n    // only explicit null, not undefined, NaN\n    if (value === null) {\n        return { kind: Kind.NULL };\n    }\n    // undefined\n    if (value === undefined) {\n        return null;\n    }\n    // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n    // the value is not an array, convert the value using the list's item type.\n    if (Array.isArray(value)) {\n        const valuesNodes = [];\n        for (const item of value) {\n            const itemNode = astFromValueUntyped(item);\n            if (itemNode != null) {\n                valuesNodes.push(itemNode);\n            }\n        }\n        return { kind: Kind.LIST, values: valuesNodes };\n    }\n    if (typeof value === 'object') {\n        if (value?.toJSON) {\n            return astFromValueUntyped(value.toJSON());\n        }\n        const fieldNodes = [];\n        for (const fieldName in value) {\n            const fieldValue = value[fieldName];\n            const ast = astFromValueUntyped(fieldValue);\n            if (ast) {\n                fieldNodes.push({\n                    kind: Kind.OBJECT_FIELD,\n                    name: { kind: Kind.NAME, value: fieldName },\n                    value: ast,\n                });\n            }\n        }\n        return { kind: Kind.OBJECT, fields: fieldNodes };\n    }\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof value === 'boolean') {\n        return { kind: Kind.BOOLEAN, value };\n    }\n    if (typeof value === 'bigint') {\n        return { kind: Kind.INT, value: String(value) };\n    }\n    // JavaScript numbers can be Int or Float values.\n    if (typeof value === 'number' && isFinite(value)) {\n        const stringNum = String(value);\n        return integerStringRegExp.test(stringNum)\n            ? { kind: Kind.INT, value: stringNum }\n            : { kind: Kind.FLOAT, value: stringNum };\n    }\n    if (typeof value === 'string') {\n        return { kind: Kind.STRING, value };\n    }\n    throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from 'cross-inspect';\nimport { isEnumType, isInputObjectType, isLeafType, isListType, isNonNullType, Kind, } from 'graphql';\nimport { astFromValueUntyped } from './astFromValueUntyped.js';\nimport { isIterableObject, isObjectLike } from './jsutils.js';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | BigInt        | Int                  |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\nexport function astFromValue(value, type) {\n    if (isNonNullType(type)) {\n        const astValue = astFromValue(value, type.ofType);\n        if (astValue?.kind === Kind.NULL) {\n            return null;\n        }\n        return astValue;\n    }\n    // only explicit null, not undefined, NaN\n    if (value === null) {\n        return { kind: Kind.NULL };\n    }\n    // undefined\n    if (value === undefined) {\n        return null;\n    }\n    // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n    // the value is not an array, convert the value using the list's item type.\n    if (isListType(type)) {\n        const itemType = type.ofType;\n        if (isIterableObject(value)) {\n            const valuesNodes = [];\n            for (const item of value) {\n                const itemNode = astFromValue(item, itemType);\n                if (itemNode != null) {\n                    valuesNodes.push(itemNode);\n                }\n            }\n            return { kind: Kind.LIST, values: valuesNodes };\n        }\n        return astFromValue(value, itemType);\n    }\n    // Populate the fields of the input object by creating ASTs from each value\n    // in the JavaScript object according to the fields in the input type.\n    if (isInputObjectType(type)) {\n        if (!isObjectLike(value)) {\n            return null;\n        }\n        const fieldNodes = [];\n        for (const field of Object.values(type.getFields())) {\n            const fieldValue = astFromValue(value[field.name], field.type);\n            if (fieldValue) {\n                fieldNodes.push({\n                    kind: Kind.OBJECT_FIELD,\n                    name: { kind: Kind.NAME, value: field.name },\n                    value: fieldValue,\n                });\n            }\n        }\n        return { kind: Kind.OBJECT, fields: fieldNodes };\n    }\n    if (isLeafType(type)) {\n        // Since value is an internally represented value, it must be serialized\n        // to an externally represented value before converting into an AST.\n        const serialized = type.serialize(value);\n        if (serialized == null) {\n            return null;\n        }\n        if (isEnumType(type)) {\n            return { kind: Kind.ENUM, value: serialized };\n        }\n        // ID types can use Int literals.\n        if (type.name === 'ID' &&\n            typeof serialized === 'string' &&\n            integerStringRegExp.test(serialized)) {\n            return { kind: Kind.INT, value: serialized };\n        }\n        return astFromValueUntyped(serialized);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n    console.assert(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { Kind } from 'graphql';\nexport function getDescriptionNode(obj) {\n    if (obj.astNode?.description) {\n        return {\n            ...obj.astNode.description,\n            block: true,\n        };\n    }\n    if (obj.description) {\n        return {\n            kind: Kind.STRING,\n            value: obj.description,\n            block: true,\n        };\n    }\n}\n", "import { createGraphQLError } from './errors.js';\nimport { memoize1 } from './memoize.js';\nexport function getDefinedRootType(schema, operation, nodes) {\n    const rootTypeMap = getRootTypeMap(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw createGraphQLError(`Schema is not configured to execute ${operation} operation.`, {\n            nodes,\n        });\n    }\n    return rootType;\n}\nexport const getRootTypeNames = memoize1(function getRootTypeNames(schema) {\n    const rootTypes = getRootTypes(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nexport const getRootTypes = memoize1(function getRootTypes(schema) {\n    const rootTypeMap = getRootTypeMap(schema);\n    return new Set(rootTypeMap.values());\n});\nexport const getRootTypeMap = memoize1(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n", "import { GraphQLDeprecatedDirective, isEnumType, isInputObjectType, isInterfaceType, isIntrospectionType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, Kind, print, } from 'graphql';\nimport { astFromType } from './astFromType.js';\nimport { astFromValue } from './astFromValue.js';\nimport { astFromValueUntyped } from './astFromValueUntyped.js';\nimport { getDescriptionNode } from './descriptionFromObject.js';\nimport { getDirectivesInExtensions, } from './get-directives.js';\nimport { isSome } from './helpers.js';\nimport { getRootTypeMap } from './rootTypes.js';\nexport function getDocumentNodeFromSchema(schema, options = {}) {\n    const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n    const typesMap = schema.getTypeMap();\n    const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n    const definitions = schemaNode != null ? [schemaNode] : [];\n    const directives = schema.getDirectives();\n    for (const directive of directives) {\n        if (isSpecifiedDirective(directive)) {\n            continue;\n        }\n        definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n    }\n    for (const typeName in typesMap) {\n        const type = typesMap[typeName];\n        const isPredefinedScalar = isSpecifiedScalarType(type);\n        const isIntrospection = isIntrospectionType(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        if (isObjectType(type)) {\n            definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInterfaceType(type)) {\n            definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isUnionType(type)) {\n            definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInputObjectType(type)) {\n            definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isEnumType(type)) {\n            definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isScalarType(type)) {\n            definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n        }\n        else {\n            throw new Error(`Unknown type ${type}.`);\n        }\n    }\n    return {\n        kind: Kind.DOCUMENT,\n        definitions,\n    };\n}\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nexport function printSchemaWithDirectives(schema, options = {}) {\n    const documentNode = getDocumentNodeFromSchema(schema, options);\n    return print(documentNode);\n}\nexport function astFromSchema(schema, pathToDirectivesInExtensions) {\n    const operationTypeMap = new Map([\n        ['query', undefined],\n        ['mutation', undefined],\n        ['subscription', undefined],\n    ]);\n    const nodes = [];\n    if (schema.astNode != null) {\n        nodes.push(schema.astNode);\n    }\n    if (schema.extensionASTNodes != null) {\n        for (const extensionASTNode of schema.extensionASTNodes) {\n            nodes.push(extensionASTNode);\n        }\n    }\n    for (const node of nodes) {\n        if (node.operationTypes) {\n            for (const operationTypeDefinitionNode of node.operationTypes) {\n                operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);\n            }\n        }\n    }\n    const rootTypeMap = getRootTypeMap(schema);\n    for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {\n        const rootType = rootTypeMap.get(operationTypeNode);\n        if (rootType != null) {\n            const rootTypeAST = astFromType(rootType);\n            if (operationTypeDefinitionNode != null) {\n                operationTypeDefinitionNode.type = rootTypeAST;\n            }\n            else {\n                operationTypeMap.set(operationTypeNode, {\n                    kind: Kind.OPERATION_TYPE_DEFINITION,\n                    operation: operationTypeNode,\n                    type: rootTypeAST,\n                });\n            }\n        }\n    }\n    const operationTypes = [...operationTypeMap.values()].filter(isSome);\n    const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n    if (!operationTypes.length && !directives.length) {\n        return null;\n    }\n    const schemaNode = {\n        kind: operationTypes != null ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,\n        operationTypes,\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n    const descriptionNode = getDescriptionNode(schema);\n    if (descriptionNode) {\n        schemaNode.description = descriptionNode;\n    }\n    return schemaNode;\n}\nexport function astFromDirective(directive, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: getDescriptionNode(directive),\n        name: {\n            kind: Kind.NAME,\n            value: directive.name,\n        },\n        arguments: directive.args?.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        repeatable: directive.isRepeatable,\n        locations: directive.locations?.map(location => ({\n            kind: Kind.NAME,\n            value: location,\n        })) || [],\n    };\n}\nexport function getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    let directiveNodesBesidesDeprecatedAndSpecifiedBy = [];\n    const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    let deprecatedDirectiveNode = null;\n    let specifiedByDirectiveNode = null;\n    if (directives != null) {\n        directiveNodesBesidesDeprecatedAndSpecifiedBy = directives.filter(directive => directive.name.value !== 'deprecated' && directive.name.value !== 'specifiedBy');\n        if (entity.deprecationReason != null) {\n            deprecatedDirectiveNode = directives.filter(directive => directive.name.value === 'deprecated')?.[0];\n        }\n        if (entity.specifiedByUrl != null || entity.specifiedByURL != null) {\n            specifiedByDirectiveNode = directives.filter(directive => directive.name.value === 'specifiedBy')?.[0];\n        }\n    }\n    if (entity.deprecationReason != null && deprecatedDirectiveNode == null) {\n        deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);\n    }\n    if (entity.specifiedByUrl != null ||\n        (entity.specifiedByURL != null && specifiedByDirectiveNode == null)) {\n        const specifiedByValue = entity.specifiedByUrl || entity.specifiedByURL;\n        const specifiedByArgs = {\n            url: specifiedByValue,\n        };\n        specifiedByDirectiveNode = makeDirectiveNode('specifiedBy', specifiedByArgs);\n    }\n    if (deprecatedDirectiveNode != null) {\n        directiveNodesBesidesDeprecatedAndSpecifiedBy.push(deprecatedDirectiveNode);\n    }\n    if (specifiedByDirectiveNode != null) {\n        directiveNodesBesidesDeprecatedAndSpecifiedBy.push(specifiedByDirectiveNode);\n    }\n    return directiveNodesBesidesDeprecatedAndSpecifiedBy;\n}\nexport function astFromArg(arg, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: getDescriptionNode(arg),\n        name: {\n            kind: Kind.NAME,\n            value: arg.name,\n        },\n        type: astFromType(arg.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        defaultValue: arg.defaultValue !== undefined\n            ? (astFromValue(arg.defaultValue, arg.type) ?? undefined)\n            : undefined,\n        directives: getDirectiveNodes(arg, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function astFromObjectType(type, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        interfaces: Object.values(type.getInterfaces()).map(iFace => astFromType(iFace)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {\n    const node = {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n    if ('getInterfaces' in type) {\n        node.interfaces = Object.values(type.getInterfaces()).map(iFace => astFromType(iFace));\n    }\n    return node;\n}\nexport function astFromUnionType(type, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n        types: type.getTypes().map(type => astFromType(type)),\n    };\n}\nexport function astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromInputField(field, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function astFromEnumType(type, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function astFromScalarType(type, schema, pathToDirectivesInExtensions) {\n    const directivesInExtensions = getDirectivesInExtensions(type, pathToDirectivesInExtensions);\n    const directives = makeDirectiveNodes(schema, directivesInExtensions);\n    const specifiedByValue = (type['specifiedByUrl'] ||\n        type['specifiedByURL']);\n    if (specifiedByValue &&\n        !directives.some(directiveNode => directiveNode.name.value === 'specifiedBy')) {\n        const specifiedByArgs = {\n            url: specifiedByValue,\n        };\n        directives.push(makeDirectiveNode('specifiedBy', specifiedByArgs));\n    }\n    return {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: getDescriptionNode(type),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n}\nexport function astFromField(field, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.FIELD_DEFINITION,\n        description: getDescriptionNode(field),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function astFromInputField(field, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: getDescriptionNode(field),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n        defaultValue: astFromValue(field.defaultValue, field.type) ?? undefined,\n    };\n}\nexport function astFromEnumValue(value, schema, pathToDirectivesInExtensions) {\n    return {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: getDescriptionNode(value),\n        name: {\n            kind: Kind.NAME,\n            value: value.name,\n        },\n        directives: getDirectiveNodes(value, schema, pathToDirectivesInExtensions),\n    };\n}\nexport function makeDeprecatedDirective(deprecationReason) {\n    return makeDirectiveNode('deprecated', { reason: deprecationReason }, GraphQLDeprecatedDirective);\n}\nexport function makeDirectiveNode(name, args, directive) {\n    const directiveArguments = [];\n    for (const argName in args) {\n        const argValue = args[argName];\n        let value;\n        if (directive != null) {\n            const arg = directive.args.find(arg => arg.name === argName);\n            if (arg) {\n                value = astFromValue(argValue, arg.type);\n            }\n        }\n        if (value == null) {\n            value = astFromValueUntyped(argValue);\n        }\n        if (value != null) {\n            directiveArguments.push({\n                kind: Kind.ARGUMENT,\n                name: {\n                    kind: Kind.NAME,\n                    value: argName,\n                },\n                value,\n            });\n        }\n    }\n    return {\n        kind: Kind.DIRECTIVE,\n        name: {\n            kind: Kind.NAME,\n            value: name,\n        },\n        arguments: directiveArguments,\n    };\n}\nexport function makeDirectiveNodes(schema, directiveValues) {\n    const directiveNodes = [];\n    for (const { name, args } of directiveValues) {\n        const directive = schema?.getDirective(name);\n        directiveNodes.push(makeDirectiveNode(name, args, directive));\n    }\n    return directiveNodes;\n}\n", "import { Kind, specifiedRules, validate, versionInfo, } from 'graphql';\nexport function validateGraphQlDocuments(schema, documents, rules = createDefaultRules()) {\n    const definitions = new Set();\n    const fragmentsDefinitionsMap = new Map();\n    for (const document of documents) {\n        for (const docDefinition of document.definitions) {\n            if (docDefinition.kind === Kind.FRAGMENT_DEFINITION) {\n                fragmentsDefinitionsMap.set(docDefinition.name.value, docDefinition);\n            }\n            else {\n                definitions.add(docDefinition);\n            }\n        }\n    }\n    const fullAST = {\n        kind: Kind.DOCUMENT,\n        definitions: Array.from([...definitions, ...fragmentsDefinitionsMap.values()]),\n    };\n    const errors = validate(schema, fullAST, rules);\n    for (const error of errors) {\n        error.stack = error.message;\n        if (error.locations) {\n            for (const location of error.locations) {\n                error.stack += `\\n    at ${error.source?.name}:${location.line}:${location.column}`;\n            }\n        }\n    }\n    return errors;\n}\nexport function createDefaultRules() {\n    let ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n    if (versionInfo.major < 15) {\n        ignored = ignored.map(rule => rule.replace(/Rule$/, ''));\n    }\n    return specifiedRules.filter((f) => !ignored.includes(f.name));\n}\n", "import { buildClientSchema } from 'graphql';\nfunction stripBOM(content) {\n    content = content.toString();\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n    // because the buffer-to-string conversion in `fs.readFileSync()`\n    // translates it to FEFF, the UTF-16 BOM.\n    if (content.charCodeAt(0) === 0xfeff) {\n        content = content.slice(1);\n    }\n    return content;\n}\nfunction parseBOM(content) {\n    return JSON.parse(stripBOM(content));\n}\nexport function parseGraphQLJSON(location, jsonContent, options) {\n    let parsedJson = parseBOM(jsonContent);\n    if (parsedJson.data) {\n        parsedJson = parsedJson.data;\n    }\n    if (parsedJson.kind === 'Document') {\n        return {\n            location,\n            document: parsedJson,\n        };\n    }\n    else if (parsedJson.__schema) {\n        const schema = buildClientSchema(parsedJson, options);\n        return {\n            location,\n            schema,\n        };\n    }\n    else if (typeof parsedJson === 'string') {\n        return {\n            location,\n            rawSDL: parsedJson,\n        };\n    }\n    throw new Error(`Not valid JSON content`);\n}\n", "import { TokenKind, visit, } from 'graphql';\nconst MAX_LINE_LENGTH = 80;\nlet commentsRegistry = {};\nexport function resetComments() {\n    commentsRegistry = {};\n}\nexport function collectComment(node) {\n    const entityName = node.name?.value;\n    if (entityName == null) {\n        return;\n    }\n    pushComment(node, entityName);\n    switch (node.kind) {\n        case 'EnumTypeDefinition':\n            if (node.values) {\n                for (const value of node.values) {\n                    pushComment(value, entityName, value.name.value);\n                }\n            }\n            break;\n        case 'ObjectTypeDefinition':\n        case 'InputObjectTypeDefinition':\n        case 'InterfaceTypeDefinition':\n            if (node.fields) {\n                for (const field of node.fields) {\n                    pushComment(field, entityName, field.name.value);\n                    if (isFieldDefinitionNode(field) && field.arguments) {\n                        for (const arg of field.arguments) {\n                            pushComment(arg, entityName, field.name.value, arg.name.value);\n                        }\n                    }\n                }\n            }\n            break;\n    }\n}\nexport function pushComment(node, entity, field, argument) {\n    const comment = getComment(node);\n    if (typeof comment !== 'string' || comment.length === 0) {\n        return;\n    }\n    const keys = [entity];\n    if (field) {\n        keys.push(field);\n        if (argument) {\n            keys.push(argument);\n        }\n    }\n    const path = keys.join('.');\n    if (!commentsRegistry[path]) {\n        commentsRegistry[path] = [];\n    }\n    commentsRegistry[path].push(comment);\n}\nexport function printComment(comment) {\n    return '\\n# ' + comment.replace(/\\n/g, '\\n# ');\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * NOTE: ==> This file has been modified just to add comments to the printed AST\n * This is a temp measure, we will move to using the original non modified printer.js ASAP.\n */\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n    return maybeArray ? maybeArray.filter(x => x).join(separator || '') : '';\n}\nfunction hasMultilineItems(maybeArray) {\n    return maybeArray?.some(str => str.includes('\\n')) ?? false;\n}\nfunction addDescription(cb) {\n    return (node, _key, _parent, path, ancestors) => {\n        const keys = [];\n        const parent = path.reduce((prev, key) => {\n            if (['fields', 'arguments', 'values'].includes(key) && prev.name) {\n                keys.push(prev.name.value);\n            }\n            return prev[key];\n        }, ancestors[0]);\n        const key = [...keys, parent?.name?.value].filter(Boolean).join('.');\n        const items = [];\n        if (node.kind.includes('Definition') && commentsRegistry[key]) {\n            items.push(...commentsRegistry[key]);\n        }\n        return join([...items.map(printComment), node.description, cb(node, _key, _parent, path, ancestors)], '\\n');\n    };\n}\nfunction indent(maybeString) {\n    return maybeString && `  ${maybeString.replace(/\\n/g, '\\n  ')}`;\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n    return array && array.length !== 0 ? `{\\n${indent(join(array, '\\n'))}\\n}` : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n    return maybeString ? start + maybeString + (end || '') : '';\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription = false) {\n    const escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n    return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1\n        ? `\"\"\"${escaped.replace(/\"$/, '\"\\n')}\"\"\"`\n        : `\"\"\"\\n${isDescription ? escaped : indent(escaped)}\\n\"\"\"`;\n}\nconst printDocASTReducer = {\n    Name: { leave: node => node.value },\n    Variable: { leave: node => '$' + node.name },\n    // Document\n    Document: {\n        leave: node => join(node.definitions, '\\n\\n'),\n    },\n    OperationDefinition: {\n        leave: node => {\n            const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n            const prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' ');\n            // the query short form.\n            return prefix + ' ' + node.selectionSet;\n        },\n    },\n    VariableDefinition: {\n        leave: ({ variable, type, defaultValue, directives }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' ')),\n    },\n    SelectionSet: { leave: ({ selections }) => block(selections) },\n    Field: {\n        leave({ alias, name, arguments: args, directives, selectionSet }) {\n            const prefix = wrap('', alias, ': ') + name;\n            let argsLine = prefix + wrap('(', join(args, ', '), ')');\n            if (argsLine.length > MAX_LINE_LENGTH) {\n                argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n            }\n            return join([argsLine, join(directives, ' '), selectionSet], ' ');\n        },\n    },\n    Argument: { leave: ({ name, value }) => name + ': ' + value },\n    // Fragments\n    FragmentSpread: {\n        leave: ({ name, directives }) => '...' + name + wrap(' ', join(directives, ' ')),\n    },\n    InlineFragment: {\n        leave: ({ typeCondition, directives, selectionSet }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' '),\n    },\n    FragmentDefinition: {\n        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => \n        // Note: fragment variable definitions are experimental and may be changed\n        // or removed in the future.\n        `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n            `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n            selectionSet,\n    },\n    // Value\n    IntValue: { leave: ({ value }) => value },\n    FloatValue: { leave: ({ value }) => value },\n    StringValue: {\n        leave: ({ value, block: isBlockString }) => {\n            if (isBlockString) {\n                return printBlockString(value);\n            }\n            return JSON.stringify(value);\n        },\n    },\n    BooleanValue: { leave: ({ value }) => (value ? 'true' : 'false') },\n    NullValue: { leave: () => 'null' },\n    EnumValue: { leave: ({ value }) => value },\n    ListValue: { leave: ({ values }) => '[' + join(values, ', ') + ']' },\n    ObjectValue: { leave: ({ fields }) => '{' + join(fields, ', ') + '}' },\n    ObjectField: { leave: ({ name, value }) => name + ': ' + value },\n    // Directive\n    Directive: {\n        leave: ({ name, arguments: args }) => '@' + name + wrap('(', join(args, ', '), ')'),\n    },\n    // Type\n    NamedType: { leave: ({ name }) => name },\n    ListType: { leave: ({ type }) => '[' + type + ']' },\n    NonNullType: { leave: ({ type }) => type + '!' },\n    // Type System Definitions\n    SchemaDefinition: {\n        leave: ({ directives, operationTypes }) => join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    OperationTypeDefinition: {\n        leave: ({ operation, type }) => operation + ': ' + type,\n    },\n    ScalarTypeDefinition: {\n        leave: ({ name, directives }) => join(['scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join([\n            'type',\n            name,\n            wrap('implements ', join(interfaces, ' & ')),\n            join(directives, ' '),\n            block(fields),\n        ], ' '),\n    },\n    FieldDefinition: {\n        leave: ({ name, arguments: args, type, directives }) => name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            ': ' +\n            type +\n            wrap(' ', join(directives, ' ')),\n    },\n    InputValueDefinition: {\n        leave: ({ name, type, defaultValue, directives }) => join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' '),\n    },\n    InterfaceTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join([\n            'interface',\n            name,\n            wrap('implements ', join(interfaces, ' & ')),\n            join(directives, ' '),\n            block(fields),\n        ], ' '),\n    },\n    UnionTypeDefinition: {\n        leave: ({ name, directives, types }) => join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeDefinition: {\n        leave: ({ name, directives, values }) => join(['enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    EnumValueDefinition: {\n        leave: ({ name, directives }) => join([name, join(directives, ' ')], ' '),\n    },\n    InputObjectTypeDefinition: {\n        leave: ({ name, directives, fields }) => join(['input', name, join(directives, ' '), block(fields)], ' '),\n    },\n    DirectiveDefinition: {\n        leave: ({ name, arguments: args, repeatable, locations }) => 'directive @' +\n            name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            (repeatable ? ' repeatable' : '') +\n            ' on ' +\n            join(locations, ' | '),\n    },\n    SchemaExtension: {\n        leave: ({ directives, operationTypes }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    ScalarTypeExtension: {\n        leave: ({ name, directives }) => join(['extend scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join([\n            'extend type',\n            name,\n            wrap('implements ', join(interfaces, ' & ')),\n            join(directives, ' '),\n            block(fields),\n        ], ' '),\n    },\n    InterfaceTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join([\n            'extend interface',\n            name,\n            wrap('implements ', join(interfaces, ' & ')),\n            join(directives, ' '),\n            block(fields),\n        ], ' '),\n    },\n    UnionTypeExtension: {\n        leave: ({ name, directives, types }) => join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeExtension: {\n        leave: ({ name, directives, values }) => join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    InputObjectTypeExtension: {\n        leave: ({ name, directives, fields }) => join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n    },\n};\nconst printDocASTReducerWithComments = Object.keys(printDocASTReducer).reduce((prev, key) => ({\n    ...prev,\n    [key]: {\n        leave: addDescription(printDocASTReducer[key].leave),\n    },\n}), {});\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nexport function printWithComments(ast) {\n    return visit(ast, printDocASTReducerWithComments);\n}\nfunction isFieldDefinitionNode(node) {\n    return node.kind === 'FieldDefinition';\n}\n// graphql < v13 and > v15 does not export getDescription\nexport function getDescription(node, options) {\n    if (node.description != null) {\n        return node.description.value;\n    }\n    if (options?.commentDescriptions) {\n        return getComment(node);\n    }\n}\nexport function getComment(node) {\n    const rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n        return dedentBlockStringValue(`\\n${rawValue}`);\n    }\n}\nexport function getLeadingCommentBlock(node) {\n    const loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    const comments = [];\n    let token = loc.startToken.prev;\n    while (token != null &&\n        token.kind === TokenKind.COMMENT &&\n        token.next != null &&\n        token.prev != null &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        const value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\nexport function dedentBlockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    const lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    const commonIndent = getBlockStringIndentation(lines);\n    if (commonIndent !== 0) {\n        for (let i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\n/**\n * @internal\n */\nexport function getBlockStringIndentation(lines) {\n    let commonIndent = null;\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        if (commonIndent === null || indent < commonIndent) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\n", "import { Source as GraphQLSource, isTypeSystemDefinitionNode, Kind, parse, print, visit, } from 'graphql';\nimport { dedentBlockStringValue, getLeadingCommentBlock } from './comments.js';\nexport function parseGraphQLSDL(location, rawSDL, options = {}) {\n    let document;\n    try {\n        if (options.commentDescriptions && rawSDL.includes('#')) {\n            document = transformCommentsToDescriptions(rawSDL, options);\n            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n            // into descriptions.\n            if (options.noLocation) {\n                document = parse(print(document), options);\n            }\n        }\n        else {\n            document = parse(new GraphQLSource(rawSDL, location), options);\n        }\n    }\n    catch (e) {\n        if (e.message.includes('EOF') && rawSDL.replace(/(\\#[^*]*)/g, '').trim() === '') {\n            document = {\n                kind: Kind.DOCUMENT,\n                definitions: [],\n            };\n        }\n        else {\n            throw e;\n        }\n    }\n    return {\n        location,\n        document,\n    };\n}\nexport function transformCommentsToDescriptions(sourceSdl, options = {}) {\n    const parsedDoc = parse(sourceSdl, {\n        ...options,\n        noLocation: false,\n    });\n    const modifiedDoc = visit(parsedDoc, {\n        leave: (node) => {\n            if (isDescribable(node)) {\n                const rawValue = getLeadingCommentBlock(node);\n                if (rawValue !== undefined) {\n                    const commentsBlock = dedentBlockStringValue('\\n' + rawValue);\n                    const isBlock = commentsBlock.includes('\\n');\n                    if (!node.description) {\n                        return {\n                            ...node,\n                            description: {\n                                kind: Kind.STRING,\n                                value: commentsBlock,\n                                block: isBlock,\n                            },\n                        };\n                    }\n                    else {\n                        return {\n                            ...node,\n                            description: {\n                                ...node.description,\n                                value: node.description.value + '\\n' + commentsBlock,\n                                block: true,\n                            },\n                        };\n                    }\n                }\n            }\n        },\n    });\n    return modifiedDoc;\n}\nexport function isDescribable(node) {\n    return (isTypeSystemDefinitionNode(node) ||\n        node.kind === Kind.FIELD_DEFINITION ||\n        node.kind === Kind.INPUT_VALUE_DEFINITION ||\n        node.kind === Kind.ENUM_VALUE_DEFINITION);\n}\n", "import { getNamedType, isEnumType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql';\nimport { getDefinedRootType, getRootTypeNames } from './rootTypes.js';\nlet operationVariables = [];\nlet fieldTypeMap = new Map();\nfunction addOperationVariable(variable) {\n    operationVariables.push(variable);\n}\nfunction resetOperationVariables() {\n    operationVariables = [];\n}\nfunction resetFieldMap() {\n    fieldTypeMap = new Map();\n}\nexport function buildOperationNodeForField({ schema, kind, field, models, ignore = [], depthLimit, circularReferenceDepth, argNames, selectedFields = true, }) {\n    resetOperationVariables();\n    resetFieldMap();\n    const rootTypeNames = getRootTypeNames(schema);\n    const operationNode = buildOperationAndCollectVariables({\n        schema,\n        fieldName: field,\n        kind,\n        models: models || [],\n        ignore,\n        depthLimit: depthLimit || Infinity,\n        circularReferenceDepth: circularReferenceDepth || 1,\n        argNames,\n        selectedFields,\n        rootTypeNames,\n    });\n    // attach variables\n    operationNode.variableDefinitions = [...operationVariables];\n    resetOperationVariables();\n    resetFieldMap();\n    return operationNode;\n}\nfunction buildOperationAndCollectVariables({ schema, fieldName, kind, models, ignore, depthLimit, circularReferenceDepth, argNames, selectedFields, rootTypeNames, }) {\n    const type = getDefinedRootType(schema, kind);\n    const field = type.getFields()[fieldName];\n    const operationName = `${fieldName}_${kind}`;\n    if (field.args) {\n        for (const arg of field.args) {\n            const argName = arg.name;\n            if (!argNames || argNames.includes(argName)) {\n                addOperationVariable(resolveVariable(arg, argName));\n            }\n        }\n    }\n    return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: kind,\n        name: {\n            kind: Kind.NAME,\n            value: operationName,\n        },\n        variableDefinitions: [],\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [\n                resolveField({\n                    type,\n                    field,\n                    models,\n                    firstCall: true,\n                    path: [],\n                    ancestors: [],\n                    ignore,\n                    depthLimit,\n                    circularReferenceDepth,\n                    schema,\n                    depth: 0,\n                    argNames,\n                    selectedFields,\n                    rootTypeNames,\n                }),\n            ],\n        },\n    };\n}\nfunction resolveSelectionSet({ parent, type, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    if (typeof selectedFields === 'boolean' && depth > depthLimit) {\n        return;\n    }\n    if (isUnionType(type)) {\n        const types = type.getTypes();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => fragmentNode?.selectionSet?.selections?.length > 0),\n        };\n    }\n    if (isInterfaceType(type)) {\n        const types = Object.values(schema.getTypeMap()).filter((t) => isObjectType(t) && t.getInterfaces().includes(type));\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => fragmentNode?.selectionSet?.selections?.length > 0),\n        };\n    }\n    if (isObjectType(type) && !rootTypeNames.has(type.name)) {\n        const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n        const isModel = models.includes(type.name);\n        if (!firstCall && isModel && !isIgnored) {\n            return {\n                kind: Kind.SELECTION_SET,\n                selections: [\n                    {\n                        kind: Kind.FIELD,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'id',\n                        },\n                    },\n                ],\n            };\n        }\n        const fields = type.getFields();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: Object.keys(fields)\n                .filter(fieldName => {\n                return !hasCircularRef([...ancestors, getNamedType(fields[fieldName].type)], {\n                    depth: circularReferenceDepth,\n                });\n            })\n                .map(fieldName => {\n                const selectedSubFields = typeof selectedFields === 'object' ? selectedFields[fieldName] : true;\n                if (selectedSubFields) {\n                    return resolveField({\n                        type,\n                        field: fields[fieldName],\n                        models,\n                        path: [...path, fieldName],\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields: selectedSubFields,\n                        rootTypeNames,\n                    });\n                }\n                return null;\n            })\n                .filter((f) => {\n                if (f == null) {\n                    return false;\n                }\n                else if ('selectionSet' in f) {\n                    return !!f.selectionSet?.selections?.length;\n                }\n                return true;\n            }),\n        };\n    }\n}\nfunction resolveVariable(arg, name) {\n    function resolveVariableType(type) {\n        if (isListType(type)) {\n            return {\n                kind: Kind.LIST_TYPE,\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        if (isNonNullType(type)) {\n            return {\n                kind: Kind.NON_NULL_TYPE,\n                // for v16 compatibility\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        return {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: type.name,\n            },\n        };\n    }\n    return {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: name || arg.name,\n            },\n        },\n        type: resolveVariableType(arg.type),\n    };\n}\nfunction getArgumentName(name, path) {\n    return [...path, name].join('_');\n}\nfunction resolveField({ type, field, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    const namedType = getNamedType(field.type);\n    let args = [];\n    let removeField = false;\n    if (field.args && field.args.length) {\n        args = field.args\n            .map(arg => {\n            const argumentName = getArgumentName(arg.name, path);\n            if (argNames && !argNames.includes(argumentName)) {\n                if (isNonNullType(arg.type)) {\n                    removeField = true;\n                }\n                return null;\n            }\n            if (!firstCall) {\n                addOperationVariable(resolveVariable(arg, argumentName));\n            }\n            return {\n                kind: Kind.ARGUMENT,\n                name: {\n                    kind: Kind.NAME,\n                    value: arg.name,\n                },\n                value: {\n                    kind: Kind.VARIABLE,\n                    name: {\n                        kind: Kind.NAME,\n                        value: getArgumentName(arg.name, path),\n                    },\n                },\n            };\n        })\n            .filter(Boolean);\n    }\n    if (removeField) {\n        return null;\n    }\n    const fieldPath = [...path, field.name];\n    const fieldPathStr = fieldPath.join('.');\n    let fieldName = field.name;\n    if (fieldTypeMap.has(fieldPathStr) && fieldTypeMap.get(fieldPathStr) !== field.type.toString()) {\n        fieldName += field.type\n            .toString()\n            .replace('!', 'NonNull')\n            .replace('[', 'List')\n            .replace(']', '');\n    }\n    fieldTypeMap.set(fieldPathStr, field.type.toString());\n    if (!isScalarType(namedType) && !isEnumType(namedType)) {\n        return {\n            kind: Kind.FIELD,\n            name: {\n                kind: Kind.NAME,\n                value: field.name,\n            },\n            ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n            selectionSet: resolveSelectionSet({\n                parent: type,\n                type: namedType,\n                models,\n                firstCall,\n                path: fieldPath,\n                ancestors: [...ancestors, type],\n                ignore,\n                depthLimit,\n                circularReferenceDepth,\n                schema,\n                depth: depth + 1,\n                argNames,\n                selectedFields,\n                rootTypeNames,\n            }) || undefined,\n            arguments: args,\n        };\n    }\n    return {\n        kind: Kind.FIELD,\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n        arguments: args,\n    };\n}\nfunction hasCircularRef(types, config = {\n    depth: 1,\n}) {\n    const type = types[types.length - 1];\n    if (isScalarType(type)) {\n        return false;\n    }\n    const size = types.filter(t => t.name === type.name).length;\n    return size > config.depth;\n}\n", "export var DirectiveLocation;\n(function (DirectiveLocation) {\n    /** Request Definitions */\n    DirectiveLocation[\"QUERY\"] = \"QUERY\";\n    DirectiveLocation[\"MUTATION\"] = \"MUTATION\";\n    DirectiveLocation[\"SUBSCRIPTION\"] = \"SUBSCRIPTION\";\n    DirectiveLocation[\"FIELD\"] = \"FIELD\";\n    DirectiveLocation[\"FRAGMENT_DEFINITION\"] = \"FRAGMENT_DEFINITION\";\n    DirectiveLocation[\"FRAGMENT_SPREAD\"] = \"FRAGMENT_SPREAD\";\n    DirectiveLocation[\"INLINE_FRAGMENT\"] = \"INLINE_FRAGMENT\";\n    DirectiveLocation[\"VARIABLE_DEFINITION\"] = \"VARIABLE_DEFINITION\";\n    /** Type System Definitions */\n    DirectiveLocation[\"SCHEMA\"] = \"SCHEMA\";\n    DirectiveLocation[\"SCALAR\"] = \"SCALAR\";\n    DirectiveLocation[\"OBJECT\"] = \"OBJECT\";\n    DirectiveLocation[\"FIELD_DEFINITION\"] = \"FIELD_DEFINITION\";\n    DirectiveLocation[\"ARGUMENT_DEFINITION\"] = \"ARGUMENT_DEFINITION\";\n    DirectiveLocation[\"INTERFACE\"] = \"INTERFACE\";\n    DirectiveLocation[\"UNION\"] = \"UNION\";\n    DirectiveLocation[\"ENUM\"] = \"ENUM\";\n    DirectiveLocation[\"ENUM_VALUE\"] = \"ENUM_VALUE\";\n    DirectiveLocation[\"INPUT_OBJECT\"] = \"INPUT_OBJECT\";\n    DirectiveLocation[\"INPUT_FIELD_DEFINITION\"] = \"INPUT_FIELD_DEFINITION\";\n})(DirectiveLocation || (DirectiveLocation = {}));\n", "export var MapperKind;\n(function (MapperKind) {\n    MapperKind[\"TYPE\"] = \"MapperKind.TYPE\";\n    MapperKind[\"SCALAR_TYPE\"] = \"MapperKind.SCALAR_TYPE\";\n    MapperKind[\"ENUM_TYPE\"] = \"MapperKind.ENUM_TYPE\";\n    MapperKind[\"COMPOSITE_TYPE\"] = \"MapperKind.COMPOSITE_TYPE\";\n    MapperKind[\"OBJECT_TYPE\"] = \"MapperKind.OBJECT_TYPE\";\n    MapperKind[\"INPUT_OBJECT_TYPE\"] = \"MapperKind.INPUT_OBJECT_TYPE\";\n    MapperKind[\"ABSTRACT_TYPE\"] = \"MapperKind.ABSTRACT_TYPE\";\n    MapperKind[\"UNION_TYPE\"] = \"MapperKind.UNION_TYPE\";\n    MapperKind[\"INTERFACE_TYPE\"] = \"MapperKind.INTERFACE_TYPE\";\n    MapperKind[\"ROOT_OBJECT\"] = \"MapperKind.ROOT_OBJECT\";\n    MapperKind[\"QUERY\"] = \"MapperKind.QUERY\";\n    MapperKind[\"MUTATION\"] = \"MapperKind.MUTATION\";\n    MapperKind[\"SUBSCRIPTION\"] = \"MapperKind.SUBSCRIPTION\";\n    MapperKind[\"DIRECTIVE\"] = \"MapperKind.DIRECTIVE\";\n    MapperKind[\"FIELD\"] = \"MapperKind.FIELD\";\n    MapperKind[\"COMPOSITE_FIELD\"] = \"MapperKind.COMPOSITE_FIELD\";\n    MapperKind[\"OBJECT_FIELD\"] = \"MapperKind.OBJECT_FIELD\";\n    MapperKind[\"ROOT_FIELD\"] = \"MapperKind.ROOT_FIELD\";\n    MapperKind[\"QUERY_ROOT_FIELD\"] = \"MapperKind.QUERY_ROOT_FIELD\";\n    MapperKind[\"MUTATION_ROOT_FIELD\"] = \"MapperKind.MUTATION_ROOT_FIELD\";\n    MapperKind[\"SUBSCRIPTION_ROOT_FIELD\"] = \"MapperKind.SUBSCRIPTION_ROOT_FIELD\";\n    MapperKind[\"INTERFACE_FIELD\"] = \"MapperKind.INTERFACE_FIELD\";\n    MapperKind[\"INPUT_OBJECT_FIELD\"] = \"MapperKind.INPUT_OBJECT_FIELD\";\n    MapperKind[\"ARGUMENT\"] = \"MapperKind.ARGUMENT\";\n    MapperKind[\"ENUM_VALUE\"] = \"MapperKind.ENUM_VALUE\";\n})(MapperKind || (MapperKind = {}));\n", "import { isObjectType } from 'graphql';\nexport function getObjectTypeFromTypeMap(typeMap, type) {\n    if (type) {\n        const maybeObjectType = typeMap[type.name];\n        if (isObjectType(maybeObjectType)) {\n            return maybeObjectType;\n        }\n    }\n}\n", "import { GraphQLBoolean, GraphQLFloat, GraphQLID, GraphQLInputObjectType, GraphQLInt, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString, Kind, } from 'graphql';\nexport function createNamedStub(name, type) {\n    let constructor;\n    if (type === 'object') {\n        constructor = GraphQLObjectType;\n    }\n    else if (type === 'interface') {\n        constructor = GraphQLInterfaceType;\n    }\n    else {\n        constructor = GraphQLInputObjectType;\n    }\n    return new constructor({\n        name,\n        fields: {\n            _fake: {\n                type: GraphQLString,\n            },\n        },\n    });\n}\nexport function createStub(node, type) {\n    switch (node.kind) {\n        case Kind.LIST_TYPE:\n            return new GraphQLList(createStub(node.type, type));\n        case Kind.NON_NULL_TYPE:\n            return new GraphQLNonNull(createStub(node.type, type));\n        default:\n            if (type === 'output') {\n                return createNamedStub(node.name.value, 'object');\n            }\n            return createNamedStub(node.name.value, 'input');\n    }\n}\nexport function isNamedStub(type) {\n    if ('getFields' in type) {\n        const fields = type.getFields();\n        // eslint-disable-next-line no-unreachable-loop\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            return field.name === '_fake';\n        }\n    }\n    return false;\n}\nexport function getBuiltInForStub(type) {\n    switch (type.name) {\n        case GraphQLInt.name:\n            return GraphQLInt;\n        case GraphQLFloat.name:\n            return GraphQLFloat;\n        case GraphQLString.name:\n            return GraphQLString;\n        case GraphQLBoolean.name:\n            return GraphQLBoolean;\n        case GraphQLID.name:\n            return GraphQLID;\n        default:\n            return type;\n    }\n}\n", "import { GraphQLDirective, GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, } from 'graphql';\nimport { getBuiltInForStub, isNamedStub } from './stub.js';\nexport function rewireTypes(originalTypeMap, directives) {\n    const referenceTypeMap = Object.create(null);\n    for (const typeName in originalTypeMap) {\n        referenceTypeMap[typeName] = originalTypeMap[typeName];\n    }\n    const newTypeMap = Object.create(null);\n    for (const typeName in referenceTypeMap) {\n        const namedType = referenceTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const newName = namedType.name;\n        if (newName.startsWith('__')) {\n            continue;\n        }\n        if (newTypeMap[newName] != null) {\n            console.warn(`Duplicate schema type name ${newName} found; keeping the existing one found in the schema`);\n            continue;\n        }\n        newTypeMap[newName] = namedType;\n    }\n    for (const typeName in newTypeMap) {\n        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n    }\n    const newDirectives = directives.map(directive => rewireDirective(directive));\n    return {\n        typeMap: newTypeMap,\n        directives: newDirectives,\n    };\n    function rewireDirective(directive) {\n        if (isSpecifiedDirective(directive)) {\n            return directive;\n        }\n        const directiveConfig = directive.toConfig();\n        directiveConfig.args = rewireArgs(directiveConfig.args);\n        return new GraphQLDirective(directiveConfig);\n    }\n    function rewireArgs(args) {\n        const rewiredArgs = {};\n        for (const argName in args) {\n            const arg = args[argName];\n            const rewiredArgType = rewireType(arg.type);\n            if (rewiredArgType != null) {\n                arg.type = rewiredArgType;\n                rewiredArgs[argName] = arg;\n            }\n        }\n        return rewiredArgs;\n    }\n    function rewireNamedType(type) {\n        if (isObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n                interfaces: () => rewireNamedTypes(config.interfaces),\n            };\n            return new GraphQLObjectType(newConfig);\n        }\n        else if (isInterfaceType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n            };\n            if ('interfaces' in newConfig) {\n                newConfig.interfaces = () => rewireNamedTypes(config.interfaces);\n            }\n            return new GraphQLInterfaceType(newConfig);\n        }\n        else if (isUnionType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                types: () => rewireNamedTypes(config.types),\n            };\n            return new GraphQLUnionType(newConfig);\n        }\n        else if (isInputObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireInputFields(config.fields),\n            };\n            return new GraphQLInputObjectType(newConfig);\n        }\n        else if (isEnumType(type)) {\n            const enumConfig = type.toConfig();\n            return new GraphQLEnumType(enumConfig);\n        }\n        else if (isScalarType(type)) {\n            if (isSpecifiedScalarType(type)) {\n                return type;\n            }\n            const scalarConfig = type.toConfig();\n            return new GraphQLScalarType(scalarConfig);\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function rewireFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null && field.args) {\n                field.type = rewiredFieldType;\n                field.args = rewireArgs(field.args);\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireInputFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null) {\n                field.type = rewiredFieldType;\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireNamedTypes(namedTypes) {\n        const rewiredTypes = [];\n        for (const namedType of namedTypes) {\n            const rewiredType = rewireType(namedType);\n            if (rewiredType != null) {\n                rewiredTypes.push(rewiredType);\n            }\n        }\n        return rewiredTypes;\n    }\n    function rewireType(type) {\n        if (isListType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLList(rewiredType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLNonNull(rewiredType) : null;\n        }\n        else if (isNamedType(type)) {\n            let rewiredType = referenceTypeMap[type.name];\n            if (rewiredType === undefined) {\n                rewiredType = isNamedStub(type) ? getBuiltInForStub(type) : rewireNamedType(type);\n                newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n            }\n            return rewiredType != null ? newTypeMap[rewiredType.name] : null;\n        }\n        return null;\n    }\n}\n", "import { getNullableType, isInputObjectType, isLeafType, isListType, } from 'graphql';\nimport { asArray } from './helpers.js';\nexport function transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(type);\n    if (isLeafType(nullableType)) {\n        return inputLeafValueTransformer != null\n            ? inputLeafValueTransformer(nullableType, value)\n            : value;\n    }\n    else if (isListType(nullableType)) {\n        return asArray(value).map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));\n    }\n    else if (isInputObjectType(nullableType)) {\n        const fields = nullableType.getFields();\n        const newValue = {};\n        for (const key in value) {\n            const field = fields[key];\n            if (field != null) {\n                newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);\n            }\n        }\n        return inputObjectValueTransformer != null\n            ? inputObjectValueTransformer(nullableType, newValue)\n            : newValue;\n    }\n    // unreachable, no other possible return value\n}\nexport function serializeInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.serialize(v);\n        }\n        catch {\n            return v;\n        }\n    });\n}\nexport function parseInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.parseValue(v);\n        }\n        catch {\n            return v;\n        }\n    });\n}\nexport function parseInputValueLiteral(type, value) {\n    return transformInputValue(type, value, (t, v) => t.parseLiteral(v, {}));\n}\n", "import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, isEnumType, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql';\nimport { getObjectTypeFromTypeMap } from './getObjectTypeFromTypeMap.js';\nimport { MapperKind, } from './Interfaces.js';\nimport { rewireTypes } from './rewire.js';\nimport { parseInputValue, serializeInputValue } from './transformInputValue.js';\nexport function mapSchema(schema, schemaMapper = {}) {\n    const newTypeMap = mapArguments(mapFields(mapTypes(mapDefaultValues(mapEnumValues(mapTypes(mapDefaultValues(schema.getTypeMap(), schema, serializeInputValue), schema, schemaMapper, type => isLeafType(type)), schema, schemaMapper), schema, parseInputValue), schema, schemaMapper, type => !isLeafType(type)), schema, schemaMapper), schema, schemaMapper);\n    const originalDirectives = schema.getDirectives();\n    const newDirectives = mapDirectives(originalDirectives, schema, schemaMapper);\n    const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);\n    return new GraphQLSchema({\n        ...schema.toConfig(),\n        query: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getQueryType())),\n        mutation: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getMutationType())),\n        subscription: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getSubscriptionType())),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\nfunction mapTypes(originalTypeMap, schema, schemaMapper, testFn = () => true) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (originalType == null || !testFn(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const typeMapper = getTypeMapper(schema, schemaMapper, typeName);\n            if (typeMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const maybeNewType = typeMapper(originalType, schema);\n            if (maybeNewType === undefined) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            newTypeMap[typeName] = maybeNewType;\n        }\n    }\n    return newTypeMap;\n}\nfunction mapEnumValues(originalTypeMap, schema, schemaMapper) {\n    const enumValueMapper = getEnumValueMapper(schemaMapper);\n    if (!enumValueMapper) {\n        return originalTypeMap;\n    }\n    return mapTypes(originalTypeMap, schema, {\n        [MapperKind.ENUM_TYPE]: type => {\n            const config = type.toConfig();\n            const originalEnumValueConfigMap = config.values;\n            const newEnumValueConfigMap = {};\n            for (const externalValue in originalEnumValueConfigMap) {\n                const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];\n                const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);\n                if (mappedEnumValue === undefined) {\n                    newEnumValueConfigMap[externalValue] = originalEnumValueConfig;\n                }\n                else if (Array.isArray(mappedEnumValue)) {\n                    const [newExternalValue, newEnumValueConfig] = mappedEnumValue;\n                    newEnumValueConfigMap[newExternalValue] =\n                        newEnumValueConfig === undefined ? originalEnumValueConfig : newEnumValueConfig;\n                }\n                else if (mappedEnumValue !== null) {\n                    newEnumValueConfigMap[externalValue] = mappedEnumValue;\n                }\n            }\n            return correctASTNodes(new GraphQLEnumType({\n                ...config,\n                values: newEnumValueConfigMap,\n            }));\n        },\n    }, type => isEnumType(type));\n}\nfunction mapDefaultValues(originalTypeMap, schema, fn) {\n    const newTypeMap = mapArguments(originalTypeMap, schema, {\n        [MapperKind.ARGUMENT]: argumentConfig => {\n            if (argumentConfig.defaultValue === undefined) {\n                return argumentConfig;\n            }\n            const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...argumentConfig,\n                    defaultValue: fn(maybeNewType, argumentConfig.defaultValue),\n                };\n            }\n        },\n    });\n    return mapFields(newTypeMap, schema, {\n        [MapperKind.INPUT_OBJECT_FIELD]: inputFieldConfig => {\n            if (inputFieldConfig.defaultValue === undefined) {\n                return inputFieldConfig;\n            }\n            const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...inputFieldConfig,\n                    defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue),\n                };\n            }\n        },\n    });\n}\nfunction getNewType(newTypeMap, type) {\n    if (isListType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLList(newType) : null;\n    }\n    else if (isNonNullType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLNonNull(newType) : null;\n    }\n    else if (isNamedType(type)) {\n        const newType = newTypeMap[type.name];\n        return newType != null ? newType : null;\n    }\n    return null;\n}\nfunction mapFields(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) &&\n                !isInterfaceType(originalType) &&\n                !isInputObjectType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);\n            if (fieldMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);\n                if (mappedField === undefined) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                }\n                else if (Array.isArray(mappedField)) {\n                    const [newFieldName, newFieldConfig] = mappedField;\n                    if (newFieldConfig.astNode != null) {\n                        newFieldConfig.astNode = {\n                            ...newFieldConfig.astNode,\n                            name: {\n                                ...newFieldConfig.astNode.name,\n                                value: newFieldName,\n                            },\n                        };\n                    }\n                    newFieldConfigMap[newFieldName] =\n                        newFieldConfig === undefined ? originalFieldConfig : newFieldConfig;\n                }\n                else if (mappedField !== null) {\n                    newFieldConfigMap[fieldName] = mappedField;\n                }\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapArguments(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) && !isInterfaceType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const argumentMapper = getArgumentMapper(schemaMapper);\n            if (argumentMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const originalArgumentConfigMap = originalFieldConfig.args;\n                if (originalArgumentConfigMap == null) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const argumentNames = Object.keys(originalArgumentConfigMap);\n                if (!argumentNames.length) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const newArgumentConfigMap = {};\n                for (const argumentName of argumentNames) {\n                    const originalArgumentConfig = originalArgumentConfigMap[argumentName];\n                    const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);\n                    if (mappedArgument === undefined) {\n                        newArgumentConfigMap[argumentName] = originalArgumentConfig;\n                    }\n                    else if (Array.isArray(mappedArgument)) {\n                        const [newArgumentName, newArgumentConfig] = mappedArgument;\n                        newArgumentConfigMap[newArgumentName] = newArgumentConfig;\n                    }\n                    else if (mappedArgument !== null) {\n                        newArgumentConfigMap[argumentName] = mappedArgument;\n                    }\n                }\n                newFieldConfigMap[fieldName] = {\n                    ...originalFieldConfig,\n                    args: newArgumentConfigMap,\n                };\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else {\n                newTypeMap[typeName] = new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapDirectives(originalDirectives, schema, schemaMapper) {\n    const directiveMapper = getDirectiveMapper(schemaMapper);\n    if (directiveMapper == null) {\n        return originalDirectives.slice();\n    }\n    const newDirectives = [];\n    for (const directive of originalDirectives) {\n        const mappedDirective = directiveMapper(directive, schema);\n        if (mappedDirective === undefined) {\n            newDirectives.push(directive);\n        }\n        else if (mappedDirective !== null) {\n            newDirectives.push(mappedDirective);\n        }\n    }\n    return newDirectives;\n}\nfunction getTypeSpecifiers(schema, typeName) {\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.TYPE];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);\n        if (typeName === schema.getQueryType()?.name) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);\n        }\n        else if (typeName === schema.getMutationType()?.name) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);\n        }\n        else if (typeName === schema.getSubscriptionType()?.name) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);\n        }\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_TYPE);\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);\n    }\n    else if (isUnionType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);\n    }\n    else if (isEnumType(type)) {\n        specifiers.push(MapperKind.ENUM_TYPE);\n    }\n    else if (isScalarType(type)) {\n        specifiers.push(MapperKind.SCALAR_TYPE);\n    }\n    return specifiers;\n}\nfunction getTypeMapper(schema, schemaMapper, typeName) {\n    const specifiers = getTypeSpecifiers(schema, typeName);\n    let typeMapper;\n    const stack = [...specifiers];\n    while (!typeMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        typeMapper = schemaMapper[next];\n    }\n    return typeMapper != null ? typeMapper : null;\n}\nfunction getFieldSpecifiers(schema, typeName) {\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.FIELD];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);\n        if (typeName === schema.getQueryType()?.name) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);\n        }\n        else if (typeName === schema.getMutationType()?.name) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);\n        }\n        else if (typeName === schema.getSubscriptionType()?.name) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);\n        }\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_FIELD);\n    }\n    return specifiers;\n}\nfunction getFieldMapper(schema, schemaMapper, typeName) {\n    const specifiers = getFieldSpecifiers(schema, typeName);\n    let fieldMapper;\n    const stack = [...specifiers];\n    while (!fieldMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        // TODO: fix this as unknown cast\n        fieldMapper = schemaMapper[next];\n    }\n    return fieldMapper ?? null;\n}\nfunction getArgumentMapper(schemaMapper) {\n    const argumentMapper = schemaMapper[MapperKind.ARGUMENT];\n    return argumentMapper != null ? argumentMapper : null;\n}\nfunction getDirectiveMapper(schemaMapper) {\n    const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];\n    return directiveMapper != null ? directiveMapper : null;\n}\nfunction getEnumValueMapper(schemaMapper) {\n    const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];\n    return enumValueMapper != null ? enumValueMapper : null;\n}\nexport function correctASTNodes(type) {\n    if (isObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLObjectType(config);\n    }\n    else if (isInterfaceType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INTERFACE_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INTERFACE_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInterfaceType(config);\n    }\n    else if (isInputObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInputObjectType(config);\n    }\n    else if (isEnumType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const values = [];\n            for (const enumKey in config.values) {\n                const enumValueConfig = config.values[enumKey];\n                if (enumValueConfig.astNode != null) {\n                    values.push(enumValueConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                values,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                values: undefined,\n            }));\n        }\n        return new GraphQLEnumType(config);\n    }\n    else {\n        return type;\n    }\n}\n", "import { GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, } from 'graphql';\nimport { MapperKind, } from './Interfaces.js';\nimport { mapSchema } from './mapSchema.js';\nexport function filterSchema({ schema, typeFilter = () => true, fieldFilter = undefined, rootFieldFilter = undefined, objectFieldFilter = undefined, interfaceFieldFilter = undefined, inputObjectFieldFilter = undefined, argumentFilter = undefined, directiveFilter = undefined, enumValueFilter = undefined, }) {\n    const filteredSchema = mapSchema(schema, {\n        [MapperKind.QUERY]: (type) => filterRootFields(type, 'Query', rootFieldFilter, argumentFilter),\n        [MapperKind.MUTATION]: (type) => filterRootFields(type, 'Mutation', rootFieldFilter, argumentFilter),\n        [MapperKind.SUBSCRIPTION]: (type) => filterRootFields(type, 'Subscription', rootFieldFilter, argumentFilter),\n        [MapperKind.OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLObjectType, type, objectFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INTERFACE_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInterfaceType, type, interfaceFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INPUT_OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInputObjectType, type, inputObjectFieldFilter || fieldFilter)\n            : null,\n        [MapperKind.UNION_TYPE]: (type) => typeFilter(type.name, type) ? undefined : null,\n        [MapperKind.ENUM_TYPE]: (type) => typeFilter(type.name, type) ? undefined : null,\n        [MapperKind.SCALAR_TYPE]: (type) => typeFilter(type.name, type) ? undefined : null,\n        [MapperKind.DIRECTIVE]: directive => directiveFilter && !directiveFilter(directive.name, directive) ? null : undefined,\n        [MapperKind.ENUM_VALUE]: (valueConfig, typeName, _schema, externalValue) => enumValueFilter && !enumValueFilter(typeName, externalValue, valueConfig) ? null : undefined,\n    });\n    return filteredSchema;\n}\nfunction filterRootFields(type, operation, rootFieldFilter, argumentFilter) {\n    if (rootFieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && field.args) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new GraphQLObjectType(config);\n    }\n    return type;\n}\nfunction filterElementFields(ElementConstructor, type, fieldFilter, argumentFilter) {\n    if (fieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (fieldFilter && !fieldFilter(type.name, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && 'args' in field) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new ElementConstructor(config);\n    }\n}\n", "import { GraphQLList, GraphQLNonNull, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isUnionType, } from 'graphql';\n// Update any references to named schema types that disagree with the named\n// types found in schema.getTypeMap().\n//\n// healSchema and its callers (visitSchema/visitSchemaDirectives) all modify the schema in place.\n// Therefore, private variables (such as the stored implementation map and the proper root types)\n// are not updated.\n//\n// If this causes issues, the schema could be more aggressively healed as follows:\n//\n// healSchema(schema);\n// const config = schema.toConfig()\n// const healedSchema = new GraphQLSchema({\n//   ...config,\n//   query: schema.getType('<desired new root query type name>'),\n//   mutation: schema.getType('<desired new root mutation type name>'),\n//   subscription: schema.getType('<desired new root subscription type name>'),\n// });\n//\n// One can then also -- if necessary --  assign the correct private variables to the initial schema\n// as follows:\n// Object.assign(schema, healedSchema);\n//\n// These steps are not taken automatically to preserve backwards compatibility with graphql-tools v4.\n// See https://github.com/ardatan/graphql-tools/issues/1462\n//\n// They were briefly taken in v5, but can now be phased out as they were only required when other\n// areas of the codebase were using healSchema and visitSchema more extensively.\n//\nexport function healSchema(schema) {\n    healTypes(schema.getTypeMap(), schema.getDirectives());\n    return schema;\n}\nexport function healTypes(originalTypeMap, directives) {\n    const actualNamedTypeMap = Object.create(null);\n    // If any of the .name properties of the GraphQLNamedType objects in\n    // schema.getTypeMap() have changed, the keys of the type map need to\n    // be updated accordingly.\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const actualName = namedType.name;\n        if (actualName.startsWith('__')) {\n            continue;\n        }\n        if (actualNamedTypeMap[actualName] != null) {\n            console.warn(`Duplicate schema type name ${actualName} found; keeping the existing one found in the schema`);\n            continue;\n        }\n        actualNamedTypeMap[actualName] = namedType;\n        // Note: we are deliberately leaving namedType in the schema by its\n        // original name (which might be different from actualName), so that\n        // references by that name can be healed.\n    }\n    // Now add back every named type by its actual name.\n    for (const typeName in actualNamedTypeMap) {\n        const namedType = actualNamedTypeMap[typeName];\n        originalTypeMap[typeName] = namedType;\n    }\n    // Directive declaration argument types can refer to named types.\n    for (const decl of directives) {\n        decl.args = decl.args.filter(arg => {\n            arg.type = healType(arg.type);\n            return arg.type !== null;\n        });\n    }\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        // Heal all named types, except for dangling references, kept only to redirect.\n        if (!typeName.startsWith('__') && typeName in actualNamedTypeMap) {\n            if (namedType != null) {\n                healNamedType(namedType);\n            }\n        }\n    }\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__') && !(typeName in actualNamedTypeMap)) {\n            delete originalTypeMap[typeName];\n        }\n    }\n    function healNamedType(type) {\n        if (isObjectType(type)) {\n            healFields(type);\n            healInterfaces(type);\n            return;\n        }\n        else if (isInterfaceType(type)) {\n            healFields(type);\n            if ('getInterfaces' in type) {\n                healInterfaces(type);\n            }\n            return;\n        }\n        else if (isUnionType(type)) {\n            healUnderlyingTypes(type);\n            return;\n        }\n        else if (isInputObjectType(type)) {\n            healInputFields(type);\n            return;\n        }\n        else if (isLeafType(type)) {\n            return;\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function healFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.args\n                .map(arg => {\n                arg.type = healType(arg.type);\n                return arg.type === null ? null : arg;\n            })\n                .filter(Boolean);\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healInterfaces(type) {\n        if ('getInterfaces' in type) {\n            const interfaces = type.getInterfaces();\n            interfaces.push(...interfaces\n                .splice(0)\n                .map(iface => healType(iface))\n                .filter(Boolean));\n        }\n    }\n    function healInputFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healUnderlyingTypes(type) {\n        const types = type.getTypes();\n        types.push(...types\n            .splice(0)\n            .map(t => healType(t))\n            .filter(Boolean));\n    }\n    function healType(type) {\n        // Unwrap the two known wrapper types\n        if (isListType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLList(healedType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLNonNull(healedType) : null;\n        }\n        else if (isNamedType(type)) {\n            // If a type annotation on a field or an argument or a union member is\n            // any `GraphQLNamedType` with a `name`, then it must end up identical\n            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source\n            // of truth for all named schema types.\n            // Note that new types can still be simply added by adding a field, as\n            // the official type will be undefined, not null.\n            const officialType = originalTypeMap[type.name];\n            if (officialType && type !== officialType) {\n                return officialType;\n            }\n        }\n        return type;\n    }\n}\n", "import { GraphQLScalarType, isEnumType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql';\nexport function getResolversFromSchema(schema, \n// Include default merged resolvers\nincludeDefaultMergedResolver) {\n    const resolvers = Object.create(null);\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        if (!typeName.startsWith('__')) {\n            const type = typeMap[typeName];\n            if (isScalarType(type)) {\n                if (!isSpecifiedScalarType(type)) {\n                    const config = type.toConfig();\n                    delete config.astNode; // avoid AST duplication elsewhere\n                    resolvers[typeName] = new GraphQLScalarType(config);\n                }\n            }\n            else if (isEnumType(type)) {\n                resolvers[typeName] = {};\n                const values = type.getValues();\n                for (const value of values) {\n                    resolvers[typeName][value.name] = value.value;\n                }\n            }\n            else if (isInterfaceType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isUnionType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isObjectType(type)) {\n                resolvers[typeName] = {};\n                if (type.isTypeOf != null) {\n                    resolvers[typeName].__isTypeOf = type.isTypeOf;\n                }\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    if (field.subscribe != null) {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].subscribe = field.subscribe;\n                    }\n                    if (field.resolve != null && field.resolve?.name !== 'defaultFieldResolver') {\n                        switch (field.resolve?.name) {\n                            case 'defaultMergedResolver':\n                                if (!includeDefaultMergedResolver) {\n                                    continue;\n                                }\n                                break;\n                            case 'defaultFieldResolver':\n                                continue;\n                        }\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].resolve = field.resolve;\n                    }\n                }\n            }\n        }\n    }\n    return resolvers;\n}\n", "import { getNamedType, isObjectType } from 'graphql';\nexport function forEachField(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!getNamedType(type).name.startsWith('__') && isObjectType(type)) {\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                fn(field, typeName, fieldName);\n            }\n        }\n    }\n}\n", "import { getNamedType, isInputObjectType, isObjectType } from 'graphql';\nexport function forEachDefaultValue(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if (!getNamedType(type).name.startsWith('__')) {\n            if (isObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    for (const arg of field.args) {\n                        arg.defaultValue = fn(arg.type, arg.defaultValue);\n                    }\n                }\n            }\n            else if (isInputObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    field.defaultValue = fn(field.type, field.defaultValue);\n                }\n            }\n        }\n    }\n}\n", "// addTypes uses toConfig to create a new schema with a new or replaced\n// type or directive. Rewiring is employed so that the replaced type can be\n// reconnected with the existing types.\n//\n// Rewiring is employed even for new types or directives as a convenience, so\n// that type references within the new type or directive do not have to be to\n// the identical objects within the original schema.\n//\n// In fact, the type references could even be stub types with entirely different\n// fields, as long as the type references share the same name as the desired\n// type within the original schema's type map.\n//\n// This makes it easy to perform simple schema operations (e.g. adding a new\n// type with a fiew fields removed from an existing type) that could normally be\n// performed by using toConfig directly, but is blocked if any intervening\n// more advanced schema operations have caused the types to be recreated via\n// rewiring.\n//\n// Type recreation happens, for example, with every use of mapSchema, as the\n// types are always rewired. If fields are selected and removed using\n// mapSchema, adding those fields to a new type can no longer be simply done\n// by toConfig, as the types are not the identical JavaScript objects, and\n// schema creation will fail with errors referencing multiple types with the\n// same names.\n//\n// enhanceSchema can fill this gap by adding an additional round of rewiring.\n//\nimport { GraphQLSchema, isDirective, isNamedType, } from 'graphql';\nimport { getObjectTypeFromTypeMap } from './getObjectTypeFromTypeMap.js';\nimport { rewireTypes } from './rewire.js';\nexport function addTypes(schema, newTypesOrDirectives) {\n    const config = schema.toConfig();\n    const originalTypeMap = {};\n    for (const type of config.types) {\n        originalTypeMap[type.name] = type;\n    }\n    const originalDirectiveMap = {};\n    for (const directive of config.directives) {\n        originalDirectiveMap[directive.name] = directive;\n    }\n    for (const newTypeOrDirective of newTypesOrDirectives) {\n        if (isNamedType(newTypeOrDirective)) {\n            originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n        else if (isDirective(newTypeOrDirective)) {\n            originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n    }\n    const { typeMap, directives } = rewireTypes(originalTypeMap, Object.values(originalDirectiveMap));\n    return new GraphQLSchema({\n        ...config,\n        query: getObjectTypeFromTypeMap(typeMap, schema.getQueryType()),\n        mutation: getObjectTypeFromTypeMap(typeMap, schema.getMutationType()),\n        subscription: getObjectTypeFromTypeMap(typeMap, schema.getSubscriptionType()),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\n", "import { getNamedType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql';\nimport { getImplementingTypes } from './get-implementing-types.js';\nimport { MapperKind } from './Interfaces.js';\nimport { mapSchema } from './mapSchema.js';\nimport { getRootTypes } from './rootTypes.js';\n/**\n * Prunes the provided schema, removing unused and empty types\n * @param schema The schema to prune\n * @param options Additional options for removing unused types from the schema\n */\nexport function pruneSchema(schema, options = {}) {\n    const { skipEmptyCompositeTypePruning, skipEmptyUnionPruning, skipPruning, skipUnimplementedInterfacesPruning, skipUnusedTypesPruning, } = options;\n    let prunedTypes = []; // Pruned types during mapping\n    let prunedSchema = schema;\n    do {\n        let visited = visitSchema(prunedSchema);\n        // Custom pruning  was defined, so we need to pre-emptively revisit the schema accounting for this\n        if (skipPruning) {\n            const revisit = [];\n            for (const typeName in prunedSchema.getTypeMap()) {\n                if (typeName.startsWith('__')) {\n                    continue;\n                }\n                const type = prunedSchema.getType(typeName);\n                // if we want to skip pruning for this type, add it to the list of types to revisit\n                if (type && skipPruning(type)) {\n                    revisit.push(typeName);\n                }\n            }\n            visited = visitQueue(revisit, prunedSchema, visited); // visit again\n        }\n        prunedTypes = [];\n        prunedSchema = mapSchema(prunedSchema, {\n            [MapperKind.TYPE]: type => {\n                if (!visited.has(type.name) && !isSpecifiedScalarType(type)) {\n                    if (isUnionType(type) ||\n                        isInputObjectType(type) ||\n                        isInterfaceType(type) ||\n                        isObjectType(type) ||\n                        isScalarType(type)) {\n                        // skipUnusedTypesPruning: skip pruning unused types\n                        if (skipUnusedTypesPruning) {\n                            return type;\n                        }\n                        // skipEmptyUnionPruning: skip pruning empty unions\n                        if (isUnionType(type) &&\n                            skipEmptyUnionPruning &&\n                            !Object.keys(type.getTypes()).length) {\n                            return type;\n                        }\n                        if (isInputObjectType(type) || isInterfaceType(type) || isObjectType(type)) {\n                            // skipEmptyCompositeTypePruning: skip pruning object types or interfaces with no fields\n                            if (skipEmptyCompositeTypePruning && !Object.keys(type.getFields()).length) {\n                                return type;\n                            }\n                        }\n                        // skipUnimplementedInterfacesPruning: skip pruning interfaces that are not implemented by any other types\n                        if (isInterfaceType(type) && skipUnimplementedInterfacesPruning) {\n                            return type;\n                        }\n                    }\n                    prunedTypes.push(type.name);\n                    visited.delete(type.name);\n                    return null;\n                }\n                return type;\n            },\n        });\n    } while (prunedTypes.length); // Might have empty types and need to prune again\n    return prunedSchema;\n}\nfunction visitSchema(schema) {\n    const queue = []; // queue of nodes to visit\n    // Grab the root types and start there\n    for (const type of getRootTypes(schema)) {\n        queue.push(type.name);\n    }\n    return visitQueue(queue, schema);\n}\nfunction visitQueue(queue, schema, visited = new Set()) {\n    // Interfaces encountered that are field return types need to be revisited to add their implementations\n    const revisit = new Map();\n    // Navigate all types starting with pre-queued types (root types)\n    while (queue.length) {\n        const typeName = queue.pop();\n        // Skip types we already visited unless it is an interface type that needs revisiting\n        if (visited.has(typeName) && revisit[typeName] !== true) {\n            continue;\n        }\n        const type = schema.getType(typeName);\n        if (type) {\n            // Get types for union\n            if (isUnionType(type)) {\n                queue.push(...type.getTypes().map(type => type.name));\n            }\n            // If it is an interface and it is a returned type, grab all implementations so we can use proper __typename in fragments\n            if (isInterfaceType(type) && revisit[typeName] === true) {\n                queue.push(...getImplementingTypes(type.name, schema));\n                // No need to revisit this interface again\n                revisit[typeName] = false;\n            }\n            if (isEnumType(type)) {\n                // Visit enum values directives argument types\n                queue.push(...type.getValues().flatMap(value => getDirectivesArgumentsTypeNames(schema, value)));\n            }\n            // Visit interfaces this type is implementing if they haven't been visited yet\n            if ('getInterfaces' in type) {\n                // Only pushes to queue to visit but not return types\n                queue.push(...type.getInterfaces().map(iface => iface.name));\n            }\n            // If the type has fields visit those field types\n            if ('getFields' in type) {\n                const fields = type.getFields();\n                const entries = Object.entries(fields);\n                if (!entries.length) {\n                    continue;\n                }\n                for (const [, field] of entries) {\n                    if (isObjectType(type)) {\n                        // Visit arg types and arg directives arguments types\n                        queue.push(...field.args.flatMap(arg => {\n                            const typeNames = [getNamedType(arg.type).name];\n                            typeNames.push(...getDirectivesArgumentsTypeNames(schema, arg));\n                            return typeNames;\n                        }));\n                    }\n                    const namedType = getNamedType(field.type);\n                    queue.push(namedType.name);\n                    queue.push(...getDirectivesArgumentsTypeNames(schema, field));\n                    // Interfaces returned on fields need to be revisited to add their implementations\n                    if (isInterfaceType(namedType) && !(namedType.name in revisit)) {\n                        revisit[namedType.name] = true;\n                    }\n                }\n            }\n            queue.push(...getDirectivesArgumentsTypeNames(schema, type));\n            visited.add(typeName); // Mark as visited (and therefore it is used and should be kept)\n        }\n    }\n    return visited;\n}\nfunction getDirectivesArgumentsTypeNames(schema, directableObj) {\n    const argTypeNames = new Set();\n    if (directableObj.astNode?.directives) {\n        for (const directiveNode of directableObj.astNode.directives) {\n            const directive = schema.getDirective(directiveNode.name.value);\n            if (directive?.args) {\n                for (const arg of directive.args) {\n                    const argType = getNamedType(arg.type);\n                    argTypeNames.add(argType.name);\n                }\n            }\n        }\n    }\n    if (directableObj.extensions?.['directives']) {\n        for (const directiveName in directableObj.extensions['directives']) {\n            const directive = schema.getDirective(directiveName);\n            if (directive?.args) {\n                for (const arg of directive.args) {\n                    const argType = getNamedType(arg.type);\n                    argTypeNames.add(argType.name);\n                }\n            }\n        }\n    }\n    return [...argTypeNames];\n}\n", "import { isSome } from './helpers.js';\nexport function mergeDeep(sources, respectPrototype = false, respectArrays = false, respectArrayLength = false) {\n    let expectedLength;\n    let allArrays = true;\n    const areArraysInTheSameLength = sources.every(source => {\n        if (Array.isArray(source)) {\n            if (expectedLength === undefined) {\n                expectedLength = source.length;\n                return true;\n            }\n            else if (expectedLength === source.length) {\n                return true;\n            }\n        }\n        else {\n            allArrays = false;\n        }\n        return false;\n    });\n    if (respectArrayLength && areArraysInTheSameLength) {\n        return new Array(expectedLength).fill(null).map((_, index) => mergeDeep(sources.map(source => source[index]), respectPrototype, respectArrays, respectArrayLength));\n    }\n    if (allArrays) {\n        return sources.flat(1);\n    }\n    let output;\n    let firstObjectSource;\n    if (respectPrototype) {\n        firstObjectSource = sources.find(source => isObject(source));\n        if (output == null) {\n            output = {};\n        }\n        if (firstObjectSource) {\n            Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(firstObjectSource)));\n        }\n    }\n    for (const source of sources) {\n        if (isObject(source)) {\n            if (firstObjectSource) {\n                const outputPrototype = Object.getPrototypeOf(output);\n                const sourcePrototype = Object.getPrototypeOf(source);\n                if (sourcePrototype) {\n                    for (const key of Object.getOwnPropertyNames(sourcePrototype)) {\n                        const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);\n                        if (isSome(descriptor)) {\n                            Object.defineProperty(outputPrototype, key, descriptor);\n                        }\n                    }\n                }\n            }\n            for (const key in source) {\n                if (output == null) {\n                    output = {};\n                }\n                if (key in output) {\n                    output[key] = mergeDeep([output[key], source[key]], respectPrototype, respectArrays, respectArrayLength);\n                }\n                else {\n                    output[key] = source[key];\n                }\n            }\n        }\n        else if (Array.isArray(source)) {\n            if (!Array.isArray(output)) {\n                output = source;\n            }\n            else {\n                output = mergeDeep([output, source], respectPrototype, respectArrays, respectArrayLength);\n            }\n        }\n        else {\n            output = source;\n        }\n    }\n    return output;\n}\nfunction isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n", "import { parse } from 'graphql';\nexport function parseSelectionSet(selectionSet, options) {\n    const query = parse(selectionSet, options).definitions[0];\n    return query.selectionSet;\n}\n", "/**\n * Get the key under which the result of this resolver will be placed in the response JSON. Basically, just\n * resolves aliases.\n * @param info The info argument to the resolver.\n */\nexport function getResponseKeyFromInfo(info) {\n    return info.fieldNodes[0].alias != null ? info.fieldNodes[0].alias.value : info.fieldName;\n}\n", "import { GraphQLObjectType, } from 'graphql';\nimport { addTypes } from './addTypes.js';\nimport { MapperKind } from './Interfaces.js';\nimport { correctASTNodes, mapSchema } from './mapSchema.js';\nexport function appendObjectFields(schema, typeName, additionalFields) {\n    if (schema.getType(typeName) == null) {\n        return addTypes(schema, [\n            new GraphQLObjectType({\n                name: typeName,\n                fields: additionalFields,\n            }),\n        ]);\n    }\n    return mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n                }\n                for (const fieldName in additionalFields) {\n                    newFieldConfigMap[fieldName] = additionalFields[fieldName];\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n}\nexport function removeObjectFields(schema, typeName, testFn) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\nexport function selectObjectFields(schema, typeName, testFn) {\n    const selectedFields = {};\n    mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        selectedFields[fieldName] = originalFieldConfig;\n                    }\n                }\n            }\n            return undefined;\n        },\n    });\n    return selectedFields;\n}\nexport function modifyObjectFields(schema, typeName, testFn, newFields) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                for (const fieldName in newFields) {\n                    const fieldConfig = newFields[fieldName];\n                    newFieldConfigMap[fieldName] = fieldConfig;\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\n", "import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isUnionType, } from 'graphql';\nexport function renameType(type, newTypeName) {\n    if (isObjectType(type)) {\n        return new GraphQLObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInterfaceType(type)) {\n        return new GraphQLInterfaceType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isUnionType(type)) {\n        return new GraphQLUnionType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInputObjectType(type)) {\n        return new GraphQLInputObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isEnumType(type)) {\n        return new GraphQLEnumType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isScalarType(type)) {\n        return new GraphQLScalarType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    throw new Error(`Unknown type ${type}.`);\n}\n", "function isPromise(val) {\n    return val?.then != null;\n}\nexport function fakeRejectPromise(error) {\n    if (isPromise(error)) {\n        return error;\n    }\n    return {\n        then() {\n            return this;\n        },\n        catch(reject) {\n            if (reject) {\n                return fakePromise(reject(error));\n            }\n            return this;\n        },\n        finally(cb) {\n            if (cb) {\n                cb();\n            }\n            return this;\n        },\n        [Symbol.toStringTag]: 'Promise',\n    };\n}\nexport function fakePromise(value) {\n    if (isPromise(value)) {\n        return value;\n    }\n    // Write a fake promise to avoid the promise constructor\n    // being called with `new Promise` in the browser.\n    return {\n        then(resolve) {\n            if (resolve) {\n                const callbackResult = resolve(value);\n                if (isPromise(callbackResult)) {\n                    return callbackResult;\n                }\n                return fakePromise(callbackResult);\n            }\n            return this;\n        },\n        catch() {\n            return this;\n        },\n        finally(cb) {\n            if (cb) {\n                const callbackResult = cb();\n                if (isPromise(callbackResult)) {\n                    return callbackResult.then(() => value);\n                }\n                return fakePromise(value);\n            }\n            return this;\n        },\n        [Symbol.toStringTag]: 'Promise',\n    };\n}\n", "import { fakePromise, fakeRejectPromise } from './fakePromise.js';\nimport { mapMaybePromise } from './map-maybe-promise.js';\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterator, onNext, onError, onEnd) {\n    if (Symbol.asyncIterator in iterator) {\n        iterator = iterator[Symbol.asyncIterator]();\n    }\n    let $return;\n    let abruptClose;\n    let onEndWithValue;\n    if (onEnd) {\n        let onEndWithValueResult /** R in onEndWithValue */;\n        onEndWithValue = value => {\n            onEndWithValueResult ||= mapMaybePromise(onEnd(), () => value);\n            return onEndWithValueResult;\n        };\n    }\n    if (typeof iterator.return === 'function') {\n        $return = iterator.return;\n        abruptClose = (error) => {\n            const rethrow = () => {\n                throw error;\n            };\n            return $return.call(iterator).then(rethrow, rethrow);\n        };\n    }\n    function mapResult(result) {\n        if (result.done) {\n            return onEndWithValue ? onEndWithValue(result) : result;\n        }\n        return mapMaybePromise(result.value, value => mapMaybePromise(onNext(value), iteratorResult, abruptClose));\n    }\n    let mapReject;\n    if (onError) {\n        let onErrorResult;\n        // Capture rejectCallback to ensure it cannot be null.\n        const reject = onError;\n        mapReject = (error) => {\n            onErrorResult ||= mapMaybePromise(error, error => mapMaybePromise(reject(error), iteratorResult, abruptClose));\n            return onErrorResult;\n        };\n    }\n    return {\n        next() {\n            return iterator.next().then(mapResult, mapReject);\n        },\n        return() {\n            const res$ = $return\n                ? $return.call(iterator).then(mapResult, mapReject)\n                : fakePromise({ value: undefined, done: true });\n            return onEndWithValue ? res$.then(onEndWithValue) : res$;\n        },\n        throw(error) {\n            if (typeof iterator.throw === 'function') {\n                return iterator.throw(error).then(mapResult, mapReject);\n            }\n            if (abruptClose) {\n                return abruptClose(error);\n            }\n            return fakeRejectPromise(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\nfunction iteratorResult(value) {\n    return { value, done: false };\n}\n", "import { Kind } from 'graphql';\nimport { astFromType } from './astFromType.js';\nexport function updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {\n    argumentNodes[argName] = {\n        kind: Kind.ARGUMENT,\n        name: {\n            kind: Kind.NAME,\n            value: argName,\n        },\n        value: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n    };\n    variableDefinitionsMap[varName] = {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n        type: astFromType(type),\n    };\n    if (value !== undefined) {\n        variableValues[varName] = value;\n        return;\n    }\n    // including the variable in the map with value of `undefined`\n    // will actually be translated by graphql-js into `null`\n    // see https://github.com/graphql/graphql-js/issues/2533\n    if (varName in variableValues) {\n        delete variableValues[varName];\n    }\n}\nexport function createVariableNameGenerator(variableDefinitionMap) {\n    let varCounter = 0;\n    return (argName) => {\n        let varName;\n        do {\n            varName = varCounter === 0 ? argName : `_v${varCounter.toString()}_${argName}`;\n            varCounter++;\n        } while (varName in variableDefinitionMap);\n        return varName;\n    };\n}\n", "import { doTypesOverlap, isCompositeType } from 'graphql';\nexport function implementsAbstractType(schema, typeA, typeB) {\n    if (typeB == null || typeA == null) {\n        return false;\n    }\n    else if (typeA === typeB) {\n        return true;\n    }\n    else if (isCompositeType(typeA) && isCompositeType(typeB)) {\n        return doTypesOverlap(schema, typeA, typeB);\n    }\n    return false;\n}\n", "import { fakePromise } from './fakePromise.js';\nexport function observableToAsyncIterable(observable) {\n    const pullQueue = [];\n    const pushQueue = [];\n    let listening = true;\n    const pushValue = (value) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value, done: false });\n        }\n        else {\n            pushQueue.push({ value, done: false });\n        }\n    };\n    const pushError = (error) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value: { errors: [error] }, done: false });\n        }\n        else {\n            pushQueue.push({ value: { errors: [error] }, done: false });\n        }\n    };\n    const pushDone = () => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ done: true });\n        }\n        else {\n            pushQueue.push({ done: true });\n        }\n    };\n    const pullValue = () => new Promise(resolve => {\n        if (pushQueue.length !== 0) {\n            const element = pushQueue.shift();\n            // either {value: {errors: [...]}} or {value: ...}\n            resolve(element);\n        }\n        else {\n            pullQueue.push(resolve);\n        }\n    });\n    const subscription = observable.subscribe({\n        next(value) {\n            return pushValue(value);\n        },\n        error(err) {\n            return pushError(err);\n        },\n        complete() {\n            return pushDone();\n        },\n    });\n    const emptyQueue = () => {\n        if (listening) {\n            listening = false;\n            subscription.unsubscribe();\n            for (const resolve of pullQueue) {\n                resolve({ value: undefined, done: true });\n            }\n            pullQueue.length = 0;\n            pushQueue.length = 0;\n        }\n    };\n    return {\n        next() {\n            // return is a defined method, so it is safe to call it.\n            return listening ? pullValue() : this.return();\n        },\n        return() {\n            emptyQueue();\n            return fakePromise({ value: undefined, done: true });\n        },\n        throw(error) {\n            emptyQueue();\n            return Promise.reject(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n", "/**\n * ES6 Map with additional `add` method to accumulate items.\n */\nexport class AccumulatorMap extends Map {\n    get [Symbol.toStringTag]() {\n        return 'AccumulatorMap';\n    }\n    add(key, item) {\n        const group = this.get(key);\n        if (group === undefined) {\n            this.set(key, [item]);\n        }\n        else {\n            group.push(item);\n        }\n    }\n}\n", "import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLInt, GraphQLNonNull, GraphQLString, } from 'graphql';\n/**\n * Used to conditionally defer fragments.\n */\nexport const GraphQLDeferDirective = new GraphQLDirective({\n    name: 'defer',\n    description: 'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Deferred when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n    },\n});\n/**\n * Used to conditionally stream list fields.\n */\nexport const GraphQLStreamDirective = new GraphQLDirective({\n    name: 'stream',\n    description: 'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FIELD],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Stream when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n        initialCount: {\n            defaultValue: 0,\n            type: GraphQLInt,\n            description: 'Number of items to return immediately',\n        },\n    },\n});\n", "import { getDirectiveValues, GraphQLIncludeDirective, GraphQLSkipDirective, isAbstractType, Kind, typeFromAST, } from 'graphql';\nimport { AccumulatorMap } from './AccumulatorMap.js';\nimport { GraphQLDeferDirective } from './directives.js';\nimport { memoize5 } from './memoize.js';\nfunction collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case Kind.FIELD: {\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                fields.add(getFieldEntryKey(selection), selection);\n                break;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                if (!shouldIncludeNode(variableValues, selection) ||\n                    !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (visitedFragmentNames.has(fragName) && !defer) {\n                    continue;\n                }\n                const fragment = fragments[fragName];\n                if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n                    continue;\n                }\n                if (!defer) {\n                    visitedFragmentNames.add(fragName);\n                }\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n        }\n    }\n}\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n */\nexport function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {\n    const fields = new AccumulatorMap();\n    const patches = [];\n    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, new Set());\n    return { fields, patches };\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\nexport function shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n    if (skip?.['if'] === true) {\n        return false;\n    }\n    const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n    if (include?.['if'] === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nexport function doesFragmentConditionMatch(schema, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = typeFromAST(schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (isAbstractType(conditionalType)) {\n        const possibleTypes = schema.getPossibleTypes(conditionalType);\n        return possibleTypes.includes(type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nexport function getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Returns an object containing the `@defer` arguments if a field should be\n * deferred based on the experimental flag, defer directive present and\n * not disabled by the \"if\" argument.\n */\nexport function getDeferValues(variableValues, node) {\n    const defer = getDirectiveValues(GraphQLDeferDirective, node, variableValues);\n    if (!defer) {\n        return;\n    }\n    if (defer['if'] === false) {\n        return;\n    }\n    return {\n        label: typeof defer['label'] === 'string' ? defer['label'] : undefined,\n    };\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n */\nexport const collectSubFields = memoize5(function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {\n    const subFieldNodes = new AccumulatorMap();\n    const visitedFragmentNames = new Set();\n    const subPatches = [];\n    const subFieldsAndPatches = {\n        fields: subFieldNodes,\n        patches: subPatches,\n    };\n    for (const node of fieldNodes) {\n        if (node.selectionSet) {\n            collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, subPatches, visitedFragmentNames);\n        }\n    }\n    return subFieldsAndPatches;\n});\n", "import { getOperationAST } from 'graphql';\nimport { memoize1 } from './memoize.js';\nexport function getOperationASTFromDocument(documentNode, operationName) {\n    const doc = getOperationAST(documentNode, operationName);\n    if (!doc) {\n        throw new Error(`Cannot infer operation ${operationName || ''}`);\n    }\n    return doc;\n}\nexport const getOperationASTFromRequest = memoize1(function getOperationASTFromRequest(request) {\n    return getOperationASTFromDocument(request.document, request.operationName);\n});\n", "import { getNullableType, isAbstractType, isListType, isObjectType, Kind, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql';\nimport { collectFields, collectSubFields } from './collectFields.js';\nimport { getOperationASTFromRequest } from './getOperationASTFromRequest.js';\nexport function visitData(data, enter, leave) {\n    if (Array.isArray(data)) {\n        return data.map(value => visitData(value, enter, leave));\n    }\n    else if (typeof data === 'object') {\n        const newData = enter != null ? enter(data) : data;\n        if (newData != null) {\n            for (const key in newData) {\n                const value = newData[key];\n                Object.defineProperty(newData, key, {\n                    value: visitData(value, enter, leave),\n                });\n            }\n        }\n        return leave != null ? leave(newData) : newData;\n    }\n    return data;\n}\nexport function visitErrors(errors, visitor) {\n    return errors.map(error => visitor(error));\n}\nexport function visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {\n    const fragments = request.document.definitions.reduce((acc, def) => {\n        if (def.kind === Kind.FRAGMENT_DEFINITION) {\n            acc[def.name.value] = def;\n        }\n        return acc;\n    }, {});\n    const variableValues = request.variables || {};\n    const errorInfo = {\n        segmentInfoMap: new Map(),\n        unpathedErrors: new Set(),\n    };\n    const data = result.data;\n    const errors = result.errors;\n    const visitingErrors = errors != null && errorVisitorMap != null;\n    const operationDocumentNode = getOperationASTFromRequest(request);\n    if (data != null && operationDocumentNode != null) {\n        result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : undefined, errorInfo);\n    }\n    if (errors != null && errorVisitorMap) {\n        result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n    }\n    return result;\n}\nfunction visitErrorsByType(errors, errorVisitorMap, errorInfo) {\n    const segmentInfoMap = errorInfo.segmentInfoMap;\n    const unpathedErrors = errorInfo.unpathedErrors;\n    const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n    return errors.map(originalError => {\n        const pathSegmentsInfo = segmentInfoMap.get(originalError);\n        const newError = pathSegmentsInfo == null\n            ? originalError\n            : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n                const typeName = segmentInfo.type.name;\n                const typeVisitorMap = errorVisitorMap[typeName];\n                if (typeVisitorMap == null) {\n                    return acc;\n                }\n                const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n                return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n            }, originalError);\n        if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n            return unpathedErrorVisitor(newError);\n        }\n        return newError;\n    });\n}\nfunction getOperationRootType(schema, operationDef) {\n    switch (operationDef.operation) {\n        case 'query':\n            return schema.getQueryType();\n        case 'mutation':\n            return schema.getMutationType();\n        case 'subscription':\n            return schema.getSubscriptionType();\n    }\n}\nfunction visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {\n    const operationRootType = getOperationRootType(schema, operation);\n    const { fields: collectedFields } = collectFields(schema, fragments, variableValues, operationRootType, operation.selectionSet);\n    return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);\n}\nfunction visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    const fieldMap = type.getFields();\n    const typeVisitorMap = resultVisitorMap?.[type.name];\n    const enterObject = typeVisitorMap?.__enter;\n    const newObject = enterObject != null ? enterObject(object) : object;\n    let sortedErrors;\n    let errorMap = null;\n    if (errors != null) {\n        sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n        errorMap = sortedErrors.errorMap;\n        for (const error of sortedErrors.unpathedErrors) {\n            errorInfo.unpathedErrors.add(error);\n        }\n    }\n    for (const [responseKey, subFieldNodes] of fieldNodeMap) {\n        const fieldName = subFieldNodes[0].name.value;\n        let fieldType = fieldMap[fieldName]?.type;\n        if (fieldType == null) {\n            switch (fieldName) {\n                case '__typename':\n                    fieldType = TypeNameMetaFieldDef.type;\n                    break;\n                case '__schema':\n                    fieldType = SchemaMetaFieldDef.type;\n                    break;\n                case '__type':\n                    fieldType = TypeMetaFieldDef.type;\n                    break;\n            }\n        }\n        const newPathIndex = pathIndex + 1;\n        let fieldErrors;\n        if (errorMap) {\n            fieldErrors = errorMap[responseKey];\n            if (fieldErrors != null) {\n                delete errorMap[responseKey];\n            }\n            addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n        }\n        const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);\n        updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n    }\n    const oldTypename = newObject.__typename;\n    if (oldTypename != null) {\n        updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n    }\n    if (errorMap) {\n        for (const errorsKey in errorMap) {\n            const errors = errorMap[errorsKey];\n            for (const error of errors) {\n                errorInfo.unpathedErrors.add(error);\n            }\n        }\n    }\n    const leaveObject = typeVisitorMap?.__leave;\n    return leaveObject != null ? leaveObject(newObject) : newObject;\n}\nfunction updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {\n    if (typeVisitorMap == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const fieldVisitor = typeVisitorMap[fieldName];\n    if (fieldVisitor == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const visitedValue = fieldVisitor(newValue);\n    if (visitedValue === undefined) {\n        delete object[responseKey];\n        return;\n    }\n    object[responseKey] = visitedValue;\n}\nfunction visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    return list.map(listMember => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));\n}\nfunction visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(returnType);\n    if (isListType(nullableType)) {\n        return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isAbstractType(nullableType)) {\n        const finalType = schema.getType(value.__typename);\n        let { fields: collectedFields, patches } = collectSubFields(schema, fragments, variableValues, finalType, fieldNodes);\n        if (patches.length) {\n            collectedFields = new Map(collectedFields);\n            for (const patch of patches) {\n                for (const [responseKey, fields] of patch.fields) {\n                    const existingFields = collectedFields.get(responseKey);\n                    if (existingFields) {\n                        existingFields.push(...fields);\n                    }\n                    else {\n                        collectedFields.set(responseKey, fields);\n                    }\n                }\n            }\n        }\n        return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isObjectType(nullableType)) {\n        let { fields: collectedFields, patches } = collectSubFields(schema, fragments, variableValues, nullableType, fieldNodes);\n        if (patches.length) {\n            collectedFields = new Map(collectedFields);\n            for (const patch of patches) {\n                for (const [responseKey, fields] of patch.fields) {\n                    const existingFields = collectedFields.get(responseKey);\n                    if (existingFields) {\n                        existingFields.push(...fields);\n                    }\n                    else {\n                        collectedFields.set(responseKey, fields);\n                    }\n                }\n            }\n        }\n        return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    const typeVisitorMap = resultVisitorMap?.[nullableType.name];\n    if (typeVisitorMap == null) {\n        return value;\n    }\n    const visitedValue = typeVisitorMap(value);\n    return visitedValue === undefined ? value : visitedValue;\n}\nfunction sortErrorsByPathSegment(errors, pathIndex) {\n    const errorMap = Object.create(null);\n    const unpathedErrors = new Set();\n    for (const error of errors) {\n        const pathSegment = error.path?.[pathIndex];\n        if (pathSegment == null) {\n            unpathedErrors.add(error);\n            continue;\n        }\n        if (pathSegment in errorMap) {\n            errorMap[pathSegment].push(error);\n        }\n        else {\n            errorMap[pathSegment] = [error];\n        }\n    }\n    return {\n        errorMap,\n        unpathedErrors,\n    };\n}\nfunction addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {\n    for (const error of errors) {\n        const segmentInfo = {\n            type,\n            fieldName,\n            pathIndex,\n        };\n        const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n        if (pathSegmentsInfo == null) {\n            errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n        }\n        else {\n            pathSegmentsInfo.push(segmentInfo);\n        }\n    }\n}\n", "export function valueMatchesCriteria(value, criteria) {\n    if (value == null) {\n        return value === criteria;\n    }\n    else if (Array.isArray(value)) {\n        return (Array.isArray(criteria) &&\n            value.every((val, index) => valueMatchesCriteria(val, criteria[index])));\n    }\n    else if (typeof value === 'object') {\n        return (typeof criteria === 'object' &&\n            criteria &&\n            Object.keys(criteria).every(propertyName => valueMatchesCriteria(value[propertyName], criteria[propertyName])));\n    }\n    else if (criteria instanceof RegExp) {\n        return criteria.test(value);\n    }\n    return value === criteria;\n}\n", "export function isAsyncIterable(value) {\n    return value?.[Symbol.asyncIterator] != null;\n}\n", "import { Kind } from 'graphql';\nexport function isDocumentNode(object) {\n    return object && typeof object === 'object' && 'kind' in object && object.kind === Kind.DOCUMENT;\n}\n", "", "import { memoize2 } from './memoize.js';\nasync function defaultAsyncIteratorReturn(value) {\n    return { value, done: true };\n}\nconst proxyMethodFactory = memoize2(function proxyMethodFactory(target, targetMethod) {\n    return function proxyMethod(...args) {\n        return Reflect.apply(targetMethod, target, args);\n    };\n});\nexport function getAsyncIteratorWithCancel(asyncIterator, onCancel) {\n    return new Proxy(asyncIterator, {\n        has(asyncIterator, prop) {\n            if (prop === 'return') {\n                return true;\n            }\n            return Reflect.has(asyncIterator, prop);\n        },\n        get(asyncIterator, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterator, prop, receiver);\n            if (prop === 'return') {\n                const existingReturn = existingPropValue || defaultAsyncIteratorReturn;\n                return async function returnWithCancel(value) {\n                    const returnValue = await onCancel(value);\n                    return Reflect.apply(existingReturn, asyncIterator, [returnValue]);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterator, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\nexport function getAsyncIterableWithCancel(asyncIterable, onCancel) {\n    return new Proxy(asyncIterable, {\n        get(asyncIterable, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterable, prop, receiver);\n            if (Symbol.asyncIterator === prop) {\n                return function asyncIteratorFactory() {\n                    const asyncIterator = Reflect.apply(existingPropValue, asyncIterable, []);\n                    return getAsyncIteratorWithCancel(asyncIterator, onCancel);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterable, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\nexport { getAsyncIterableWithCancel as withCancel };\n", "import { buildASTSchema } from 'graphql';\nimport { getDocumentNodeFromSchema } from './print-schema-with-directives.js';\nfunction buildFixedSchema(schema, options) {\n    const document = getDocumentNodeFromSchema(schema);\n    return buildASTSchema(document, {\n        ...(options || {}),\n    });\n}\nexport function fixSchemaAst(schema, options) {\n    // eslint-disable-next-line no-undef-init\n    let schemaWithValidAst = undefined;\n    if (!schema.astNode || !schema.extensionASTNodes) {\n        schemaWithValidAst = buildFixedSchema(schema, options);\n    }\n    if (!schema.astNode && schemaWithValidAst?.astNode) {\n        schema.astNode = schemaWithValidAst.astNode;\n    }\n    if (!schema.extensionASTNodes && schemaWithValidAst?.astNode) {\n        schema.extensionASTNodes = schemaWithValidAst.extensionASTNodes;\n    }\n    return schema;\n}\n", "import { asArray } from './helpers.js';\nimport { MapperKind } from './Interfaces.js';\nimport { mapSchema } from './mapSchema.js';\nfunction handleDirectiveExtensions(extensions, removeDirectives) {\n    extensions = extensions || {};\n    const { directives: existingDirectives, ...rest } = extensions;\n    const finalExtensions = {\n        ...rest,\n    };\n    if (!removeDirectives) {\n        if (existingDirectives != null) {\n            const directives = {};\n            for (const directiveName in existingDirectives) {\n                directives[directiveName] = [...asArray(existingDirectives[directiveName])];\n            }\n            finalExtensions.directives = directives;\n        }\n    }\n    return finalExtensions;\n}\nexport function extractExtensionsFromSchema(schema, removeDirectives = false) {\n    const result = {\n        schemaExtensions: handleDirectiveExtensions(schema.extensions, removeDirectives),\n        types: {},\n    };\n    mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            result.types[type.name] = {\n                fields: {},\n                type: 'object',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.INTERFACE_TYPE]: type => {\n            result.types[type.name] = {\n                fields: {},\n                type: 'interface',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.FIELD]: (field, fieldName, typeName) => {\n            result.types[typeName].fields[fieldName] = {\n                arguments: {},\n                extensions: handleDirectiveExtensions(field.extensions, removeDirectives),\n            };\n            const args = field.args;\n            if (args != null) {\n                for (const argName in args) {\n                    result.types[typeName].fields[fieldName].arguments[argName] =\n                        handleDirectiveExtensions(args[argName].extensions, removeDirectives);\n                }\n            }\n            return field;\n        },\n        [MapperKind.ENUM_TYPE]: type => {\n            result.types[type.name] = {\n                values: {},\n                type: 'enum',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.ENUM_VALUE]: (value, typeName, _schema, valueName) => {\n            result.types[typeName].values[valueName] = handleDirectiveExtensions(value.extensions, removeDirectives);\n            return value;\n        },\n        [MapperKind.SCALAR_TYPE]: type => {\n            result.types[type.name] = {\n                type: 'scalar',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.UNION_TYPE]: type => {\n            result.types[type.name] = {\n                type: 'union',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.INPUT_OBJECT_TYPE]: type => {\n            result.types[type.name] = {\n                fields: {},\n                type: 'input',\n                extensions: handleDirectiveExtensions(type.extensions, removeDirectives),\n            };\n            return type;\n        },\n        [MapperKind.INPUT_OBJECT_FIELD]: (field, fieldName, typeName) => {\n            result.types[typeName].fields[fieldName] = {\n                extensions: handleDirectiveExtensions(field.extensions, removeDirectives),\n            };\n            return field;\n        },\n    });\n    return result;\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n    return { prev, key, typename };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\nexport function pathToArray(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.push(curr.key);\n        curr = curr.prev;\n    }\n    return flattened.reverse();\n}\n/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n    return path\n        .map(key => (typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key))\n        .join('');\n}\n", "export function merge(a, b, k) {\n\tif (typeof a === 'object' && typeof b === 'object') \u00A0{\n\t\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\t\tfor (k=0; k < b.length; k++) {\n\t\t\t\ta[k] = merge(a[k], b[k]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in b) {\n\t\t\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\t\t\ta[k] = merge(a[k], b[k]);\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\treturn b;\n}\n\nexport function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = ''+keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? merge(t[k],val) : (typeof(x=t[k])===typeof keys) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { dset } from 'dset/merge';\nexport function mergeIncrementalResult({ incrementalResult, executionResult, }) {\n    const path = ['data', ...(incrementalResult.path ?? [])];\n    if (incrementalResult.items) {\n        for (const item of incrementalResult.items) {\n            dset(executionResult, path, item);\n            // Increment the last path segment (the array index) to merge the next item at the next index\n            path[path.length - 1]++;\n        }\n    }\n    if (incrementalResult.data) {\n        dset(executionResult, path, incrementalResult.data);\n    }\n    if (incrementalResult.errors) {\n        executionResult.errors = executionResult.errors || [];\n        executionResult.errors.push(...incrementalResult.errors);\n    }\n    if (incrementalResult.extensions) {\n        dset(executionResult, 'extensions', incrementalResult.extensions);\n    }\n    if (incrementalResult.incremental) {\n        incrementalResult.incremental.forEach(incrementalSubResult => {\n            mergeIncrementalResult({\n                incrementalResult: incrementalSubResult,\n                executionResult,\n            });\n        });\n    }\n}\n", "const debugNamesOngoing = new Set();\nexport function debugTimerStart(name) {\n    const debugEnvVar = globalThis.process?.env?.['DEBUG'] || globalThis.DEBUG;\n    if (debugEnvVar === '1' || debugEnvVar?.includes(name)) {\n        debugNamesOngoing.add(name);\n        console.time(name);\n    }\n}\nexport function debugTimerEnd(name) {\n    if (debugNamesOngoing.has(name)) {\n        console.timeEnd(name);\n    }\n}\n", "export function createDeferred() {\n    if (Promise.withResolvers) {\n        return Promise.withResolvers();\n    }\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return { promise, resolve, reject };\n}\n", "import { memoize1 } from './memoize.js';\n// AbortSignal handler cache to avoid the \"possible EventEmitter memory leak detected\"\n// on Node.js\nconst getListenersOfAbortSignal = memoize1(function getListenersOfAbortSignal(signal) {\n    const listeners = new Set();\n    signal.addEventListener('abort', e => {\n        for (const listener of listeners) {\n            listener(e);\n        }\n    }, { once: true });\n    return listeners;\n});\n/**\n * Register an AbortSignal handler for a signal.\n * This helper function mainly exists to work around the\n * \"possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\"\n * warning occuring on Node.js\n */\nexport function registerAbortSignalListener(signal, listener) {\n    // If the signal is already aborted, call the listener immediately\n    if (signal.aborted) {\n        listener();\n        return;\n    }\n    getListenersOfAbortSignal(signal).add(listener);\n}\nexport const getAbortPromise = memoize1(function getAbortPromise(signal) {\n    return new Promise((_resolve, reject) => {\n        // If the signal is already aborted, return a rejected promise\n        if (signal.aborted) {\n            reject(signal.reason);\n            return;\n        }\n        registerAbortSignalListener(signal, () => {\n            reject(signal.reason);\n        });\n    });\n});\n", "export * from './loaders.js';\nexport * from './helpers.js';\nexport * from './get-directives.js';\nexport * from './get-fields-with-directives.js';\nexport * from './get-arguments-with-directives.js';\nexport * from './get-implementing-types.js';\nexport * from './print-schema-with-directives.js';\nexport * from './get-fields-with-directives.js';\nexport * from './validate-documents.js';\nexport * from './parse-graphql-json.js';\nexport * from './parse-graphql-sdl.js';\nexport * from './build-operation-for-field.js';\nexport * from './types.js';\nexport * from './filterSchema.js';\nexport * from './heal.js';\nexport * from './getResolversFromSchema.js';\nexport * from './forEachField.js';\nexport * from './forEachDefaultValue.js';\nexport * from './mapSchema.js';\nexport * from './addTypes.js';\nexport * from './rewire.js';\nexport * from './prune.js';\nexport * from './mergeDeep.js';\nexport * from './Interfaces.js';\nexport * from './stub.js';\nexport * from './selectionSets.js';\nexport * from './getResponseKeyFromInfo.js';\nexport * from './fields.js';\nexport * from './renameType.js';\nexport * from './transformInputValue.js';\nexport * from './mapAsyncIterator.js';\nexport * from './updateArgument.js';\nexport * from './astFromType.js';\nexport * from './implementsAbstractType.js';\nexport * from './errors.js';\nexport * from './observableToAsyncIterable.js';\nexport * from './visitResult.js';\nexport * from './getArgumentValues.js';\nexport * from './valueMatchesCriteria.js';\nexport * from './isAsyncIterable.js';\nexport * from './isDocumentNode.js';\nexport * from './astFromValueUntyped.js';\nexport * from './executor.js';\nexport * from './withCancel.js';\nexport * from './rootTypes.js';\nexport * from './comments.js';\nexport * from './collectFields.js';\nexport { inspect } from 'cross-inspect';\nexport * from './memoize.js';\nexport * from './fixSchemaAst.js';\nexport * from './getOperationASTFromRequest.js';\nexport * from './extractExtensionsFromSchema.js';\nexport * from './Path.js';\nexport * from './jsutils.js';\nexport * from './directives.js';\nexport * from './mergeIncrementalResult.js';\nexport * from './debugTimer.js';\nexport * from './getDirectiveExtensions.js';\nexport * from './map-maybe-promise.js';\nexport * from './fakePromise.js';\nexport * from './createDeferred.js';\nexport * from './registerAbortSignalListener.js';\n", "import { getNamedType, isScalarType } from 'graphql';\nimport { forEachField } from '@graphql-tools/utils';\nexport function assertResolversPresent(schema, resolverValidationOptions = {}) {\n    const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    forEachField(schema, (field, typeName, fieldName) => {\n        // requires a resolver for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolver('requireResolversForAllFields', requireResolversForAllFields, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolver('requireResolversForArgs', requireResolversForArgs, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that returns a non-scalar type\n        if (requireResolversForNonScalar !== 'ignore' && !isScalarType(getNamedType(field.type))) {\n            expectResolver('requireResolversForNonScalar', requireResolversForNonScalar, field, typeName, fieldName);\n        }\n    });\n}\nfunction expectResolver(validator, behavior, field, typeName, fieldName) {\n    if (!field.resolve) {\n        const message = `Resolver missing for \"${typeName}.${fieldName}\".\nTo disable this validator, use:\n  resolverValidationOptions: {\n    ${validator}: 'ignore'\n  }`;\n        if (behavior === 'error') {\n            throw new Error(message);\n        }\n        if (behavior === 'warn') {\n            console.warn(message);\n        }\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new Error(`Resolver \"${typeName}.${fieldName}\" must be a function`);\n    }\n}\n", "import { MapperKind, mapSchema } from '@graphql-tools/utils';\n// If we have any union or interface types throw if no there is no resolveType resolver\nexport function checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n    mapSchema(schema, {\n        [MapperKind.ABSTRACT_TYPE]: type => {\n            if (!type.resolveType) {\n                const message = `Type \"${type.name}\" is missing a \"__resolveType\" resolver. Pass 'ignore' into ` +\n                    '\"resolverValidationOptions.requireResolversForResolveType\" to disable this error.';\n                if (requireResolversForResolveType === 'error') {\n                    throw new Error(message);\n                }\n                if (requireResolversForResolveType === 'warn') {\n                    console.warn(message);\n                }\n            }\n            return undefined;\n        },\n    });\n}\n", "export function extendResolversFromInterfaces(schema, resolvers) {\n    const extendedResolvers = {};\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if ('getInterfaces' in type) {\n            extendedResolvers[typeName] = {};\n            for (const iFace of type.getInterfaces()) {\n                if (resolvers[iFace.name]) {\n                    for (const fieldName in resolvers[iFace.name]) {\n                        if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n                            extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n                        }\n                    }\n                }\n            }\n            const typeResolvers = resolvers[typeName];\n            extendedResolvers[typeName] = {\n                ...extendedResolvers[typeName],\n                ...typeResolvers,\n            };\n        }\n        else {\n            const typeResolvers = resolvers[typeName];\n            if (typeResolvers != null) {\n                extendedResolvers[typeName] = typeResolvers;\n            }\n        }\n    }\n    return extendedResolvers;\n}\n", "import { GraphQLEnumType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql';\nimport { forEachDefaultValue, forEachField, healSchema, MapperKind, mapSchema, parseInputValue, serializeInputValue, } from '@graphql-tools/utils';\nimport { checkForResolveTypeResolver } from './checkForResolveTypeResolver.js';\nimport { extendResolversFromInterfaces } from './extendResolversFromInterfaces.js';\nexport function addResolversToSchema({ schema, resolvers: inputResolvers, defaultFieldResolver, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, }) {\n    const { requireResolversToMatchSchema = 'error', requireResolversForResolveType } = resolverValidationOptions;\n    const resolvers = inheritResolversFromInterfaces\n        ? extendResolversFromInterfaces(schema, inputResolvers)\n        : inputResolvers;\n    for (const typeName in resolvers) {\n        const resolverValue = resolvers[typeName];\n        const resolverType = typeof resolverValue;\n        if (resolverType !== 'object') {\n            throw new Error(`\"${typeName}\" defined in resolvers, but has invalid value \"${resolverValue}\". The resolver's value must be of type object.`);\n        }\n        const type = schema.getType(typeName);\n        if (type == null) {\n            const msg = `\"${typeName}\" defined in resolvers, but not in schema`;\n            if (requireResolversToMatchSchema && requireResolversToMatchSchema !== 'error') {\n                if (requireResolversToMatchSchema === 'warn') {\n                    console.warn(msg);\n                }\n                continue;\n            }\n            throw new Error(msg);\n        }\n        else if (isSpecifiedScalarType(type)) {\n            // allow -- without recommending -- overriding of specified scalar types\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isEnumType(type)) {\n            const values = type.getValues();\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    !values.some(value => value.name === fieldName) &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    const msg = `${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`;\n                    if (requireResolversToMatchSchema === 'error') {\n                        throw new Error(msg);\n                    }\n                    else {\n                        console.warn(msg);\n                    }\n                }\n            }\n        }\n        else if (isUnionType(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    const msg = `${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`;\n                    if (requireResolversToMatchSchema === 'error') {\n                        throw new Error(msg);\n                    }\n                    else {\n                        console.warn(msg);\n                    }\n                }\n            }\n        }\n        else if (isObjectType(type) || isInterfaceType(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__')) {\n                    const fields = type.getFields();\n                    const field = fields[fieldName];\n                    if (field == null) {\n                        // Field present in resolver but not in schema\n                        if (requireResolversToMatchSchema && requireResolversToMatchSchema !== 'ignore') {\n                            const msg = `${typeName}.${fieldName} defined in resolvers, but not in schema`;\n                            if (requireResolversToMatchSchema === 'error') {\n                                throw new Error(msg);\n                            }\n                            else {\n                                console.error(msg);\n                            }\n                        }\n                    }\n                    else {\n                        // Field present in both the resolver and schema\n                        const fieldResolve = resolverValue[fieldName];\n                        if (typeof fieldResolve !== 'function' && typeof fieldResolve !== 'object') {\n                            throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    schema = updateResolversInPlace\n        ? addResolversToExistingSchema(schema, resolvers, defaultFieldResolver)\n        : createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver);\n    if (requireResolversForResolveType && requireResolversForResolveType !== 'ignore') {\n        checkForResolveTypeResolver(schema, requireResolversForResolveType);\n    }\n    return schema;\n}\nfunction addResolversToExistingSchema(schema, resolvers, defaultFieldResolver) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in resolvers) {\n        const type = schema.getType(typeName);\n        const resolverValue = resolvers[typeName];\n        if (isScalarType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && type.astNode != null) {\n                    type.astNode = {\n                        ...type.astNode,\n                        description: resolverValue?.astNode?.description ??\n                            type.astNode.description,\n                        directives: (type.astNode.directives ?? []).concat(resolverValue?.astNode?.directives ?? []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && type.extensionASTNodes != null) {\n                    type.extensionASTNodes = type.extensionASTNodes.concat(resolverValue?.extensionASTNodes ?? []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isEnumType(type)) {\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    config[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && config.astNode != null) {\n                    config.astNode = {\n                        ...config.astNode,\n                        description: resolverValue?.astNode?.description ??\n                            config.astNode.description,\n                        directives: (config.astNode.directives ?? []).concat(resolverValue?.astNode?.directives ?? []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                    config.extensionASTNodes = config.extensionASTNodes.concat(resolverValue?.extensionASTNodes ?? []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else if (enumValueConfigMap[fieldName]) {\n                    enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                }\n            }\n            typeMap[typeName] = new GraphQLEnumType(config);\n        }\n        else if (isUnionType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isObjectType(type) || isInterfaceType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    // this is for isTypeOf and resolveType and all the other stuff.\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                    continue;\n                }\n                const fields = type.getFields();\n                const field = fields[fieldName];\n                if (field != null) {\n                    const fieldResolve = resolverValue[fieldName];\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        field.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(field, fieldResolve);\n                    }\n                }\n            }\n        }\n    }\n    // serialize all default values prior to healing fields with new scalar/enum types.\n    forEachDefaultValue(schema, serializeInputValue);\n    // schema may have new scalar/enum types that require healing\n    healSchema(schema);\n    // reparse all default values with new parsing functions.\n    forEachDefaultValue(schema, parseInputValue);\n    if (defaultFieldResolver != null) {\n        forEachField(schema, field => {\n            if (!field.resolve) {\n                field.resolve = defaultFieldResolver;\n            }\n        });\n    }\n    return schema;\n}\nfunction createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver) {\n    schema = mapSchema(schema, {\n        [MapperKind.SCALAR_TYPE]: type => {\n            const config = type.toConfig();\n            const resolverValue = resolvers[type.name];\n            if (!isSpecifiedScalarType(type) && resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: resolverValue?.astNode?.description ??\n                                config.astNode.description,\n                            directives: (config.astNode.directives ?? []).concat(resolverValue?.astNode?.directives ?? []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat(resolverValue?.extensionASTNodes ?? []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else {\n                        config[fieldName] = resolverValue[fieldName];\n                    }\n                }\n                return new GraphQLScalarType(config);\n            }\n        },\n        [MapperKind.ENUM_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            if (resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: resolverValue?.astNode?.description ??\n                                config.astNode.description,\n                            directives: (config.astNode.directives ?? []).concat(resolverValue?.astNode?.directives ?? []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat(resolverValue?.extensionASTNodes ?? []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else if (enumValueConfigMap[fieldName]) {\n                        enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                    }\n                }\n                return new GraphQLEnumType(config);\n            }\n        },\n        [MapperKind.UNION_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new GraphQLUnionType(config);\n            }\n        },\n        [MapperKind.OBJECT_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__isTypeOf']) {\n                    config.isTypeOf = resolverValue['__isTypeOf'];\n                }\n                return new GraphQLObjectType(config);\n            }\n        },\n        [MapperKind.INTERFACE_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new GraphQLInterfaceType(config);\n            }\n        },\n        [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {\n            const resolverValue = resolvers[typeName];\n            if (resolverValue != null) {\n                const fieldResolve = resolverValue[fieldName];\n                if (fieldResolve != null) {\n                    const newFieldConfig = { ...fieldConfig };\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        newFieldConfig.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(newFieldConfig, fieldResolve);\n                    }\n                    return newFieldConfig;\n                }\n            }\n        },\n    });\n    if (defaultFieldResolver != null) {\n        schema = mapSchema(schema, {\n            [MapperKind.OBJECT_FIELD]: fieldConfig => ({\n                ...fieldConfig,\n                resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver,\n            }),\n        });\n    }\n    return schema;\n}\nfunction setFieldProperties(field, propertiesObj) {\n    for (const propertyName in propertiesObj) {\n        field[propertyName] = propertiesObj[propertyName];\n    }\n}\n", "import { mergeDeep } from '@graphql-tools/utils';\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nexport function mergeResolvers(resolversDefinitions, options) {\n    if (!resolversDefinitions ||\n        (Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0)) {\n        return {};\n    }\n    if (!Array.isArray(resolversDefinitions)) {\n        return resolversDefinitions;\n    }\n    if (resolversDefinitions.length === 1) {\n        return resolversDefinitions[0] || {};\n    }\n    const resolvers = new Array();\n    for (let resolversDefinition of resolversDefinitions) {\n        if (Array.isArray(resolversDefinition)) {\n            resolversDefinition = mergeResolvers(resolversDefinition);\n        }\n        if (typeof resolversDefinition === 'object' && resolversDefinition) {\n            resolvers.push(resolversDefinition);\n        }\n    }\n    const result = mergeDeep(resolvers, true);\n    if (options?.exclusions) {\n        for (const exclusion of options.exclusions) {\n            const [typeName, fieldName] = exclusion.split('.');\n            if (!fieldName || fieldName === '*') {\n                delete result[typeName];\n            }\n            else if (result[typeName]) {\n                delete result[typeName][fieldName];\n            }\n        }\n    }\n    return result;\n}\n", "import { compareNodes, isSome } from '@graphql-tools/utils';\nexport function mergeArguments(args1, args2, config) {\n    const result = deduplicateArguments([...args2, ...args1].filter(isSome), config);\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\nfunction deduplicateArguments(args, config) {\n    return args.reduce((acc, current) => {\n        const dupIndex = acc.findIndex(arg => arg.name.value === current.name.value);\n        if (dupIndex === -1) {\n            return acc.concat([current]);\n        }\n        else if (!config?.reverseArguments) {\n            acc[dupIndex] = current;\n        }\n        return acc;\n    }, []);\n}\n", "import { isSome } from '@graphql-tools/utils';\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n    return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction isRepeatableDirective(directive, directives) {\n    return !!directives?.[directive.name.value]?.repeatable;\n}\nfunction nameAlreadyExists(name, namesArr) {\n    return namesArr.some(({ value }) => value === name.value);\n}\nfunction mergeArguments(a1, a2) {\n    const result = [...a2];\n    for (const argument of a1) {\n        const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n        if (existingIndex > -1) {\n            const existingArg = result[existingIndex];\n            if (existingArg.value.kind === 'ListValue') {\n                const source = existingArg.value.values;\n                const target = argument.value.values;\n                // merge values of two lists\n                existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n                    const value = targetVal.value;\n                    return !value || !source.some((sourceVal) => sourceVal.value === value);\n                });\n            }\n            else {\n                existingArg.value = argument.value;\n            }\n        }\n        else {\n            result.push(argument);\n        }\n    }\n    return result;\n}\nfunction deduplicateDirectives(directives, definitions) {\n    return directives\n        .map((directive, i, all) => {\n        const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n        if (firstAt !== i && !isRepeatableDirective(directive, definitions)) {\n            const dup = all[firstAt];\n            directive.arguments = mergeArguments(directive.arguments, dup.arguments);\n            return null;\n        }\n        return directive;\n    })\n        .filter(isSome);\n}\nexport function mergeDirectives(d1 = [], d2 = [], config, directives) {\n    const reverseOrder = config && config.reverseDirectives;\n    const asNext = reverseOrder ? d1 : d2;\n    const asFirst = reverseOrder ? d2 : d1;\n    const result = deduplicateDirectives([...asNext], directives);\n    for (const directive of asFirst) {\n        if (directiveAlreadyExists(result, directive) &&\n            !isRepeatableDirective(directive, directives)) {\n            const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n            const existingDirective = result[existingDirectiveIndex];\n            result[existingDirectiveIndex].arguments = mergeArguments(directive.arguments || [], existingDirective.arguments || []);\n        }\n        else {\n            result.push(directive);\n        }\n    }\n    return result;\n}\nexport function mergeDirective(node, existingNode) {\n    if (existingNode) {\n        return {\n            ...node,\n            arguments: deduplicateLists(existingNode.arguments || [], node.arguments || [], (arg, existingArgs) => !nameAlreadyExists(arg.name, existingArgs.map(a => a.name))),\n            locations: [\n                ...existingNode.locations,\n                ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations)),\n            ],\n        };\n    }\n    return node;\n}\nfunction deduplicateLists(source, target, filterFn) {\n    return source.concat(target.filter(val => filterFn(val, source)));\n}\n", "import { compareNodes } from '@graphql-tools/utils';\nimport { mergeDirectives } from './directives.js';\nexport function mergeEnumValues(first, second, config, directives) {\n    if (config?.consistentEnumMerge) {\n        const reversed = [];\n        if (first) {\n            reversed.push(...first);\n        }\n        first = second;\n        second = reversed;\n    }\n    const enumValueMap = new Map();\n    if (first) {\n        for (const firstValue of first) {\n            enumValueMap.set(firstValue.name.value, firstValue);\n        }\n    }\n    if (second) {\n        for (const secondValue of second) {\n            const enumValue = secondValue.name.value;\n            if (enumValueMap.has(enumValue)) {\n                const firstValue = enumValueMap.get(enumValue);\n                firstValue.description = secondValue.description || firstValue.description;\n                firstValue.directives = mergeDirectives(secondValue.directives, firstValue.directives, directives);\n            }\n            else {\n                enumValueMap.set(enumValue, secondValue);\n            }\n        }\n    }\n    const result = [...enumValueMap.values()];\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nimport { mergeEnumValues } from './enum-values.js';\nexport function mergeEnum(e1, e2, config, directives) {\n    if (e2) {\n        return {\n            name: e1.name,\n            description: e1['description'] || e2['description'],\n            kind: config?.convertExtensions ||\n                e1.kind === 'EnumTypeDefinition' ||\n                e2.kind === 'EnumTypeDefinition'\n                ? 'EnumTypeDefinition'\n                : 'EnumTypeExtension',\n            loc: e1.loc,\n            directives: mergeDirectives(e1.directives, e2.directives, config, directives),\n            values: mergeEnumValues(e1.values, e2.values, config),\n        };\n    }\n    return config?.convertExtensions\n        ? {\n            ...e1,\n            kind: Kind.ENUM_TYPE_DEFINITION,\n        }\n        : e1;\n}\n", "import { Kind, Source } from 'graphql';\nexport function isStringTypes(types) {\n    return typeof types === 'string';\n}\nexport function isSourceTypes(types) {\n    return types instanceof Source;\n}\nexport function extractType(type) {\n    let visitedType = type;\n    while (visitedType.kind === Kind.LIST_TYPE || visitedType.kind === 'NonNullType') {\n        visitedType = visitedType.type;\n    }\n    return visitedType;\n}\nexport function isWrappingTypeNode(type) {\n    return type.kind !== Kind.NAMED_TYPE;\n}\nexport function isListTypeNode(type) {\n    return type.kind === Kind.LIST_TYPE;\n}\nexport function isNonNullTypeNode(type) {\n    return type.kind === Kind.NON_NULL_TYPE;\n}\nexport function printTypeNode(type) {\n    if (isListTypeNode(type)) {\n        return `[${printTypeNode(type.type)}]`;\n    }\n    if (isNonNullTypeNode(type)) {\n        return `${printTypeNode(type.type)}!`;\n    }\n    return type.name.value;\n}\nexport var CompareVal;\n(function (CompareVal) {\n    CompareVal[CompareVal[\"A_SMALLER_THAN_B\"] = -1] = \"A_SMALLER_THAN_B\";\n    CompareVal[CompareVal[\"A_EQUALS_B\"] = 0] = \"A_EQUALS_B\";\n    CompareVal[CompareVal[\"A_GREATER_THAN_B\"] = 1] = \"A_GREATER_THAN_B\";\n})(CompareVal || (CompareVal = {}));\nexport function defaultStringComparator(a, b) {\n    if (a == null && b == null) {\n        return CompareVal.A_EQUALS_B;\n    }\n    if (a == null) {\n        return CompareVal.A_SMALLER_THAN_B;\n    }\n    if (b == null) {\n        return CompareVal.A_GREATER_THAN_B;\n    }\n    if (a < b)\n        return CompareVal.A_SMALLER_THAN_B;\n    if (a > b)\n        return CompareVal.A_GREATER_THAN_B;\n    return CompareVal.A_EQUALS_B;\n}\n", "import { compareNodes } from '@graphql-tools/utils';\nimport { mergeArguments } from './arguments.js';\nimport { mergeDirectives } from './directives.js';\nimport { extractType, isListTypeNode, isNonNullTypeNode, isWrappingTypeNode, printTypeNode, } from './utils.js';\nfunction fieldAlreadyExists(fieldsArr, otherField) {\n    const resultIndex = fieldsArr.findIndex(field => field.name.value === otherField.name.value);\n    return [resultIndex > -1 ? fieldsArr[resultIndex] : null, resultIndex];\n}\nexport function mergeFields(type, f1, f2, config, directives) {\n    const result = [];\n    if (f2 != null) {\n        result.push(...f2);\n    }\n    if (f1 != null) {\n        for (const field of f1) {\n            const [existing, existingIndex] = fieldAlreadyExists(result, field);\n            if (existing && !config?.ignoreFieldConflicts) {\n                const newField = (config?.onFieldTypeConflict &&\n                    config.onFieldTypeConflict(existing, field, type, config?.throwOnConflict)) ||\n                    preventConflicts(type, existing, field, config?.throwOnConflict);\n                newField.arguments = mergeArguments(field['arguments'] || [], existing['arguments'] || [], config);\n                newField.directives = mergeDirectives(field.directives, existing.directives, config, directives);\n                newField.description = field.description || existing.description;\n                result[existingIndex] = newField;\n            }\n            else {\n                result.push(field);\n            }\n        }\n    }\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    if (config && config.exclusions) {\n        const exclusions = config.exclusions;\n        return result.filter(field => !exclusions.includes(`${type.name.value}.${field.name.value}`));\n    }\n    return result;\n}\nfunction preventConflicts(type, a, b, ignoreNullability = false) {\n    const aType = printTypeNode(a.type);\n    const bType = printTypeNode(b.type);\n    if (aType !== bType) {\n        const t1 = extractType(a.type);\n        const t2 = extractType(b.type);\n        if (t1.name.value !== t2.name.value) {\n            throw new Error(`Field \"${b.name.value}\" already defined with a different type. Declared as \"${t1.name.value}\", but you tried to override with \"${t2.name.value}\"`);\n        }\n        if (!safeChangeForFieldType(a.type, b.type, !ignoreNullability)) {\n            throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);\n        }\n    }\n    if (isNonNullTypeNode(b.type) && !isNonNullTypeNode(a.type)) {\n        a.type = b.type;\n    }\n    return a;\n}\nfunction safeChangeForFieldType(oldType, newType, ignoreNullability = false) {\n    // both are named\n    if (!isWrappingTypeNode(oldType) && !isWrappingTypeNode(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    // new is non-null\n    if (isNonNullTypeNode(newType)) {\n        const ofType = isNonNullTypeNode(oldType) ? oldType.type : oldType;\n        return safeChangeForFieldType(ofType, newType.type);\n    }\n    // old is non-null\n    if (isNonNullTypeNode(oldType)) {\n        return safeChangeForFieldType(newType, oldType, ignoreNullability);\n    }\n    // old is list\n    if (isListTypeNode(oldType)) {\n        return ((isListTypeNode(newType) && safeChangeForFieldType(oldType.type, newType.type)) ||\n            (isNonNullTypeNode(newType) && safeChangeForFieldType(oldType, newType['type'])));\n    }\n    return false;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nimport { mergeFields } from './fields.js';\nexport function mergeInputType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: config?.convertExtensions ||\n                    node.kind === 'InputObjectTypeDefinition' ||\n                    existingNode.kind === 'InputObjectTypeDefinition'\n                    ? 'InputObjectTypeDefinition'\n                    : 'InputObjectTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config),\n                directives: mergeDirectives(node.directives, existingNode.directives, config, directives),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL input type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return config?.convertExtensions\n        ? {\n            ...node,\n            kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n", "import { compareNodes } from '@graphql-tools/utils';\nfunction alreadyExists(arr, other) {\n    return !!arr.find(i => i.name.value === other.name.value);\n}\nexport function mergeNamedTypeArray(first = [], second = [], config = {}) {\n    const result = [...second, ...first.filter(d => !alreadyExists(second, d))];\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nimport { mergeFields } from './fields.js';\nimport { mergeNamedTypeArray } from './merge-named-type-array.js';\nexport function mergeInterface(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: config?.convertExtensions ||\n                    node.kind === 'InterfaceTypeDefinition' ||\n                    existingNode.kind === 'InterfaceTypeDefinition'\n                    ? 'InterfaceTypeDefinition'\n                    : 'InterfaceTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config, directives),\n                directives: mergeDirectives(node.directives, existingNode.directives, config, directives),\n                interfaces: node['interfaces']\n                    ? mergeNamedTypeArray(node['interfaces'], existingNode['interfaces'], config)\n                    : undefined,\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL interface \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return config?.convertExtensions\n        ? {\n            ...node,\n            kind: Kind.INTERFACE_TYPE_DEFINITION,\n        }\n        : node;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nexport function mergeScalar(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            name: node.name,\n            description: node['description'] || existingNode['description'],\n            kind: config?.convertExtensions ||\n                node.kind === 'ScalarTypeDefinition' ||\n                existingNode.kind === 'ScalarTypeDefinition'\n                ? 'ScalarTypeDefinition'\n                : 'ScalarTypeExtension',\n            loc: node.loc,\n            directives: mergeDirectives(node.directives, existingNode.directives, config, directives),\n        };\n    }\n    return config?.convertExtensions\n        ? {\n            ...node,\n            kind: Kind.SCALAR_TYPE_DEFINITION,\n        }\n        : node;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nexport const DEFAULT_OPERATION_TYPE_NAME_MAP = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {\n    const finalOpNodeList = [];\n    for (const opNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {\n        const opNode = opNodeList.find(n => n.operation === opNodeType) ||\n            existingOpNodeList.find(n => n.operation === opNodeType);\n        if (opNode) {\n            finalOpNodeList.push(opNode);\n        }\n    }\n    return finalOpNodeList;\n}\nexport function mergeSchemaDefs(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            kind: node.kind === Kind.SCHEMA_DEFINITION || existingNode.kind === Kind.SCHEMA_DEFINITION\n                ? Kind.SCHEMA_DEFINITION\n                : Kind.SCHEMA_EXTENSION,\n            description: node['description'] || existingNode['description'],\n            directives: mergeDirectives(node.directives, existingNode.directives, config, directives),\n            operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes),\n        };\n    }\n    return (config?.convertExtensions\n        ? {\n            ...node,\n            kind: Kind.SCHEMA_DEFINITION,\n        }\n        : node);\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nimport { mergeFields } from './fields.js';\nimport { mergeNamedTypeArray } from './merge-named-type-array.js';\nexport function mergeType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: config?.convertExtensions ||\n                    node.kind === 'ObjectTypeDefinition' ||\n                    existingNode.kind === 'ObjectTypeDefinition'\n                    ? 'ObjectTypeDefinition'\n                    : 'ObjectTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config, directives),\n                directives: mergeDirectives(node.directives, existingNode.directives, config, directives),\n                interfaces: mergeNamedTypeArray(node.interfaces, existingNode.interfaces, config),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return config?.convertExtensions\n        ? {\n            ...node,\n            kind: Kind.OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n", "import { Kind, } from 'graphql';\nimport { mergeDirectives } from './directives.js';\nimport { mergeNamedTypeArray } from './merge-named-type-array.js';\nexport function mergeUnion(first, second, config, directives) {\n    if (second) {\n        return {\n            name: first.name,\n            description: first['description'] || second['description'],\n            // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n            directives: mergeDirectives(first.directives, second.directives, config, directives),\n            kind: config?.convertExtensions ||\n                first.kind === 'UnionTypeDefinition' ||\n                second.kind === 'UnionTypeDefinition'\n                ? Kind.UNION_TYPE_DEFINITION\n                : Kind.UNION_TYPE_EXTENSION,\n            loc: first.loc,\n            types: mergeNamedTypeArray(first.types, second.types, config),\n        };\n    }\n    return config?.convertExtensions\n        ? {\n            ...first,\n            kind: Kind.UNION_TYPE_DEFINITION,\n        }\n        : first;\n}\n", "import { Kind, } from 'graphql';\nimport { collectComment } from '@graphql-tools/utils';\nimport { mergeDirective } from './directives.js';\nimport { mergeEnum } from './enum.js';\nimport { mergeInputType } from './input-type.js';\nimport { mergeInterface } from './interface.js';\nimport { mergeScalar } from './scalar.js';\nimport { mergeSchemaDefs } from './schema-def.js';\nimport { mergeType } from './type.js';\nimport { mergeUnion } from './union.js';\nexport const schemaDefSymbol = 'SCHEMA_DEF_SYMBOL';\nexport function isNamedDefinitionNode(definitionNode) {\n    return 'name' in definitionNode;\n}\nexport function mergeGraphQLNodes(nodes, config, directives = {}) {\n    const mergedResultMap = directives;\n    for (const nodeDefinition of nodes) {\n        if (isNamedDefinitionNode(nodeDefinition)) {\n            const name = nodeDefinition.name?.value;\n            if (config?.commentDescriptions) {\n                collectComment(nodeDefinition);\n            }\n            if (name == null) {\n                continue;\n            }\n            if (config?.exclusions?.includes(name + '.*') || config?.exclusions?.includes(name)) {\n                delete mergedResultMap[name];\n            }\n            else {\n                switch (nodeDefinition.kind) {\n                    case Kind.OBJECT_TYPE_DEFINITION:\n                    case Kind.OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeType(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.ENUM_TYPE_DEFINITION:\n                    case Kind.ENUM_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeEnum(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.UNION_TYPE_DEFINITION:\n                    case Kind.UNION_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeUnion(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.SCALAR_TYPE_DEFINITION:\n                    case Kind.SCALAR_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeScalar(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n                    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeInputType(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.INTERFACE_TYPE_DEFINITION:\n                    case Kind.INTERFACE_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeInterface(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case Kind.DIRECTIVE_DEFINITION:\n                        if (mergedResultMap[name]) {\n                            const isInheritedFromPrototype = name in {}; // i.e. toString\n                            if (isInheritedFromPrototype) {\n                                if (!isASTNode(mergedResultMap[name])) {\n                                    mergedResultMap[name] = undefined;\n                                }\n                            }\n                        }\n                        mergedResultMap[name] = mergeDirective(nodeDefinition, mergedResultMap[name]);\n                        break;\n                }\n            }\n        }\n        else if (nodeDefinition.kind === Kind.SCHEMA_DEFINITION ||\n            nodeDefinition.kind === Kind.SCHEMA_EXTENSION) {\n            mergedResultMap[schemaDefSymbol] = mergeSchemaDefs(nodeDefinition, mergedResultMap[schemaDefSymbol], config);\n        }\n    }\n    return mergedResultMap;\n}\nfunction isASTNode(node) {\n    return (node != null && typeof node === 'object' && 'kind' in node && typeof node.kind === 'string');\n}\n", "import { isDefinitionNode, isSchema, Kind, parse, } from 'graphql';\nimport { getDocumentNodeFromSchema, isDocumentNode, printWithComments, resetComments, } from '@graphql-tools/utils';\nimport { mergeGraphQLNodes, schemaDefSymbol } from './merge-nodes.js';\nimport { DEFAULT_OPERATION_TYPE_NAME_MAP } from './schema-def.js';\nimport { defaultStringComparator, isSourceTypes, isStringTypes } from './utils.js';\nexport function mergeTypeDefs(typeSource, config) {\n    resetComments();\n    const doc = {\n        kind: Kind.DOCUMENT,\n        definitions: mergeGraphQLTypes(typeSource, {\n            useSchemaDefinition: true,\n            forceSchemaDefinition: false,\n            throwOnConflict: false,\n            commentDescriptions: false,\n            ...config,\n        }),\n    };\n    let result;\n    if (config?.commentDescriptions) {\n        result = printWithComments(doc);\n    }\n    else {\n        result = doc;\n    }\n    resetComments();\n    return result;\n}\nfunction visitTypeSources(typeSource, options, allDirectives = [], allNodes = [], visitedTypeSources = new Set()) {\n    if (typeSource && !visitedTypeSources.has(typeSource)) {\n        visitedTypeSources.add(typeSource);\n        if (typeof typeSource === 'function') {\n            visitTypeSources(typeSource(), options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (Array.isArray(typeSource)) {\n            for (const type of typeSource) {\n                visitTypeSources(type, options, allDirectives, allNodes, visitedTypeSources);\n            }\n        }\n        else if (isSchema(typeSource)) {\n            const documentNode = getDocumentNodeFromSchema(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (isStringTypes(typeSource) || isSourceTypes(typeSource)) {\n            const documentNode = parse(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (typeof typeSource === 'object' && isDefinitionNode(typeSource)) {\n            if (typeSource.kind === Kind.DIRECTIVE_DEFINITION) {\n                allDirectives.push(typeSource);\n            }\n            else {\n                allNodes.push(typeSource);\n            }\n        }\n        else if (isDocumentNode(typeSource)) {\n            visitTypeSources(typeSource.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else {\n            throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);\n        }\n    }\n    return { allDirectives, allNodes };\n}\nexport function mergeGraphQLTypes(typeSource, config) {\n    resetComments();\n    const { allDirectives, allNodes } = visitTypeSources(typeSource, config);\n    const mergedDirectives = mergeGraphQLNodes(allDirectives, config);\n    const mergedNodes = mergeGraphQLNodes(allNodes, config, mergedDirectives);\n    if (config?.useSchemaDefinition) {\n        // XXX: right now we don't handle multiple schema definitions\n        const schemaDef = mergedNodes[schemaDefSymbol] || {\n            kind: Kind.SCHEMA_DEFINITION,\n            operationTypes: [],\n        };\n        const operationTypes = schemaDef.operationTypes;\n        for (const opTypeDefNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {\n            const opTypeDefNode = operationTypes.find(operationType => operationType.operation === opTypeDefNodeType);\n            if (!opTypeDefNode) {\n                const possibleRootTypeName = DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];\n                const existingPossibleRootType = mergedNodes[possibleRootTypeName];\n                if (existingPossibleRootType != null && existingPossibleRootType.name != null) {\n                    operationTypes.push({\n                        kind: Kind.OPERATION_TYPE_DEFINITION,\n                        type: {\n                            kind: Kind.NAMED_TYPE,\n                            name: existingPossibleRootType.name,\n                        },\n                        operation: opTypeDefNodeType,\n                    });\n                }\n            }\n        }\n        if (schemaDef?.operationTypes?.length != null && schemaDef.operationTypes.length > 0) {\n            mergedNodes[schemaDefSymbol] = schemaDef;\n        }\n    }\n    if (config?.forceSchemaDefinition && !mergedNodes[schemaDefSymbol]?.operationTypes?.length) {\n        mergedNodes[schemaDefSymbol] = {\n            kind: Kind.SCHEMA_DEFINITION,\n            operationTypes: [\n                {\n                    kind: Kind.OPERATION_TYPE_DEFINITION,\n                    operation: 'query',\n                    type: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'Query',\n                        },\n                    },\n                },\n            ],\n        };\n    }\n    const mergedNodeDefinitions = Object.values(mergedNodes);\n    if (config?.sort) {\n        const sortFn = typeof config.sort === 'function' ? config.sort : defaultStringComparator;\n        mergedNodeDefinitions.sort((a, b) => sortFn(a.name?.value, b.name?.value));\n    }\n    return mergedNodeDefinitions;\n}\n", "export * from './arguments.js';\nexport * from './directives.js';\nexport * from './enum-values.js';\nexport * from './enum.js';\nexport * from './fields.js';\nexport * from './input-type.js';\nexport * from './interface.js';\nexport * from './merge-named-type-array.js';\nexport * from './merge-nodes.js';\nexport * from './merge-typedefs.js';\nexport * from './scalar.js';\nexport * from './type.js';\nexport * from './union.js';\nexport * from './utils.js';\n", "import { mergeDeep } from '@graphql-tools/utils';\nexport { extractExtensionsFromSchema } from '@graphql-tools/utils';\nexport function mergeExtensions(extensions) {\n    return mergeDeep(extensions, false, true);\n}\nfunction applyExtensionObject(obj, extensions) {\n    if (!obj || !extensions || extensions === obj.extensions) {\n        return;\n    }\n    if (!obj.extensions) {\n        obj.extensions = extensions;\n        return;\n    }\n    obj.extensions = mergeDeep([obj.extensions, extensions], false, true);\n}\nexport function applyExtensions(schema, extensions) {\n    applyExtensionObject(schema, extensions.schemaExtensions);\n    for (const [typeName, data] of Object.entries(extensions.types || {})) {\n        const type = schema.getType(typeName);\n        if (type) {\n            applyExtensionObject(type, data.extensions);\n            if (data.type === 'object' || data.type === 'interface') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    if (field) {\n                        applyExtensionObject(field, fieldData.extensions);\n                        for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n                            applyExtensionObject(field.args.find(a => a.name === arg), argData);\n                        }\n                    }\n                }\n            }\n            else if (data.type === 'input') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    applyExtensionObject(field, fieldData.extensions);\n                }\n            }\n            else if (data.type === 'enum') {\n                for (const [valueName, valueData] of Object.entries(data.values)) {\n                    const value = type.getValue(valueName);\n                    applyExtensionObject(value, valueData);\n                }\n            }\n        }\n    }\n    return schema;\n}\n", "export * from './merge-resolvers.js';\nexport * from './typedefs-mergers/index.js';\nexport * from './extensions.js';\n", "import { buildASTSchema, buildSchema, isSchema } from 'graphql';\nimport { applyExtensions, mergeResolvers, mergeTypeDefs } from '@graphql-tools/merge';\nimport { asArray } from '@graphql-tools/utils';\nimport { addResolversToSchema } from './addResolversToSchema.js';\nimport { assertResolversPresent } from './assertResolversPresent.js';\n/**\n * Builds a schema from the provided type definitions and resolvers.\n *\n * The type definitions are written using Schema Definition Language (SDL). They\n * can be provided as a string, a `DocumentNode`, a function, or an array of any\n * of these. If a function is provided, it will be passed no arguments and\n * should return an array of strings or `DocumentNode`s.\n *\n * Note: You can use GraphQL magic comment provide additional syntax\n * highlighting in your editor (with the appropriate editor plugin).\n *\n * ```js\n * const typeDefs = /* GraphQL *\\/ `\n *   type Query {\n *     posts: [Post]\n *     author(id: Int!): Author\n *   }\n * `;\n * ```\n *\n * The `resolvers` object should be a map of type names to nested object, which\n * themselves map the type's fields to their appropriate resolvers.\n * See the [Resolvers](/docs/resolvers) section of the documentation for more details.\n *\n * ```js\n * const resolvers = {\n *   Query: {\n *     posts: (obj, args, ctx, info) => getAllPosts(),\n *     author: (obj, args, ctx, info) => getAuthorById(args.id)\n *   }\n * };\n * ```\n *\n * Once you've defined both the `typeDefs` and `resolvers`, you can create your\n * schema:\n *\n * ```js\n * const schema = makeExecutableSchema({\n *   typeDefs,\n *   resolvers,\n * })\n * ```\n */\nexport function makeExecutableSchema({ typeDefs, resolvers = {}, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, schemaExtensions, defaultFieldResolver, ...otherOptions }) {\n    // Validate and clean up arguments\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefs) {\n        throw new Error('Must provide typeDefs');\n    }\n    let schema;\n    if (isSchema(typeDefs)) {\n        schema = typeDefs;\n    }\n    else if (otherOptions?.commentDescriptions) {\n        const mergedTypeDefs = mergeTypeDefs(typeDefs, {\n            ...otherOptions,\n            commentDescriptions: true,\n        });\n        schema = buildSchema(mergedTypeDefs, otherOptions);\n    }\n    else {\n        const mergedTypeDefs = mergeTypeDefs(typeDefs, otherOptions);\n        schema = buildASTSchema(mergedTypeDefs, otherOptions);\n    }\n    // We allow passing in an array of resolver maps, in which case we merge them\n    schema = addResolversToSchema({\n        schema,\n        resolvers: mergeResolvers(resolvers),\n        resolverValidationOptions,\n        inheritResolversFromInterfaces,\n        updateResolversInPlace,\n        defaultFieldResolver,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0) {\n        assertResolversPresent(schema, resolverValidationOptions);\n    }\n    if (schemaExtensions) {\n        for (const schemaExtension of asArray(schemaExtensions)) {\n            applyExtensions(schema, schemaExtension);\n        }\n    }\n    return schema;\n}\n", "", "import { asArray, extractExtensionsFromSchema, getDocumentNodeFromSchema, getResolversFromSchema, } from '@graphql-tools/utils';\nimport { makeExecutableSchema } from './makeExecutableSchema.js';\n/**\n * Synchronously merges multiple schemas, typeDefinitions and/or resolvers into a single schema.\n * @param config Configuration object\n */\nexport function mergeSchemas(config) {\n    const extractedTypeDefs = [];\n    const extractedResolvers = [];\n    const extractedSchemaExtensions = [];\n    if (config.schemas != null) {\n        for (const schema of config.schemas) {\n            extractedTypeDefs.push(getDocumentNodeFromSchema(schema));\n            extractedResolvers.push(getResolversFromSchema(schema));\n            extractedSchemaExtensions.push(extractExtensionsFromSchema(schema));\n        }\n    }\n    if (config.typeDefs != null) {\n        extractedTypeDefs.push(config.typeDefs);\n    }\n    if (config.resolvers != null) {\n        const additionalResolvers = asArray(config.resolvers);\n        extractedResolvers.push(...additionalResolvers);\n    }\n    if (config.schemaExtensions != null) {\n        const additionalSchemaExtensions = asArray(config.schemaExtensions);\n        extractedSchemaExtensions.push(...additionalSchemaExtensions);\n    }\n    return makeExecutableSchema({\n        ...config,\n        typeDefs: extractedTypeDefs,\n        resolvers: extractedResolvers,\n        schemaExtensions: extractedSchemaExtensions,\n    });\n}\n", "export { assertResolversPresent } from './assertResolversPresent.js';\nexport { chainResolvers } from './chainResolvers.js';\nexport { addResolversToSchema } from './addResolversToSchema.js';\nexport { checkForResolveTypeResolver } from './checkForResolveTypeResolver.js';\nexport { extendResolversFromInterfaces } from './extendResolversFromInterfaces.js';\nexport * from './makeExecutableSchema.js';\nexport * from './types.js';\nexport * from './merge-schemas.js';\nexport { extractExtensionsFromSchema } from '@graphql-tools/utils';\n", "import { makeExecutableSchema } from '@graphql-tools/schema';\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport function createSchema(opts) {\n    return makeExecutableSchema(opts);\n}\n", "", "", "", "", "", "", "export * from './context-types.js';\nexport * from './hooks.js';\nexport * from './plugin.js';\nexport * from './get-enveloped.js';\nexport * from './graphql.js';\nexport * from './utils.js';\n", "export const documentStringMap = new WeakMap();\nfunction getDocumentString(document, print) {\n    let documentSource = documentStringMap.get(document);\n    if (!documentSource && print) {\n        documentSource = print(document);\n        documentStringMap.set(document, documentSource);\n    }\n    return documentSource;\n}\nexport { getDocumentString };\n", "export const envelopIsIntrospectionSymbol = Symbol('ENVELOP_IS_INTROSPECTION');\nexport function isIntrospectionOperationString(operation) {\n    return (typeof operation === 'string' ? operation : operation.body).indexOf('__schema') !== -1;\n}\nfunction getSubscribeArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            subscribeFieldResolver: args[7],\n        };\n}\n/**\n * Utility function for making a subscribe function that handles polymorphic arguments.\n */\nexport const makeSubscribe = (subscribeFn) => ((...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs)));\nexport function mapAsyncIterator(source, mapper) {\n    const iterator = source[Symbol.asyncIterator]();\n    async function mapResult(result) {\n        if (result.done) {\n            return result;\n        }\n        try {\n            return { value: await mapper(result.value), done: false };\n        }\n        catch (error) {\n            try {\n                await iterator.return?.();\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            }\n            catch (_error) {\n                /* ignore error */\n            }\n            throw error;\n        }\n    }\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            return await mapResult(await iterator.next());\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await mapResult(await promise) : { value: undefined, done: true };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await mapResult(await promise);\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction getExecuteArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            typeResolver: args[7],\n        };\n}\n/**\n * Utility function for making a execute function that handles polymorphic arguments.\n */\nexport const makeExecute = (executeFn) => ((...polyArgs) => executeFn(getExecuteArgs(polyArgs)));\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n *\n * Source: https://github.com/graphql/graphql-js/blob/main/src/jsutils/isAsyncIterable.ts\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n    return (typeof maybeAsyncIterable === 'object' &&\n        maybeAsyncIterable != null &&\n        typeof maybeAsyncIterable[Symbol.asyncIterator] === 'function');\n}\n/**\n * A utility function for handling `onExecuteDone` hook result, for simplifying the handling of AsyncIterable returned from `execute`.\n *\n * @param payload The payload send to `onExecuteDone` hook function\n * @param fn The handler to be executed on each result\n * @returns a subscription for streamed results, or undefined in case of an non-async\n */\nexport function handleStreamOrSingleExecutionResult(payload, fn) {\n    if (isAsyncIterable(payload.result)) {\n        return { onNext: fn };\n    }\n    fn({\n        args: payload.args,\n        result: payload.result,\n        setResult: payload.setResult,\n    });\n    return undefined;\n}\nexport function finalAsyncIterator(source, onFinal) {\n    const iterator = source[Symbol.asyncIterator]();\n    let isDone = false;\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            const result = await iterator.next();\n            if (result.done && isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return result;\n        },\n        async return() {\n            const promise = iterator.return?.();\n            if (isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nexport function errorAsyncIterator(source, onError) {\n    const iterator = source[Symbol.asyncIterator]();\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            try {\n                return await iterator.next();\n            }\n            catch (error) {\n                onError(error);\n                return { done: true, value: undefined };\n            }\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nexport function isPromise(value) {\n    return value?.then !== undefined;\n}\nexport function mapMaybePromise(value, mapper, errorMapper) {\n    if (isPromise(value)) {\n        if (errorMapper) {\n            try {\n                return value.then(mapper, errorMapper);\n            }\n            catch (e) {\n                return errorMapper(e);\n            }\n        }\n        return value.then(mapper);\n    }\n    if (errorMapper) {\n        try {\n            return mapper(value);\n        }\n        catch (e) {\n            return errorMapper(e);\n        }\n    }\n    return mapper(value);\n}\n", "import { documentStringMap } from './document-string-map.js';\nimport { errorAsyncIterator, finalAsyncIterator, isAsyncIterable, makeExecute, makeSubscribe, mapAsyncIterator, } from './utils.js';\nfunction throwEngineFunctionError(name) {\n    throw Error(`No \\`${name}\\` function found! Register it using \"useEngine\" plugin.`);\n}\nexport function createEnvelopOrchestrator({ plugins, }) {\n    let schema = null;\n    let initDone = false;\n    const parse = () => throwEngineFunctionError('parse');\n    const validate = () => throwEngineFunctionError('validate');\n    const execute = () => throwEngineFunctionError('execute');\n    const subscribe = () => throwEngineFunctionError('subscribe');\n    // Define the initial method for replacing the GraphQL schema, this is needed in order\n    // to allow setting the schema from the onPluginInit callback. We also need to make sure\n    // here not to call the same plugin that initiated the schema switch.\n    const replaceSchema = (newSchema, ignorePluginIndex = -1) => {\n        if (schema === newSchema) {\n            return;\n        }\n        schema = newSchema;\n        if (initDone) {\n            for (const [i, plugin] of plugins.entries()) {\n                if (i !== ignorePluginIndex) {\n                    plugin.onSchemaChange &&\n                        plugin.onSchemaChange({\n                            schema,\n                            replaceSchema: schemaToSet => {\n                                replaceSchema(schemaToSet, i);\n                            },\n                        });\n                }\n            }\n        }\n    };\n    const contextErrorHandlers = [];\n    // Iterate all plugins and trigger onPluginInit\n    for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        const pluginsToAdd = [];\n        plugin.onPluginInit &&\n            plugin.onPluginInit({\n                plugins,\n                addPlugin: newPlugin => {\n                    pluginsToAdd.push(newPlugin);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                registerContextErrorHandler: handler => contextErrorHandlers.push(handler),\n            });\n        pluginsToAdd.length && plugins.splice(i + 1, 0, ...pluginsToAdd);\n    }\n    // A set of before callbacks defined here in order to allow it to be used later\n    const beforeCallbacks = {\n        init: [],\n        parse: [],\n        validate: [],\n        subscribe: [],\n        execute: [],\n        context: [],\n    };\n    for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped, } of plugins) {\n        onEnveloped && beforeCallbacks.init.push(onEnveloped);\n        onContextBuilding && beforeCallbacks.context.push(onContextBuilding);\n        onExecute && beforeCallbacks.execute.push(onExecute);\n        onParse && beforeCallbacks.parse.push(onParse);\n        onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);\n        onValidate && beforeCallbacks.validate.push(onValidate);\n    }\n    const init = initialContext => {\n        for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {\n            onEnveloped({\n                context: initialContext,\n                extendContext: extension => {\n                    if (!initialContext) {\n                        return;\n                    }\n                    Object.assign(initialContext, extension);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    };\n    const customParse = beforeCallbacks.parse.length\n        ? initialContext => (source, parseOptions) => {\n            let result = null;\n            let parseFn = parse;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onParse of beforeCallbacks.parse) {\n                const afterFn = onParse({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: { source, options: parseOptions },\n                    parseFn,\n                    setParseFn: newFn => {\n                        parseFn = newFn;\n                    },\n                    setParsedDocument: newDoc => {\n                        result = newDoc;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (result === null) {\n                try {\n                    result = parseFn(source, parseOptions);\n                }\n                catch (e) {\n                    result = e;\n                }\n            }\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    replaceParseResult: newResult => {\n                        result = newResult;\n                    },\n                    result,\n                });\n            }\n            if (result === null) {\n                throw new Error(`Failed to parse document.`);\n            }\n            if (result instanceof Error) {\n                throw result;\n            }\n            documentStringMap.set(result, source.toString());\n            return result;\n        }\n        : () => parse;\n    const customValidate = beforeCallbacks.validate\n        .length\n        ? initialContext => (schema, documentAST, rules, typeInfo, validationOptions) => {\n            let actualRules = rules ? [...rules] : undefined;\n            let validateFn = validate;\n            let result = null;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onValidate of beforeCallbacks.validate) {\n                const afterFn = onValidate({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: {\n                        schema,\n                        documentAST,\n                        rules: actualRules,\n                        typeInfo,\n                        options: validationOptions,\n                    },\n                    validateFn,\n                    addValidationRule: rule => {\n                        if (!actualRules) {\n                            actualRules = [];\n                        }\n                        actualRules.push(rule);\n                    },\n                    setValidationFn: newFn => {\n                        validateFn = newFn;\n                    },\n                    setResult: newResults => {\n                        result = newResults;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (!result) {\n                result = validateFn(schema, documentAST, actualRules, typeInfo, validationOptions);\n            }\n            if (!result) {\n                return;\n            }\n            const valid = result.length === 0;\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    valid,\n                    result,\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n            }\n            return result;\n        }\n        : () => validate;\n    const customContextFactory = beforeCallbacks.context.length\n        ? initialContext => async (orchestratorCtx) => {\n            const afterCalls = [];\n            // In order to have access to the \"last working\" context object we keep this outside of the try block:\n            const context = initialContext;\n            if (orchestratorCtx) {\n                Object.assign(context, orchestratorCtx);\n            }\n            try {\n                let isBreakingContextBuilding = false;\n                for (const onContext of beforeCallbacks.context) {\n                    const afterHookResult = await onContext({\n                        context,\n                        extendContext: extension => {\n                            Object.assign(context, extension);\n                        },\n                        breakContextBuilding: () => {\n                            isBreakingContextBuilding = true;\n                        },\n                    });\n                    if (typeof afterHookResult === 'function') {\n                        afterCalls.push(afterHookResult);\n                    }\n                    if (isBreakingContextBuilding === true) {\n                        break;\n                    }\n                }\n                for (const afterCb of afterCalls) {\n                    afterCb({\n                        context,\n                        extendContext: extension => {\n                            Object.assign(context, extension);\n                        },\n                    });\n                }\n                return context;\n            }\n            catch (err) {\n                let error = err;\n                for (const errorCb of contextErrorHandlers) {\n                    errorCb({\n                        context,\n                        error,\n                        setError: err => {\n                            error = err;\n                        },\n                    });\n                }\n                throw error;\n            }\n        }\n        : initialContext => orchestratorCtx => {\n            if (orchestratorCtx) {\n                Object.assign(initialContext, orchestratorCtx);\n            }\n            return initialContext;\n        };\n    const useCustomSubscribe = beforeCallbacks.subscribe.length;\n    const customSubscribe = useCustomSubscribe\n        ? makeSubscribe(async (args) => {\n            let subscribeFn = subscribe;\n            const afterCalls = [];\n            const subscribeErrorHandlers = [];\n            const context = args.contextValue || {};\n            let result;\n            for (const onSubscribe of beforeCallbacks.subscribe) {\n                const after = await onSubscribe({\n                    subscribeFn,\n                    setSubscribeFn: newSubscribeFn => {\n                        subscribeFn = newSubscribeFn;\n                    },\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    args: args,\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                });\n                if (after) {\n                    if (after.onSubscribeResult) {\n                        afterCalls.push(after.onSubscribeResult);\n                    }\n                    if (after.onSubscribeError) {\n                        subscribeErrorHandlers.push(after.onSubscribeError);\n                    }\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = await subscribeFn({\n                    ...args,\n                    contextValue: context,\n                    // Casted for GraphQL.js 15 compatibility\n                    // Can be removed once we drop support for GraphQL.js 15\n                });\n            }\n            if (!result) {\n                return;\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => (result = newResult),\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            if (subscribeErrorHandlers.length && isAsyncIterable(result)) {\n                result = errorAsyncIterator(result, err => {\n                    let error = err;\n                    for (const handler of subscribeErrorHandlers) {\n                        handler({\n                            error,\n                            setError: err => {\n                                error = err;\n                            },\n                        });\n                    }\n                    throw error;\n                });\n            }\n            return result;\n        })\n        : makeSubscribe(subscribe);\n    const useCustomExecute = beforeCallbacks.execute.length;\n    const customExecute = useCustomExecute\n        ? makeExecute(async (args) => {\n            let executeFn = execute;\n            let result;\n            const afterCalls = [];\n            const context = args.contextValue || {};\n            for (const onExecute of beforeCallbacks.execute) {\n                const after = await onExecute({\n                    executeFn,\n                    setExecuteFn: newExecuteFn => {\n                        executeFn = newExecuteFn;\n                    },\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                    extendContext: extension => {\n                        if (typeof extension === 'object') {\n                            Object.assign(context, extension);\n                        }\n                        else {\n                            throw new Error(`Invalid context extension provided! Expected \"object\", got: \"${JSON.stringify(extension)}\" (${typeof extension})`);\n                        }\n                    },\n                    args: args,\n                });\n                if (after?.onExecuteDone) {\n                    afterCalls.push(after.onExecuteDone);\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = (await executeFn({\n                    ...args,\n                    contextValue: context,\n                }));\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = await afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => {\n                                result = newResult;\n                            },\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            return result;\n        })\n        : makeExecute(execute);\n    initDone = true;\n    // This is done in order to trigger the first schema available, to allow plugins that needs the schema\n    // eagerly to have it.\n    if (schema) {\n        for (const [i, plugin] of plugins.entries()) {\n            plugin.onSchemaChange &&\n                plugin.onSchemaChange({\n                    schema,\n                    replaceSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                });\n        }\n    }\n    return {\n        getCurrentSchema() {\n            return schema;\n        },\n        init,\n        parse: customParse,\n        validate: customValidate,\n        execute: customExecute,\n        subscribe: customSubscribe,\n        contextFactory: customContextFactory,\n    };\n}\n", "import { createEnvelopOrchestrator } from './orchestrator.js';\nfunction notEmpty(value) {\n    return value != null;\n}\nexport function envelop(options) {\n    const plugins = options.plugins.filter(notEmpty);\n    const orchestrator = createEnvelopOrchestrator({\n        plugins,\n    });\n    const getEnveloped = (initialContext = {}) => {\n        const typedOrchestrator = orchestrator;\n        typedOrchestrator.init(initialContext);\n        return {\n            parse: typedOrchestrator.parse(initialContext),\n            validate: typedOrchestrator.validate(initialContext),\n            contextFactory: typedOrchestrator.contextFactory(initialContext),\n            execute: typedOrchestrator.execute,\n            subscribe: typedOrchestrator.subscribe,\n            schema: typedOrchestrator.getCurrentSchema(),\n        };\n    };\n    getEnveloped._plugins = plugins;\n    return getEnveloped;\n}\n", "export const useEnvelop = (envelop) => {\n    let initialized = false;\n    return {\n        onPluginInit({ addPlugin }) {\n            if (initialized) {\n                return;\n            }\n            for (const plugin of envelop._plugins) {\n                addPlugin(plugin);\n            }\n            // Avoid double execution if envelop is extended multiple times\n            initialized = true;\n        },\n    };\n};\n", "import { envelopIsIntrospectionSymbol, isIntrospectionOperationString } from '../utils.js';\nconst DEFAULT_OPTIONS = {\n    logFn: console.log,\n};\nexport const useLogger = (rawOptions = DEFAULT_OPTIONS) => {\n    const options = {\n        DEFAULT_OPTIONS,\n        ...rawOptions,\n    };\n    return {\n        onParse({ extendContext, params }) {\n            if (options.skipIntrospection && isIntrospectionOperationString(params.source)) {\n                extendContext({\n                    [envelopIsIntrospectionSymbol]: true,\n                });\n            }\n        },\n        onExecute({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('execute-start', { args });\n            return {\n                onExecuteDone: ({ result }) => {\n                    options.logFn('execute-end', { args, result });\n                },\n            };\n        },\n        onSubscribe({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('subscribe-start', { args });\n            return {\n                onSubscribeResult: ({ result }) => {\n                    options.logFn('subscribe-end', { args, result });\n                },\n            };\n        },\n    };\n};\n", "export const useSchema = (schema) => {\n    return {\n        onPluginInit({ setSchema }) {\n            setSchema(schema);\n        },\n    };\n};\nexport const useSchemaByContext = (schemaLoader) => {\n    return {\n        onEnveloped({ setSchema, context }) {\n            setSchema(schemaLoader(context));\n        },\n    };\n};\n", "import { handleStreamOrSingleExecutionResult } from '../utils.js';\nexport const DEFAULT_ERROR_MESSAGE = 'Unexpected error.';\nexport function isGraphQLError(error) {\n    return error instanceof Error && error.name === 'GraphQLError';\n}\nexport function isOriginalGraphQLError(error) {\n    if (isGraphQLError(error)) {\n        if (error.originalError != null) {\n            return isOriginalGraphQLError(error.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nfunction createSerializableGraphQLError(message, originalError, isDev) {\n    const error = new Error(message);\n    error.name = 'GraphQLError';\n    if (isDev) {\n        const extensions = originalError instanceof Error\n            ? { message: originalError.message, stack: originalError.stack }\n            : { message: String(originalError) };\n        Object.defineProperty(error, 'extensions', {\n            get() {\n                return extensions;\n            },\n        });\n    }\n    Object.defineProperty(error, 'toJSON', {\n        value() {\n            return {\n                message: error.message,\n                extensions: error.extensions,\n            };\n        },\n    });\n    return error;\n}\nexport const createDefaultMaskError = (isDev) => (error, message) => {\n    if (isOriginalGraphQLError(error)) {\n        return error;\n    }\n    return createSerializableGraphQLError(message, error, isDev);\n};\nconst isDev = globalThis.process?.env?.NODE_ENV === 'development';\nexport const defaultMaskError = createDefaultMaskError(isDev);\nconst makeHandleResult = (maskError, message) => ({ result, setResult, }) => {\n    if (result.errors != null) {\n        setResult({ ...result, errors: result.errors.map(error => maskError(error, message)) });\n    }\n};\nexport function useMaskedErrors(opts) {\n    const maskError = opts?.maskError ?? defaultMaskError;\n    const message = opts?.errorMessage || DEFAULT_ERROR_MESSAGE;\n    const handleResult = makeHandleResult(maskError, message);\n    return {\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error, setError }) => {\n                setError(maskError(error, message));\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n                onSubscribeError({ error, setError }) {\n                    setError(maskError(error, message));\n                },\n            };\n        },\n    };\n}\n", "import { handleStreamOrSingleExecutionResult } from '../utils.js';\nimport { isGraphQLError } from './use-masked-errors.js';\nconst makeHandleResult = (errorHandler) => ({ result, args }) => {\n    if (result.errors?.length) {\n        errorHandler({ errors: result.errors, context: args, phase: 'execution' });\n    }\n};\nexport const useErrorHandler = (errorHandler) => {\n    const handleResult = makeHandleResult(errorHandler);\n    return {\n        onParse() {\n            return function onParseEnd({ result, context }) {\n                if (result instanceof Error) {\n                    errorHandler({ errors: [result], context, phase: 'parse' });\n                }\n            };\n        },\n        onValidate() {\n            return function onValidateEnd({ valid, result, context }) {\n                if (valid === false && result.length > 0) {\n                    errorHandler({ errors: result, context, phase: 'validate' });\n                }\n            };\n        },\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error }) => {\n                if (isGraphQLError(error)) {\n                    errorHandler({ errors: [error], context, phase: 'context' });\n                }\n                else {\n                    // @ts-expect-error its not an error at this point so we just create a new one - can we handle this better?\n                    errorHandler({ errors: [new Error(error)], context, phase: 'context' });\n                }\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n    };\n};\n", "export const useExtendContext = (contextFactory) => ({\n    async onContextBuilding({ context, extendContext }) {\n        extendContext((await contextFactory(context)));\n    },\n});\n", "import { handleStreamOrSingleExecutionResult } from '../utils.js';\nconst makeHandleResult = (formatter) => ({ args, result, setResult, }) => {\n    const modified = formatter(result, args);\n    if (modified !== false) {\n        setResult(modified);\n    }\n};\nexport const usePayloadFormatter = (formatter) => ({\n    onExecute() {\n        const handleResult = makeHandleResult(formatter);\n        return {\n            onExecuteDone(payload) {\n                return handleStreamOrSingleExecutionResult(payload, handleResult);\n            },\n        };\n    },\n});\n", "export const useEngine = (engine) => {\n    return {\n        onExecute: ({ setExecuteFn }) => {\n            if (engine.execute) {\n                setExecuteFn(engine.execute);\n            }\n        },\n        onParse: ({ setParseFn }) => {\n            if (engine.parse) {\n                setParseFn(engine.parse);\n            }\n        },\n        onValidate: ({ setValidationFn, addValidationRule }) => {\n            if (engine.validate) {\n                setValidationFn(engine.validate);\n            }\n            engine.specifiedRules?.map(addValidationRule);\n        },\n        onSubscribe: ({ setSubscribeFn }) => {\n            if (engine.subscribe) {\n                setSubscribeFn(engine.subscribe);\n            }\n        },\n    };\n};\n", "export const useValidationRule = (rule) => {\n    return {\n        onValidate({ addValidationRule }) {\n            addValidationRule(rule);\n        },\n    };\n};\n", "// eslint-disable-next-line import/export\nexport * from '@envelop/types';\nexport * from './create.js';\nexport * from './utils.js';\nexport * from './plugins/use-envelop.js';\nexport * from './plugins/use-logger.js';\nexport * from './plugins/use-schema.js';\nexport * from './plugins/use-error-handler.js';\nexport * from './plugins/use-extend-context.js';\nexport * from './plugins/use-payload-formatter.js';\nexport * from './plugins/use-masked-errors.js';\nexport * from './plugins/use-engine.js';\nexport * from './plugins/use-validation-rule.js';\nexport { getDocumentString } from './document-string-map.js';\n", null, null, "export class PonyfillSuppressedError extends Error {\n    error;\n    suppressed;\n    // eslint-disable-next-line n/handle-callback-err\n    constructor(error, suppressed, message) {\n        super(message);\n        this.error = error;\n        this.suppressed = suppressed;\n        this.name = 'SuppressedError';\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n", "export const DisposableSymbols = {\n    get dispose() {\n        return Symbol.dispose || Symbol.for('dispose');\n    },\n    get asyncDispose() {\n        return Symbol.asyncDispose || Symbol.for('asyncDispose');\n    },\n};\nexport function patchSymbols() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.dispose ||= Symbol.for('dispose');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - we ponyfill these symbols\n    Symbol.asyncDispose ||= Symbol.for('asyncDispose');\n}\n", "import { DisposableSymbols } from './symbols.js';\nexport function isSyncDisposable(obj) {\n    return obj?.[DisposableSymbols.dispose] != null;\n}\nexport function isAsyncDisposable(obj) {\n    return obj?.[DisposableSymbols.asyncDispose] != null;\n}\n", "import { PonyfillSuppressedError } from './SupressedError.js';\nimport { DisposableSymbols } from './symbols.js';\nimport { isAsyncDisposable, isSyncDisposable } from './utils.js';\nconst SuppressedError = globalThis.SuppressedError || PonyfillSuppressedError;\nexport class PonyfillAsyncDisposableStack {\n    callbacks = [];\n    get disposed() {\n        return this.callbacks.length === 0;\n    }\n    use(value) {\n        if (isAsyncDisposable(value)) {\n            this.callbacks.push(() => value[DisposableSymbols.asyncDispose]());\n        }\n        else if (isSyncDisposable(value)) {\n            this.callbacks.push(() => value[DisposableSymbols.dispose]());\n        }\n        return value;\n    }\n    adopt(value, onDisposeAsync) {\n        if (onDisposeAsync) {\n            this.callbacks.push(() => onDisposeAsync(value));\n        }\n        return value;\n    }\n    defer(onDisposeAsync) {\n        if (onDisposeAsync) {\n            this.callbacks.push(onDisposeAsync);\n        }\n    }\n    move() {\n        const stack = new PonyfillAsyncDisposableStack();\n        stack.callbacks = this.callbacks;\n        this.callbacks = [];\n        return stack;\n    }\n    disposeAsync() {\n        return this[DisposableSymbols.asyncDispose]();\n    }\n    _error;\n    _iterateCallbacks() {\n        const cb = this.callbacks.pop();\n        if (cb) {\n            try {\n                const res$ = cb();\n                if (res$?.then) {\n                    return res$.then(() => this._iterateCallbacks(), error => {\n                        this._error = this._error ? new SuppressedError(error, this._error) : error;\n                        return this._iterateCallbacks();\n                    });\n                }\n            }\n            catch (error) {\n                this._error = this._error ? new SuppressedError(error, this._error) : error;\n            }\n            return this._iterateCallbacks();\n        }\n    }\n    [DisposableSymbols.asyncDispose]() {\n        const res$ = this._iterateCallbacks();\n        if (res$?.then) {\n            return res$.then(() => {\n                if (this._error) {\n                    const error = this._error;\n                    this._error = undefined;\n                    throw error;\n                }\n            });\n        }\n        if (this._error) {\n            const error = this._error;\n            this._error = undefined;\n            throw error;\n        }\n        return undefined;\n    }\n    [Symbol.toStringTag] = 'AsyncDisposableStack';\n}\n", "import { PonyfillSuppressedError } from './SupressedError.js';\nimport { DisposableSymbols } from './symbols.js';\nimport { isSyncDisposable } from './utils.js';\nconst SuppressedError = globalThis.SuppressedError || PonyfillSuppressedError;\nexport class PonyfillDisposableStack {\n    callbacks = [];\n    get disposed() {\n        return this.callbacks.length === 0;\n    }\n    use(value) {\n        if (isSyncDisposable(value)) {\n            this.callbacks.push(() => value[DisposableSymbols.dispose]());\n        }\n        return value;\n    }\n    adopt(value, onDispose) {\n        if (onDispose) {\n            this.callbacks.push(() => onDispose(value));\n        }\n        return value;\n    }\n    defer(onDispose) {\n        if (onDispose) {\n            this.callbacks.push(onDispose);\n        }\n    }\n    move() {\n        const stack = new PonyfillDisposableStack();\n        stack.callbacks = this.callbacks;\n        this.callbacks = [];\n        return stack;\n    }\n    dispose() {\n        return this[DisposableSymbols.dispose]();\n    }\n    _error;\n    _iterateCallbacks() {\n        const cb = this.callbacks.pop();\n        if (cb) {\n            try {\n                cb();\n            }\n            catch (error) {\n                this._error = this._error ? new SuppressedError(error, this._error) : error;\n            }\n            return this._iterateCallbacks();\n        }\n    }\n    [DisposableSymbols.dispose]() {\n        this._iterateCallbacks();\n        if (this._error) {\n            const error = this._error;\n            this._error = undefined;\n            throw error;\n        }\n    }\n    [Symbol.toStringTag] = 'DisposableStack';\n}\n", "import { PonyfillAsyncDisposableStack } from './AsyncDisposableStack.js';\nimport { PonyfillDisposableStack } from './DisposableStack.js';\nimport { PonyfillSuppressedError } from './SupressedError.js';\nexport const DisposableStack = globalThis.DisposableStack || PonyfillDisposableStack;\nexport const AsyncDisposableStack = globalThis.AsyncDisposableStack || PonyfillAsyncDisposableStack;\nexport const SuppressedError = globalThis.SuppressedError || PonyfillSuppressedError;\nexport * from './symbols.js';\n", "export function coerceError(error) {\n    if (error instanceof Error) {\n        return error;\n    }\n    if (typeof error === 'object' && error != null) {\n        if ('message' in error && typeof error.message === 'string') {\n            let errorOptions;\n            if ('cause' in error) {\n                errorOptions = { cause: error.cause };\n            }\n            const coercedError = new Error(error.message, errorOptions);\n            if ('stack' in error && typeof error.stack === 'string') {\n                coercedError.stack = error.stack;\n            }\n            if ('name' in error && typeof error.name === 'string') {\n                coercedError.name = error.name;\n            }\n            return coercedError;\n        }\n    }\n    return new Error(String(error));\n}\n", "import { DisposableSymbols } from '@whatwg-node/disposablestack';\n/**\n * Given an AsyncIterable of AsyncIterables, flatten all yielded results into a\n * single AsyncIterable.\n */\nexport function flattenAsyncIterable(iterable) {\n    // You might think this whole function could be replaced with\n    //\n    //    async function* flattenAsyncIterable(iterable) {\n    //      for await (const subIterator of iterable) {\n    //        yield* subIterator;\n    //      }\n    //    }\n    //\n    // but calling `.return()` on the iterator it returns won't interrupt the `for await`.\n    const topIterator = iterable[Symbol.asyncIterator]();\n    let currentNestedIterator;\n    let waitForCurrentNestedIterator;\n    let done = false;\n    async function next() {\n        if (done) {\n            return { value: undefined, done: true };\n        }\n        try {\n            if (!currentNestedIterator) {\n                // Somebody else is getting it already.\n                if (waitForCurrentNestedIterator) {\n                    await waitForCurrentNestedIterator;\n                    return await next();\n                }\n                // Nobody else is getting it. We should!\n                let resolve;\n                waitForCurrentNestedIterator = new Promise(r => {\n                    resolve = r;\n                });\n                const topIteratorResult = await topIterator.next();\n                if (topIteratorResult.done) {\n                    // Given that done only ever transitions from false to true,\n                    // require-atomic-updates is being unnecessarily cautious.\n                    done = true;\n                    return await next();\n                }\n                // eslint is making a reasonable point here, but we've explicitly protected\n                // ourself from the race condition by ensuring that only the single call\n                // that assigns to waitForCurrentNestedIterator is allowed to assign to\n                // currentNestedIterator or waitForCurrentNestedIterator.\n                currentNestedIterator = topIteratorResult.value[Symbol.asyncIterator]();\n                waitForCurrentNestedIterator = undefined;\n                resolve();\n                return await next();\n            }\n            const rememberCurrentNestedIterator = currentNestedIterator;\n            const nestedIteratorResult = await currentNestedIterator.next();\n            if (!nestedIteratorResult.done) {\n                return nestedIteratorResult;\n            }\n            // The nested iterator is done. If it's still the current one, make it not\n            // current. (If it's not the current one, somebody else has made us move on.)\n            if (currentNestedIterator === rememberCurrentNestedIterator) {\n                currentNestedIterator = undefined;\n            }\n            return await next();\n        }\n        catch (err) {\n            done = true;\n            throw err;\n        }\n    }\n    return {\n        next,\n        async return() {\n            done = true;\n            await Promise.all([currentNestedIterator?.return?.(), topIterator.return?.()]);\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            done = true;\n            await Promise.all([currentNestedIterator?.throw?.(error), topIterator.throw?.(error)]);\n            /* c8 ignore next */\n            throw error;\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        async [DisposableSymbols.asyncDispose]() {\n            done = true;\n            await Promise.all([\n                currentNestedIterator?.[DisposableSymbols.asyncDispose]?.(),\n                topIterator?.[DisposableSymbols.asyncDispose]?.(),\n            ]);\n        },\n    };\n}\n", "export function invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n    }\n}\n", "import { getAbortPromise } from '@graphql-tools/utils';\n/**\n * This function transforms a JS object `Record<string, Promise<T>>` into\n * a `Promise<Record<string, T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport async function promiseForObject(object, signal) {\n    const resolvedObject = Object.create(null);\n    const promises = Promise.all(Object.entries(object).map(async ([key, value]) => {\n        resolvedObject[key] = await value;\n    }));\n    if (signal) {\n        const abortPromise = getAbortPromise(signal);\n        return Promise.race([abortPromise, promises]).then(() => resolvedObject);\n    }\n    return promises.then(() => resolvedObject);\n}\n", "import { coerceInputValue, isInputType, isNonNullType, print, typeFromAST, valueFromAST, } from 'graphql';\nimport { createGraphQLError, hasOwnProperty, inspect, printPathArray } from '@graphql-tools/utils';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n    const errors = [];\n    const maxErrors = options?.maxErrors;\n    try {\n        const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n            if (maxErrors != null && errors.length >= maxErrors) {\n                throw createGraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n            }\n            errors.push(error);\n        });\n        if (errors.length === 0) {\n            return { coerced };\n        }\n    }\n    catch (error) {\n        errors.push(error);\n    }\n    return { errors };\n}\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n    const coercedValues = {};\n    for (const varDefNode of varDefNodes) {\n        const varName = varDefNode.variable.name.value;\n        const varType = typeFromAST(schema, varDefNode.type);\n        if (!isInputType(varType)) {\n            // Must use input types for variables. This should be caught during\n            // validation, however is checked again here for safety.\n            const varTypeStr = print(varDefNode.type);\n            onError(createGraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, { nodes: varDefNode.type }));\n            continue;\n        }\n        if (!hasOwnProperty(inputs, varName)) {\n            if (varDefNode.defaultValue) {\n                coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n            }\n            else if (isNonNullType(varType)) {\n                const varTypeStr = inspect(varType);\n                onError(createGraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, {\n                    nodes: varDefNode,\n                }));\n            }\n            continue;\n        }\n        const value = inputs[varName];\n        if (value === null && isNonNullType(varType)) {\n            const varTypeStr = inspect(varType);\n            onError(createGraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, {\n                nodes: varDefNode,\n            }));\n            continue;\n        }\n        coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n            let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n            if (path.length > 0) {\n                prefix += ` at \"${varName}${printPathArray(path)}\"`;\n            }\n            onError(createGraphQLError(prefix + '; ' + error.message, {\n                nodes: varDefNode,\n                originalError: error,\n            }));\n        });\n    }\n    return coercedValues;\n}\n", "import { assertValidSchema, getDirectiveValues, GraphQLError, isAbstractType, isLeafType, isListType, isNonNullType, isObjectType, Kind, locatedError, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, versionInfo, } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { collectSubFields as _collectSubfields, addPath, collectFields, createGraphQLError, fakePromise, getAbortPromise, getArgumentValues, getDefinedRootType, GraphQLStreamDirective, inspect, isAsyncIterable, isIterableObject, isObjectLike, isPromise, mapAsyncIterator, memoize1, memoize3, pathToArray, promiseReduce, registerAbortSignalListener, } from '@graphql-tools/utils';\nimport { DisposableSymbols } from '@whatwg-node/disposablestack';\nimport { coerceError } from './coerceError.js';\nimport { flattenAsyncIterable } from './flattenAsyncIterable.js';\nimport { invariant } from './invariant.js';\nimport { promiseForObject } from './promiseForObject.js';\nimport { getVariableValues } from './values.js';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) => _collectSubfields(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * This function returns a Promise of an IncrementalExecutionResults\n * object. This object either consists of a single ExecutionResult, or an\n * object containing an `initialResult` and a stream of `subsequentResults`.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...(e.extensions?.['http'] || {}),\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    return executeImpl(exeContext);\n}\nfunction executeImpl(exeContext) {\n    exeContext.signal?.throwIfAborted();\n    // Return a Promise that will eventually resolve to the data described by\n    // The \"Response\" section of the GraphQL specification.\n    //\n    // If errors are encountered while executing a GraphQL field, only that\n    // field and its descendants will be omitted, and sibling fields will still\n    // be executed. An execution which encounters errors will still result in a\n    // resolved Promise.\n    //\n    // Errors from sub-fields of a NonNull type may propagate to the top level,\n    // at which point we still log the error and null the parent field, which\n    // in this case is the entire response.\n    const result = new ValueOrPromise(() => executeOperation(exeContext))\n        .then(data => {\n        const initialResult = buildResponse(data, exeContext.errors);\n        if (exeContext.subsequentPayloads.size > 0) {\n            return {\n                initialResult: {\n                    ...initialResult,\n                    hasNext: true,\n                },\n                subsequentResults: yieldSubsequentPayloads(exeContext),\n            };\n        }\n        return initialResult;\n    }, (error) => {\n        exeContext.signal?.throwIfAborted();\n        if (error.errors) {\n            exeContext.errors.push(...error.errors);\n        }\n        else {\n            exeContext.errors.push(error);\n        }\n        return buildResponse(null, exeContext.errors);\n    })\n        .resolve();\n    return result;\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\nexport function executeSync(args) {\n    const result = execute(args);\n    // Assert that the execution was synchronous.\n    if (isPromise(result) || 'initialResult' in result) {\n        throw new Error('GraphQL execution failed to complete synchronously.');\n    }\n    return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(data, errors) {\n    return errors.length === 0 ? { data } : { errors, data };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n    console.assert(!!document, 'Must provide document.');\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    // Variables, if provided, must be an object.\n    console.assert(rawVariableValues == null || isObjectLike(rawVariableValues), 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\nexport const getFragmentsFromDocument = memoize1(function getFragmentsFromDocument(document) {\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n            fragments[definition.name.value] = definition;\n        }\n    }\n    return fragments;\n});\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildExecutionContext(args) {\n    const { schema, document, rootValue, contextValue, variableValues: rawVariableValues, operationName, fieldResolver, typeResolver, subscribeFieldResolver, signal, } = args;\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    const fragments = getFragmentsFromDocument(document);\n    let operation;\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case Kind.OPERATION_DEFINITION:\n                if (operationName == null) {\n                    if (operation !== undefined) {\n                        return [\n                            createGraphQLError('Must provide operation name if query contains multiple operations.'),\n                        ];\n                    }\n                    operation = definition;\n                }\n                else if (definition.name?.value === operationName) {\n                    operation = definition;\n                }\n                break;\n            default:\n            // ignore non-executable definitions\n        }\n    }\n    if (operation == null) {\n        if (operationName != null) {\n            return [createGraphQLError(`Unknown operation named \"${operationName}\".`)];\n        }\n        return [createGraphQLError('Must provide an operation.')];\n    }\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    /* c8 ignore next */\n    const variableDefinitions = operation.variableDefinitions ?? [];\n    const coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues ?? {}, {\n        maxErrors: 50,\n    });\n    if (coercedVariableValues.errors) {\n        return coercedVariableValues.errors;\n    }\n    return {\n        schema,\n        fragments,\n        rootValue,\n        contextValue,\n        operation,\n        variableValues: coercedVariableValues.coerced,\n        fieldResolver: fieldResolver ?? defaultFieldResolver,\n        typeResolver: typeResolver ?? defaultTypeResolver,\n        subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,\n        subsequentPayloads: new Set(),\n        errors: [],\n        signal,\n    };\n}\nfunction buildPerEventExecutionContext(exeContext, payload) {\n    return {\n        ...exeContext,\n        rootValue: payload,\n        subsequentPayloads: new Set(),\n        errors: [],\n    };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\nfunction executeOperation(exeContext) {\n    const { operation, schema, fragments, variableValues, rootValue } = exeContext;\n    const rootType = getDefinedRootType(schema, operation.operation, [operation]);\n    if (rootType == null) {\n        createGraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields, patches } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const path = undefined;\n    let result;\n    if (operation.operation === 'mutation') {\n        result = executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    }\n    else {\n        result = executeFields(exeContext, rootType, rootValue, path, rootFields);\n    }\n    for (const patch of patches) {\n        const { label, fields: patchFields } = patch;\n        executeDeferredFragment(exeContext, rootType, rootValue, patchFields, label, path);\n    }\n    return result;\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n    return promiseReduce(fields, (results, [responseName, fieldNodes]) => {\n        const fieldPath = addPath(path, responseName, parentType.name);\n        exeContext.signal?.throwIfAborted();\n        return new ValueOrPromise(() => executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath)).then(result => {\n            if (result === undefined) {\n                return results;\n            }\n            results[responseName] = result;\n            return results;\n        });\n    }, Object.create(null)).resolve();\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord) {\n    const results = Object.create(null);\n    let containsPromise = false;\n    try {\n        for (const [responseName, fieldNodes] of fields) {\n            exeContext.signal?.throwIfAborted();\n            const fieldPath = addPath(path, responseName, parentType.name);\n            const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, asyncPayloadRecord);\n            if (result !== undefined) {\n                results[responseName] = result;\n                if (isPromise(result)) {\n                    containsPromise = true;\n                }\n            }\n        }\n    }\n    catch (error) {\n        if (containsPromise) {\n            // Ensure that any promises returned by other fields are handled, as they may also reject.\n            return promiseForObject(results, exeContext.signal).finally(() => {\n                throw error;\n            });\n        }\n        throw error;\n    }\n    // If there are no promises, we can just return the object\n    if (!containsPromise) {\n        return results;\n    }\n    // Otherwise, results is a map from field name to the result of resolving that\n    // field, which is possibly a promise. Return a promise that will return this\n    // same map, but with any promises replaced with the values they resolved to.\n    return promiseForObject(results, exeContext.signal);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\nfunction executeField(exeContext, parentType, source, fieldNodes, path, asyncPayloadRecord) {\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n    if (!fieldDef) {\n        return;\n    }\n    const returnType = fieldDef.type;\n    const resolveFn = fieldDef.resolve ?? exeContext.fieldResolver;\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n    // Get the resolve function, regardless of if its result is normal or abrupt (error).\n    try {\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        // TODO: find a way to memoize, in case this field is within a List type.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        const result = resolveFn(source, args, contextValue, info);\n        let completed;\n        if (isPromise(result)) {\n            completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved, asyncPayloadRecord));\n        }\n        else {\n            completed = completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n        }\n        if (isPromise(completed)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            return completed.then(undefined, rawError => {\n                if (rawError instanceof AggregateError) {\n                    return new AggregateError(rawError.errors.map(rawErrorItem => {\n                        rawErrorItem = coerceError(rawErrorItem);\n                        const error = locatedError(rawErrorItem, fieldNodes, pathToArray(path));\n                        const handledError = handleFieldError(error, returnType, errors);\n                        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                        return handledError;\n                    }));\n                }\n                rawError = coerceError(rawError);\n                const error = locatedError(rawError, fieldNodes, pathToArray(path));\n                const handledError = handleFieldError(error, returnType, errors);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return completed;\n    }\n    catch (rawError) {\n        if (rawError instanceof AggregateError) {\n            return new AggregateError(rawError.errors.map(rawErrorItem => {\n                const coercedError = coerceError(rawErrorItem);\n                const error = locatedError(coercedError, fieldNodes, pathToArray(path));\n                return handleFieldError(error, returnType, errors);\n            }));\n        }\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(path));\n        const handledError = handleFieldError(error, returnType, errors);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        return handledError;\n    }\n}\n/**\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n    // The resolve function's optional fourth argument is a collection of\n    // information about the current execution state.\n    return {\n        fieldName: fieldDef.name,\n        fieldNodes,\n        returnType: fieldDef.type,\n        parentType,\n        path,\n        schema: exeContext.schema,\n        fragments: exeContext.fragments,\n        rootValue: exeContext.rootValue,\n        operation: exeContext.operation,\n        variableValues: exeContext.variableValues,\n        signal: exeContext.signal,\n    };\n}\nexport const CRITICAL_ERROR = 'CRITICAL_ERROR';\nfunction handleFieldError(error, returnType, errors) {\n    // If the field type is non-nullable, then it is resolved without any\n    // protection from errors, however it still properly locates the error.\n    if (isNonNullType(returnType)) {\n        throw error;\n    }\n    if (error.extensions?.[CRITICAL_ERROR]) {\n        throw error;\n    }\n    // Otherwise, error protection is applied, logging the error and resolving\n    // a null value for this field if one is encountered.\n    errors.push(error);\n    return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If result is an Error, throw a located error.\n    if (result instanceof Error) {\n        throw result;\n    }\n    // If field type is NonNull, complete for inner type, and throw field error\n    // if result is null.\n    if (isNonNullType(returnType)) {\n        const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result, asyncPayloadRecord);\n        if (completed === null) {\n            throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n        }\n        return completed;\n    }\n    // If result value is null or undefined then return null.\n    if (result == null) {\n        return null;\n    }\n    // If field type is List, complete each item in the list with the inner type\n    if (isListType(returnType)) {\n        return completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n    // returning null if serialization is not possible.\n    if (isLeafType(returnType)) {\n        return completeLeafValue(returnType, result);\n    }\n    // If field type is an abstract type, Interface or Union, determine the\n    // runtime Object type and complete for that type.\n    if (isAbstractType(returnType)) {\n        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is Object, execute and complete all sub-selections.\n    if (isObjectType(returnType)) {\n        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    /* c8 ignore next 6 */\n    // Not reachable, all possible output types have been considered.\n    console.assert(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Returns an object containing the `@stream` arguments if a field should be\n * streamed based on the experimental flag, stream directive present and\n * not disabled by the \"if\" argument.\n */\nfunction getStreamValues(exeContext, fieldNodes, path) {\n    // do not stream inner lists of multi-dimensional lists\n    if (typeof path.key === 'number') {\n        return;\n    }\n    // validation only allows equivalent streams on multiple fields, so it is\n    // safe to only check the first fieldNode for the stream directive\n    const stream = getDirectiveValues(GraphQLStreamDirective, fieldNodes[0], exeContext.variableValues);\n    if (!stream) {\n        return;\n    }\n    if (stream.if === false) {\n        return;\n    }\n    invariant(typeof stream['initialCount'] === 'number', 'initialCount must be a number');\n    invariant(stream['initialCount'] >= 0, 'initialCount must be a positive integer');\n    return {\n        initialCount: stream['initialCount'],\n        label: typeof stream['label'] === 'string' ? stream['label'] : undefined,\n    };\n}\n/**\n * Complete a async iterator value by completing the result and calling\n * recursively until all the results are completed.\n */\nasync function completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord) {\n    if (exeContext.signal && iterator.return) {\n        registerAbortSignalListener(exeContext.signal, () => {\n            iterator.return?.();\n        });\n    }\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    let containsPromise = false;\n    const completedResults = [];\n    let index = 0;\n    while (true) {\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            executeStreamIterator(index, iterator, exeContext, fieldNodes, info, itemType, path, stream.label, asyncPayloadRecord);\n            break;\n        }\n        const itemPath = addPath(path, index, undefined);\n        let iteration;\n        try {\n            iteration = await iterator.next();\n            if (iteration.done) {\n                break;\n            }\n        }\n        catch (rawError) {\n            const coercedError = coerceError(rawError);\n            const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n            completedResults.push(handleFieldError(error, itemType, errors));\n            break;\n        }\n        if (completeListItemValue(iteration.value, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index += 1;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const itemType = returnType.ofType;\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    if (isAsyncIterable(result)) {\n        const iterator = result[Symbol.asyncIterator]();\n        return completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord);\n    }\n    if (!isIterableObject(result)) {\n        throw createGraphQLError(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n    }\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    // This is specified as a simple map, however we're optimizing the path\n    // where the list contains no Promises by avoiding creating another Promise.\n    let containsPromise = false;\n    let previousAsyncPayloadRecord = asyncPayloadRecord;\n    const completedResults = [];\n    let index = 0;\n    for (const item of result) {\n        // No need to modify the info object containing the path,\n        // since from here on it is not ever accessed by resolver functions.\n        const itemPath = addPath(path, index, undefined);\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            previousAsyncPayloadRecord = executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, stream.label, previousAsyncPayloadRecord);\n            index++;\n            continue;\n        }\n        if (completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index++;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list item value by adding it to the completed results.\n *\n * Returns true if the value is a Promise.\n */\nfunction completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord) {\n    try {\n        let completedItem;\n        if (isPromise(item)) {\n            completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n        }\n        else {\n            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        }\n        if (isPromise(completedItem)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            completedResults.push(completedItem.then(undefined, rawError => {\n                rawError = coerceError(rawError);\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            }));\n            return true;\n        }\n        completedResults.push(completedItem);\n    }\n    catch (rawError) {\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n        const handledError = handleFieldError(error, itemType, errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        completedResults.push(handledError);\n    }\n    return false;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n    let serializedResult;\n    // Note: We transform GraphQLError to Error in order to be consistent with\n    // how non-null checks work later on.\n    // See https://github.com/kamilkisiela/graphql-hive/pull/2299\n    // See https://github.com/n1ru4l/envelop/issues/1808\n    try {\n        serializedResult = returnType.serialize(result);\n    }\n    catch (err) {\n        if (err instanceof GraphQLError) {\n            throw new Error(err.message);\n        }\n        throw err;\n    }\n    if (serializedResult == null) {\n        throw new Error(`Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n            `return non-nullable value, returned: ${inspect(serializedResult)}`);\n    }\n    return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const resolveTypeFn = returnType.resolveType ?? exeContext.typeResolver;\n    const contextValue = exeContext.contextValue;\n    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n    if (isPromise(runtimeType)) {\n        return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord));\n    }\n    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n    if (runtimeTypeName == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, { nodes: fieldNodes });\n    }\n    // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n    // TODO: remove in 17.0.0 release\n    if (isObjectType(runtimeTypeName)) {\n        if (versionInfo.major >= 16) {\n            throw createGraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n        }\n        runtimeTypeName = runtimeTypeName.name;\n    }\n    if (typeof runtimeTypeName !== 'string') {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n            `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`);\n    }\n    const runtimeType = exeContext.schema.getType(runtimeTypeName);\n    if (runtimeType == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, { nodes: fieldNodes });\n    }\n    if (!isObjectType(runtimeType)) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, { nodes: fieldNodes });\n    }\n    if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n        throw createGraphQLError(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, { nodes: fieldNodes });\n    }\n    return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If there is an isTypeOf predicate function, call it with the\n    // current result. If isTypeOf returns false, then raise an error rather\n    // than continuing execution.\n    if (returnType.isTypeOf) {\n        const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n        if (isPromise(isTypeOf)) {\n            return isTypeOf.then(resolvedIsTypeOf => {\n                if (!resolvedIsTypeOf) {\n                    throw invalidReturnTypeError(returnType, result, fieldNodes);\n                }\n                return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n            });\n        }\n        if (!isTypeOf) {\n            throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n    }\n    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n    return createGraphQLError(`Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`, {\n        nodes: fieldNodes,\n    });\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord) {\n    // Collect sub-fields to execute to complete this value.\n    const { fields: subFieldNodes, patches: subPatches } = collectSubfields(exeContext, returnType, fieldNodes);\n    const subFields = executeFields(exeContext, returnType, result, path, subFieldNodes, asyncPayloadRecord);\n    for (const subPatch of subPatches) {\n        const { label, fields: subPatchFieldNodes } = subPatch;\n        executeDeferredFragment(exeContext, returnType, result, subPatchFieldNodes, label, path, asyncPayloadRecord);\n    }\n    return subFields;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nexport const defaultTypeResolver = function (value, contextValue, info, abstractType) {\n    // First, look for `__typename`.\n    if (isObjectLike(value) && typeof value['__typename'] === 'string') {\n        return value['__typename'];\n    }\n    // Otherwise, test each possible type.\n    const possibleTypes = info.schema.getPossibleTypes(abstractType);\n    const promisedIsTypeOfResults = [];\n    for (let i = 0; i < possibleTypes.length; i++) {\n        const type = possibleTypes[i];\n        if (type.isTypeOf) {\n            const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n            if (isPromise(isTypeOfResult)) {\n                promisedIsTypeOfResults[i] = isTypeOfResult;\n            }\n            else if (isTypeOfResult) {\n                return type.name;\n            }\n        }\n    }\n    if (promisedIsTypeOfResults.length) {\n        return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n            for (let i = 0; i < isTypeOfResults.length; i++) {\n                if (isTypeOfResults[i]) {\n                    return possibleTypes[i].name;\n                }\n            }\n        });\n    }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\nexport const defaultFieldResolver = function (source, args, contextValue, info) {\n    // ensure source is a value for which property access is acceptable.\n    if (isObjectLike(source) || typeof source === 'function') {\n        const property = source[info.fieldName];\n        if (typeof property === 'function') {\n            return source[info.fieldName](args, contextValue, info);\n        }\n        return property;\n    }\n};\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with descriptive\n * errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription resolver\n * logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of result representing the response stream.\n *\n * Each result may be an ExecutionResult with no `hasNext` (if executing the\n * event did not use `@defer` or `@stream`), or an\n * `InitialIncrementalExecutionResult` or `SubsequentIncrementalExecutionResult`\n * (if executing the event used `@defer` or `@stream`). In the case of\n * incremental execution results, each event produces a single\n * `InitialIncrementalExecutionResult` followed by one or more\n * `SubsequentIncrementalExecutionResult`s; all but the last have `hasNext: true`,\n * and the last has `hasNext: false`. There is no interleaving between results\n * generated from the same original event.\n *\n * Accepts an object with named arguments.\n */\nexport function subscribe(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...(e.extensions?.['http'] || {}),\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    const resultOrStream = createSourceEventStreamImpl(exeContext);\n    if (isPromise(resultOrStream)) {\n        return resultOrStream.then(resolvedResultOrStream => mapSourceToResponse(exeContext, resolvedResultOrStream));\n    }\n    return mapSourceToResponse(exeContext, resultOrStream);\n}\nexport function flattenIncrementalResults(incrementalResults) {\n    const subsequentIterator = incrementalResults.subsequentResults;\n    let initialResultSent = false;\n    let done = false;\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next() {\n            if (done) {\n                return fakePromise({ value: undefined, done });\n            }\n            if (initialResultSent) {\n                return subsequentIterator.next();\n            }\n            initialResultSent = true;\n            return fakePromise({\n                value: incrementalResults.initialResult,\n                done,\n            });\n        },\n        return() {\n            done = true;\n            return subsequentIterator.return();\n        },\n        throw(error) {\n            done = true;\n            return subsequentIterator.throw(error);\n        },\n        [DisposableSymbols.asyncDispose]() {\n            done = true;\n            return subsequentIterator?.[DisposableSymbols.asyncDispose]?.();\n        },\n    };\n}\nasync function* ensureAsyncIterable(someExecutionResult) {\n    if ('initialResult' in someExecutionResult) {\n        yield* flattenIncrementalResults(someExecutionResult);\n    }\n    else {\n        yield someExecutionResult;\n    }\n}\nfunction mapSourceToResponse(exeContext, resultOrStream) {\n    if (!isAsyncIterable(resultOrStream)) {\n        return resultOrStream;\n    }\n    // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n    return flattenAsyncIterable(mapAsyncIterator(resultOrStream, async (payload) => ensureAsyncIterable(await executeImpl(buildPerEventExecutionContext(exeContext, payload))), (error) => {\n        if (error instanceof AggregateError) {\n            throw new AggregateError(error.errors.map(e => wrapError(e, exeContext.operation)), error.message);\n        }\n        throw wrapError(error, exeContext.operation);\n    }));\n}\nfunction wrapError(error, operation) {\n    return createGraphQLError(error.message, {\n        originalError: error,\n        nodes: [operation],\n    });\n}\nfunction createSourceEventStreamImpl(exeContext) {\n    try {\n        const eventStream = executeSubscription(exeContext);\n        if (isPromise(eventStream)) {\n            return eventStream.then(undefined, error => ({ errors: [error] }));\n        }\n        return eventStream;\n    }\n    catch (error) {\n        return { errors: [error] };\n    }\n}\nfunction executeSubscription(exeContext) {\n    const { schema, fragments, operation, variableValues, rootValue } = exeContext;\n    const rootType = schema.getSubscriptionType();\n    if (rootType == null) {\n        throw createGraphQLError('Schema is not configured to execute subscription operation.', {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldName = fieldNodes[0].name.value;\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n    if (!fieldDef) {\n        throw createGraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n            nodes: fieldNodes,\n        });\n    }\n    const path = addPath(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n    try {\n        // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n        // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        // Call the `subscribe()` resolver or the default resolver to produce an\n        // AsyncIterable yielding raw payloads.\n        const resolveFn = fieldDef.subscribe ?? exeContext.subscribeFieldResolver;\n        const result = resolveFn(rootValue, args, contextValue, info);\n        if (isPromise(result)) {\n            return result.then(assertEventStream).then(undefined, error => {\n                throw locatedError(error, fieldNodes, pathToArray(path));\n            });\n        }\n        return assertEventStream(result, exeContext.signal);\n    }\n    catch (error) {\n        throw locatedError(error, fieldNodes, pathToArray(path));\n    }\n}\nfunction assertEventStream(result, signal) {\n    if (result instanceof Error) {\n        throw result;\n    }\n    // Assert field returned an event stream, otherwise yield an error.\n    if (!isAsyncIterable(result)) {\n        throw createGraphQLError('Subscription field must return Async Iterable. ' + `Received: ${inspect(result)}.`);\n    }\n    if (signal) {\n        return {\n            [Symbol.asyncIterator]() {\n                const asyncIterator = result[Symbol.asyncIterator]();\n                if (asyncIterator.return) {\n                    registerAbortSignalListener(signal, () => {\n                        asyncIterator.return?.();\n                    });\n                }\n                return asyncIterator;\n            },\n        };\n    }\n    return result;\n}\nfunction executeDeferredFragment(exeContext, parentType, sourceValue, fields, label, path, parentContext) {\n    const asyncPayloadRecord = new DeferredFragmentRecord({\n        label,\n        path,\n        parentContext,\n        exeContext,\n    });\n    let promiseOrData;\n    try {\n        promiseOrData = executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord);\n        if (isPromise(promiseOrData)) {\n            promiseOrData = promiseOrData.then(null, e => {\n                asyncPayloadRecord.errors.push(e);\n                return null;\n            });\n        }\n    }\n    catch (e) {\n        asyncPayloadRecord.errors.push(e);\n        promiseOrData = null;\n    }\n    asyncPayloadRecord.addData(promiseOrData);\n}\nfunction executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, label, parentContext) {\n    const asyncPayloadRecord = new StreamRecord({\n        label,\n        path: itemPath,\n        parentContext,\n        exeContext,\n    });\n    let completedItem;\n    try {\n        try {\n            if (isPromise(item)) {\n                completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n            }\n            else {\n                completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n            }\n            if (isPromise(completedItem)) {\n                // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n                // to take a second callback for the error case.\n                completedItem = completedItem.then(undefined, rawError => {\n                    rawError = coerceError(rawError);\n                    const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                    const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                    filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                    return handledError;\n                });\n            }\n        }\n        catch (rawError) {\n            const coercedError = coerceError(rawError);\n            const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n            completedItem = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n            filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        }\n    }\n    catch (error) {\n        asyncPayloadRecord.errors.push(error);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        asyncPayloadRecord.addItems(null);\n        return asyncPayloadRecord;\n    }\n    let completedItems;\n    if (isPromise(completedItem)) {\n        completedItems = completedItem.then(value => [value], error => {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            return null;\n        });\n    }\n    else {\n        completedItems = [completedItem];\n    }\n    asyncPayloadRecord.addItems(completedItems);\n    return asyncPayloadRecord;\n}\nasync function executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath) {\n    let item;\n    try {\n        const { value, done } = await iterator.next();\n        if (done) {\n            asyncPayloadRecord.setIsCompletedIterator();\n            return { done, value: undefined };\n        }\n        item = value;\n    }\n    catch (rawError) {\n        const coercedError = coerceError(rawError);\n        const error = locatedError(coercedError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        // don't continue if iterator throws\n        return { done: true, value };\n    }\n    let completedItem;\n    try {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        if (isPromise(completedItem)) {\n            completedItem = completedItem.then(undefined, rawError => {\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return { done: false, value: completedItem };\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        return { done: false, value };\n    }\n}\nasync function executeStreamIterator(initialIndex, iterator, exeContext, fieldNodes, info, itemType, path, label, parentContext) {\n    let index = initialIndex;\n    let previousAsyncPayloadRecord = parentContext ?? undefined;\n    while (true) {\n        const itemPath = addPath(path, index, undefined);\n        const asyncPayloadRecord = new StreamRecord({\n            label,\n            path: itemPath,\n            parentContext: previousAsyncPayloadRecord,\n            iterator,\n            exeContext,\n        });\n        let iteration;\n        try {\n            iteration = await executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath);\n        }\n        catch (error) {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            asyncPayloadRecord.addItems(null);\n            // entire stream has errored and bubbled upwards\n            if (iterator?.return) {\n                iterator.return().catch(() => {\n                    // ignore errors\n                });\n            }\n            return;\n        }\n        const { done, value: completedItem } = iteration;\n        let completedItems;\n        if (isPromise(completedItem)) {\n            completedItems = completedItem.then(value => [value], error => {\n                asyncPayloadRecord.errors.push(error);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return null;\n            });\n        }\n        else {\n            completedItems = [completedItem];\n        }\n        asyncPayloadRecord.addItems(completedItems);\n        if (done) {\n            break;\n        }\n        previousAsyncPayloadRecord = asyncPayloadRecord;\n        index++;\n    }\n}\nfunction filterSubsequentPayloads(exeContext, nullPath, currentAsyncRecord) {\n    const nullPathArray = pathToArray(nullPath);\n    exeContext.subsequentPayloads.forEach(asyncRecord => {\n        if (asyncRecord === currentAsyncRecord) {\n            // don't remove payload from where error originates\n            return;\n        }\n        for (let i = 0; i < nullPathArray.length; i++) {\n            if (asyncRecord.path[i] !== nullPathArray[i]) {\n                // asyncRecord points to a path unaffected by this payload\n                return;\n            }\n        }\n        // asyncRecord path points to nulled error field\n        if (isStreamPayload(asyncRecord) && asyncRecord.iterator?.return) {\n            asyncRecord.iterator.return().catch(() => {\n                // ignore error\n            });\n        }\n        exeContext.subsequentPayloads.delete(asyncRecord);\n    });\n}\nfunction getCompletedIncrementalResults(exeContext) {\n    const incrementalResults = [];\n    for (const asyncPayloadRecord of exeContext.subsequentPayloads) {\n        const incrementalResult = {};\n        if (!asyncPayloadRecord.isCompleted) {\n            continue;\n        }\n        exeContext.subsequentPayloads.delete(asyncPayloadRecord);\n        if (isStreamPayload(asyncPayloadRecord)) {\n            const items = asyncPayloadRecord.items;\n            if (asyncPayloadRecord.isCompletedIterator) {\n                // async iterable resolver just finished but there may be pending payloads\n                continue;\n            }\n            incrementalResult.items = items;\n        }\n        else {\n            const data = asyncPayloadRecord.data;\n            incrementalResult.data = data ?? null;\n        }\n        incrementalResult.path = asyncPayloadRecord.path;\n        if (asyncPayloadRecord.label) {\n            incrementalResult.label = asyncPayloadRecord.label;\n        }\n        if (asyncPayloadRecord.errors.length > 0) {\n            incrementalResult.errors = asyncPayloadRecord.errors;\n        }\n        incrementalResults.push(incrementalResult);\n    }\n    return incrementalResults;\n}\nfunction yieldSubsequentPayloads(exeContext) {\n    let isDone = false;\n    const abortPromise = exeContext.signal ? getAbortPromise(exeContext.signal) : undefined;\n    async function next() {\n        if (isDone) {\n            return { value: undefined, done: true };\n        }\n        const subSequentPayloadPromises = Array.from(exeContext.subsequentPayloads).map(record => record.promise);\n        if (abortPromise) {\n            await Promise.race([abortPromise, ...subSequentPayloadPromises]);\n        }\n        else {\n            await Promise.race(subSequentPayloadPromises);\n        }\n        if (isDone) {\n            // a different call to next has exhausted all payloads\n            return { value: undefined, done: true };\n        }\n        const incremental = getCompletedIncrementalResults(exeContext);\n        const hasNext = exeContext.subsequentPayloads.size > 0;\n        if (!incremental.length && hasNext) {\n            return next();\n        }\n        if (!hasNext) {\n            isDone = true;\n        }\n        return {\n            value: incremental.length ? { incremental, hasNext } : { hasNext },\n            done: false,\n        };\n    }\n    function returnStreamIterators() {\n        const promises = [];\n        exeContext.subsequentPayloads.forEach(asyncPayloadRecord => {\n            if (isStreamPayload(asyncPayloadRecord) && asyncPayloadRecord.iterator?.return) {\n                promises.push(asyncPayloadRecord.iterator.return());\n            }\n        });\n        return Promise.all(promises);\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next,\n        async return() {\n            await returnStreamIterators();\n            isDone = true;\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            await returnStreamIterators();\n            isDone = true;\n            throw error;\n        },\n        async [DisposableSymbols.asyncDispose]() {\n            await returnStreamIterators();\n            isDone = true;\n        },\n    };\n}\nclass DeferredFragmentRecord {\n    type;\n    errors;\n    label;\n    path;\n    promise;\n    data;\n    parentContext;\n    isCompleted;\n    _exeContext;\n    _resolve;\n    constructor(opts) {\n        this.type = 'defer';\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.data = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(data => {\n            this.data = data;\n            this.isCompleted = true;\n        });\n    }\n    addData(data) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => data));\n            return;\n        }\n        this._resolve?.(data);\n    }\n}\nclass StreamRecord {\n    type;\n    errors;\n    label;\n    path;\n    items;\n    promise;\n    parentContext;\n    iterator;\n    isCompletedIterator;\n    isCompleted;\n    _exeContext;\n    _resolve;\n    constructor(opts) {\n        this.type = 'stream';\n        this.items = null;\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.iterator = opts.iterator;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.items = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(items => {\n            this.items = items;\n            this.isCompleted = true;\n        });\n    }\n    addItems(items) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => items));\n            return;\n        }\n        this._resolve?.(items);\n    }\n    setIsCompletedIterator() {\n        this.isCompletedIterator = true;\n    }\n}\nfunction isStreamPayload(asyncPayload) {\n    return asyncPayload.type === 'stream';\n}\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\nexport function getFieldDef(schema, parentType, fieldNode) {\n    const fieldName = fieldNode.name.value;\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return SchemaMetaFieldDef;\n    }\n    else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return TypeMetaFieldDef;\n    }\n    else if (fieldName === TypeNameMetaFieldDef.name) {\n        return TypeNameMetaFieldDef;\n    }\n    return parentType.getFields()[fieldName];\n}\nexport function isIncrementalResult(result) {\n    return 'incremental' in result;\n}\n", "import { getOperationAST } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { memoize1, } from '@graphql-tools/utils';\nimport { execute, flattenIncrementalResults, subscribe } from './execute.js';\nexport function normalizedExecutor(args) {\n    const operationAST = getOperationAST(args.document, args.operationName);\n    if (operationAST == null) {\n        throw new Error('Must provide an operation.');\n    }\n    if (operationAST.operation === 'subscription') {\n        return subscribe(args);\n    }\n    return new ValueOrPromise(() => execute(args))\n        .then((result) => {\n        if ('initialResult' in result) {\n            return flattenIncrementalResults(result);\n        }\n        return result;\n    })\n        .resolve();\n}\nexport const executorFromSchema = memoize1(function executorFromSchema(schema) {\n    return function schemaExecutor(request) {\n        return normalizedExecutor({\n            schema,\n            document: request.document,\n            variableValues: request.variables,\n            operationName: request.operationName,\n            rootValue: request.rootValue,\n            contextValue: request.context,\n            signal: request.signal || request.info?.signal,\n        });\n    };\n});\n", "export * from './execute.js';\nexport * from './values.js';\nexport * from './normalizedExecutor.js';\n", "export * from './execution/index.js';\n", "module.exports.fetch = globalThis.fetch;\nmodule.exports.Headers = globalThis.Headers;\nmodule.exports.Request = globalThis.Request;\nmodule.exports.Response = globalThis.Response;\nmodule.exports.FormData = globalThis.FormData;\nmodule.exports.ReadableStream = globalThis.ReadableStream;\nmodule.exports.WritableStream = globalThis.WritableStream;\nmodule.exports.TransformStream = globalThis.TransformStream;\nmodule.exports.CompressionStream = globalThis.CompressionStream;\nmodule.exports.DecompressionStream = globalThis.DecompressionStream;\nmodule.exports.TextDecoderStream = globalThis.TextDecoderStream;\nmodule.exports.TextEncoderStream = globalThis.TextEncoderStream;\nmodule.exports.Blob = globalThis.Blob;\nmodule.exports.File = globalThis.File;\nmodule.exports.crypto = globalThis.crypto;\nmodule.exports.btoa = globalThis.btoa;\nmodule.exports.TextEncoder = globalThis.TextEncoder;\nmodule.exports.TextDecoder = globalThis.TextDecoder;\nmodule.exports.URLPattern = globalThis.URLPattern;\nmodule.exports.URL = globalThis.URL;\nmodule.exports.URLSearchParams = globalThis.URLSearchParams;\nmodule.exports.createFetch = () => globalThis;\n", "export function isAsyncIterable(body) {\n    return (body != null && typeof body === 'object' && typeof body[Symbol.asyncIterator] === 'function');\n}\nfunction getPort(nodeRequest) {\n    if (nodeRequest.socket?.localPort) {\n        return nodeRequest.socket?.localPort;\n    }\n    const hostInHeader = nodeRequest.headers?.[':authority'] || nodeRequest.headers?.host;\n    const portInHeader = hostInHeader?.split(':')?.[1];\n    if (portInHeader) {\n        return portInHeader;\n    }\n    return 80;\n}\nfunction getHostnameWithPort(nodeRequest) {\n    if (nodeRequest.headers?.[':authority']) {\n        return nodeRequest.headers?.[':authority'];\n    }\n    if (nodeRequest.headers?.host) {\n        return nodeRequest.headers?.host;\n    }\n    const port = getPort(nodeRequest);\n    if (nodeRequest.hostname) {\n        return nodeRequest.hostname + ':' + port;\n    }\n    const localIp = nodeRequest.socket?.localAddress;\n    if (localIp && !localIp?.includes('::') && !localIp?.includes('ffff')) {\n        return `${localIp}:${port}`;\n    }\n    return 'localhost';\n}\nfunction buildFullUrl(nodeRequest) {\n    const hostnameWithPort = getHostnameWithPort(nodeRequest);\n    const protocol = nodeRequest.protocol || (nodeRequest.socket?.encrypted ? 'https' : 'http');\n    const endpoint = nodeRequest.originalUrl || nodeRequest.url || '/graphql';\n    return `${protocol}://${hostnameWithPort}${endpoint}`;\n}\nfunction isRequestBody(body) {\n    const stringTag = body[Symbol.toStringTag];\n    if (typeof body === 'string' ||\n        stringTag === 'Uint8Array' ||\n        stringTag === 'Blob' ||\n        stringTag === 'FormData' ||\n        stringTag === 'URLSearchParams' ||\n        isAsyncIterable(body)) {\n        return true;\n    }\n    return false;\n}\nlet bunNodeCompatModeWarned = false;\nexport const nodeRequestResponseMap = new WeakMap();\nexport function normalizeNodeRequest(nodeRequest, fetchAPI) {\n    const rawRequest = nodeRequest.raw || nodeRequest.req || nodeRequest;\n    let fullUrl = buildFullUrl(rawRequest);\n    if (nodeRequest.query) {\n        const url = new fetchAPI.URL(fullUrl);\n        for (const key in nodeRequest.query) {\n            url.searchParams.set(key, nodeRequest.query[key]);\n        }\n        fullUrl = url.toString();\n    }\n    const nodeResponse = nodeRequestResponseMap.get(nodeRequest);\n    nodeRequestResponseMap.delete(nodeRequest);\n    let normalizedHeaders = nodeRequest.headers;\n    if (nodeRequest.headers?.[':method']) {\n        normalizedHeaders = {};\n        for (const key in nodeRequest.headers) {\n            if (!key.startsWith(':')) {\n                normalizedHeaders[key] = nodeRequest.headers[key];\n            }\n        }\n    }\n    const controller = new AbortController();\n    if (nodeResponse?.once) {\n        const closeEventListener = () => {\n            if (!controller.signal.aborted) {\n                Object.defineProperty(rawRequest, 'aborted', { value: true });\n                controller.abort(nodeResponse.errored ?? undefined);\n            }\n        };\n        nodeResponse.once('error', closeEventListener);\n        nodeResponse.once('close', closeEventListener);\n        nodeResponse.once('finish', () => {\n            nodeResponse.removeListener('close', closeEventListener);\n        });\n    }\n    if (nodeRequest.method === 'GET' || nodeRequest.method === 'HEAD') {\n        return new fetchAPI.Request(fullUrl, {\n            method: nodeRequest.method,\n            headers: normalizedHeaders,\n            signal: controller.signal,\n        });\n    }\n    /**\n     * Some Node server frameworks like Serverless Express sends a dummy object with body but as a Buffer not string\n     * so we do those checks to see is there something we can use directly as BodyInit\n     * because the presence of body means the request stream is already consumed and,\n     * rawRequest cannot be used as BodyInit/ReadableStream by Fetch API in this case.\n     */\n    const maybeParsedBody = nodeRequest.body;\n    if (maybeParsedBody != null && Object.keys(maybeParsedBody).length > 0) {\n        if (isRequestBody(maybeParsedBody)) {\n            return new fetchAPI.Request(fullUrl, {\n                method: nodeRequest.method || 'GET',\n                headers: normalizedHeaders,\n                body: maybeParsedBody,\n                signal: controller.signal,\n            });\n        }\n        const request = new fetchAPI.Request(fullUrl, {\n            method: nodeRequest.method || 'GET',\n            headers: normalizedHeaders,\n            signal: controller.signal,\n        });\n        if (!request.headers.get('content-type')?.includes('json')) {\n            request.headers.set('content-type', 'application/json; charset=utf-8');\n        }\n        return new Proxy(request, {\n            get: (target, prop, receiver) => {\n                switch (prop) {\n                    case 'json':\n                        return async () => maybeParsedBody;\n                    case 'text':\n                        return async () => JSON.stringify(maybeParsedBody);\n                    default:\n                        return Reflect.get(target, prop, receiver);\n                }\n            },\n        });\n    }\n    // Temporary workaround for a bug in Bun Node compat mode\n    if (globalThis.process?.versions?.bun && isReadable(rawRequest)) {\n        if (!bunNodeCompatModeWarned) {\n            bunNodeCompatModeWarned = true;\n            console.warn(`You use Bun Node compatibility mode, which is not recommended!\nIt will affect your performance. Please check our Bun integration recipe, and avoid using 'http' for your server implementation.`);\n        }\n        return new fetchAPI.Request(fullUrl, {\n            method: nodeRequest.method,\n            headers: normalizedHeaders,\n            duplex: 'half',\n            body: new ReadableStream({\n                start(controller) {\n                    rawRequest.on('data', chunk => {\n                        controller.enqueue(chunk);\n                    });\n                    rawRequest.on('error', e => {\n                        controller.error(e);\n                    });\n                    rawRequest.on('end', () => {\n                        controller.close();\n                    });\n                },\n                cancel(e) {\n                    rawRequest.destroy(e);\n                },\n            }),\n            signal: controller.signal,\n        });\n    }\n    // perf: instead of spreading the object, we can just pass it as is and it performs better\n    return new fetchAPI.Request(fullUrl, {\n        method: nodeRequest.method,\n        headers: normalizedHeaders,\n        signal: controller.signal,\n        // @ts-expect-error - AsyncIterable is supported as body\n        body: rawRequest,\n        duplex: 'half',\n    });\n}\nexport function isReadable(stream) {\n    return stream.read != null;\n}\nexport function isNodeRequest(request) {\n    return isReadable(request);\n}\nexport function isServerResponse(stream) {\n    // Check all used functions are defined\n    return (stream != null &&\n        stream.setHeader != null &&\n        stream.end != null &&\n        stream.once != null &&\n        stream.write != null);\n}\nexport function isReadableStream(stream) {\n    return stream != null && stream.getReader != null;\n}\nexport function isFetchEvent(event) {\n    return event != null && event.request != null && event.respondWith != null;\n}\nfunction configureSocket(rawRequest) {\n    rawRequest?.socket?.setTimeout?.(0);\n    rawRequest?.socket?.setNoDelay?.(true);\n    rawRequest?.socket?.setKeepAlive?.(true);\n}\nfunction endResponse(serverResponse) {\n    // @ts-expect-error Avoid arguments adaptor trampoline https://v8.dev/blog/adaptor-frame\n    serverResponse.end(null, null, null);\n}\nasync function sendAsyncIterable(serverResponse, asyncIterable) {\n    let closed = false;\n    const closeEventListener = () => {\n        closed = true;\n    };\n    serverResponse.once('error', closeEventListener);\n    serverResponse.once('close', closeEventListener);\n    serverResponse.once('finish', () => {\n        serverResponse.removeListener('close', closeEventListener);\n    });\n    for await (const chunk of asyncIterable) {\n        if (closed) {\n            break;\n        }\n        const shouldBreak = await new Promise(resolve => {\n            if (!serverResponse\n                // @ts-expect-error http and http2 writes are actually compatible\n                .write(chunk, err => {\n                if (err) {\n                    resolve(true);\n                }\n            })) {\n                if (closed) {\n                    resolve(true);\n                    return;\n                }\n                serverResponse.once('drain', () => {\n                    resolve(false);\n                });\n            }\n        });\n        if (shouldBreak) {\n            break;\n        }\n    }\n    endResponse(serverResponse);\n}\nexport function sendNodeResponse(fetchResponse, serverResponse, nodeRequest) {\n    if (serverResponse.closed || serverResponse.destroyed || serverResponse.writableEnded) {\n        return;\n    }\n    if (!fetchResponse) {\n        serverResponse.statusCode = 404;\n        endResponse(serverResponse);\n        return;\n    }\n    serverResponse.statusCode = fetchResponse.status;\n    serverResponse.statusMessage = fetchResponse.statusText;\n    let setCookiesSet = false;\n    fetchResponse.headers.forEach((value, key) => {\n        if (key === 'set-cookie') {\n            if (setCookiesSet) {\n                return;\n            }\n            setCookiesSet = true;\n            const setCookies = fetchResponse.headers.getSetCookie?.();\n            if (setCookies) {\n                serverResponse.setHeader('set-cookie', setCookies);\n                return;\n            }\n        }\n        serverResponse.setHeader(key, value);\n    });\n    // Optimizations for node-fetch\n    const bufOfRes = fetchResponse._buffer;\n    if (bufOfRes) {\n        // @ts-expect-error http and http2 writes are actually compatible\n        serverResponse.write(bufOfRes);\n        endResponse(serverResponse);\n        return;\n    }\n    // Other fetch implementations\n    const fetchBody = fetchResponse.body;\n    if (fetchBody == null) {\n        endResponse(serverResponse);\n        return;\n    }\n    if (fetchBody[Symbol.toStringTag] === 'Uint8Array') {\n        serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(fetchBody);\n        endResponse(serverResponse);\n        return;\n    }\n    configureSocket(nodeRequest);\n    if (isReadable(fetchBody)) {\n        serverResponse.once('close', () => {\n            fetchBody.destroy();\n        });\n        fetchBody.pipe(serverResponse);\n        return;\n    }\n    if (isReadableStream(fetchBody)) {\n        return sendReadableStream(nodeRequest, serverResponse, fetchBody);\n    }\n    if (isAsyncIterable(fetchBody)) {\n        return sendAsyncIterable(serverResponse, fetchBody);\n    }\n}\nasync function sendReadableStream(nodeRequest, serverResponse, readableStream) {\n    const reader = readableStream.getReader();\n    nodeRequest?.once?.('error', err => {\n        reader.cancel(err);\n    });\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        if (!serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(value)) {\n            await new Promise(resolve => serverResponse.once('drain', resolve));\n        }\n    }\n    endResponse(serverResponse);\n}\nexport function isRequestInit(val) {\n    return (val != null &&\n        typeof val === 'object' &&\n        ('body' in val ||\n            'cache' in val ||\n            'credentials' in val ||\n            'headers' in val ||\n            'integrity' in val ||\n            'keepalive' in val ||\n            'method' in val ||\n            'mode' in val ||\n            'redirect' in val ||\n            'referrer' in val ||\n            'referrerPolicy' in val ||\n            'signal' in val ||\n            'window' in val));\n}\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#copying_accessors\nexport function completeAssign(...args) {\n    const [target, ...sources] = args.filter(arg => arg != null && typeof arg === 'object');\n    sources.forEach(source => {\n        // modified Object.keys to Object.getOwnPropertyNames\n        // because Object.keys only returns enumerable properties\n        const descriptors = Object.getOwnPropertyNames(source).reduce((descriptors, key) => {\n            const descriptor = Object.getOwnPropertyDescriptor(source, key);\n            if (descriptor) {\n                descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n            }\n            return descriptors;\n        }, {});\n        // By default, Object.assign copies enumerable Symbols, too\n        Object.getOwnPropertySymbols(source).forEach(sym => {\n            const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n            if (descriptor?.enumerable) {\n                descriptors[sym] = descriptor;\n            }\n        });\n        Object.defineProperties(target, descriptors);\n    });\n    return target;\n}\nexport function isPromise(val) {\n    return val?.then != null;\n}\nexport function iterateAsyncVoid(iterable, callback) {\n    const iterator = iterable[Symbol.iterator]();\n    let stopEarlyFlag = false;\n    function stopEarlyFn() {\n        stopEarlyFlag = true;\n    }\n    function iterate() {\n        const { done: endOfIterator, value } = iterator.next();\n        if (endOfIterator) {\n            return;\n        }\n        const result$ = callback(value, stopEarlyFn);\n        if (isPromise(result$)) {\n            return result$.then(() => {\n                if (stopEarlyFlag) {\n                    return;\n                }\n                return iterate();\n            });\n        }\n        if (stopEarlyFlag) {\n            return;\n        }\n        return iterate();\n    }\n    return iterate();\n}\nexport function handleErrorFromRequestHandler(error, ResponseCtor) {\n    return new ResponseCtor(error.stack || error.message || error.toString(), {\n        status: error.status || 500,\n    });\n}\nexport function isolateObject(originalCtx, waitUntilFn) {\n    if (originalCtx == null) {\n        if (waitUntilFn == null) {\n            return {};\n        }\n        return {\n            waitUntil: waitUntilFn,\n        };\n    }\n    return completeAssign(Object.create(originalCtx), {\n        waitUntil: waitUntilFn,\n    }, originalCtx);\n}\nexport function createDeferredPromise() {\n    let resolveFn;\n    let rejectFn;\n    const promise = new Promise(function deferredPromiseExecutor(resolve, reject) {\n        resolveFn = resolve;\n        rejectFn = reject;\n    });\n    return {\n        promise,\n        get resolve() {\n            return resolveFn;\n        },\n        get reject() {\n            return rejectFn;\n        },\n    };\n}\nexport function handleAbortSignalAndPromiseResponse(response$, abortSignal) {\n    if (abortSignal?.aborted) {\n        throw abortSignal.reason;\n    }\n    if (isPromise(response$) && abortSignal) {\n        const deferred$ = createDeferredPromise();\n        function abortSignalFetchErrorHandler() {\n            deferred$.reject(abortSignal.reason);\n        }\n        abortSignal.addEventListener('abort', abortSignalFetchErrorHandler, { once: true });\n        response$\n            .then(function fetchSuccessHandler(res) {\n            deferred$.resolve(res);\n        })\n            .catch(function fetchErrorHandler(err) {\n            deferred$.reject(err);\n        })\n            .finally(() => {\n            abortSignal.removeEventListener('abort', abortSignalFetchErrorHandler);\n        });\n        return deferred$.promise;\n    }\n    return response$;\n}\nexport const decompressedResponseMap = new WeakMap();\nconst supportedEncodingsByFetchAPI = new WeakMap();\nexport function getSupportedEncodings(fetchAPI) {\n    let supportedEncodings = supportedEncodingsByFetchAPI.get(fetchAPI);\n    if (!supportedEncodings) {\n        const possibleEncodings = ['deflate', 'gzip', 'deflate-raw', 'br'];\n        if (fetchAPI.DecompressionStream?.['supportedFormats']) {\n            supportedEncodings = fetchAPI.DecompressionStream['supportedFormats'];\n        }\n        else {\n            supportedEncodings = possibleEncodings.filter(encoding => {\n                // deflate-raw is not supported in Node.js >v20\n                if (globalThis.process?.version?.startsWith('v2') &&\n                    fetchAPI.DecompressionStream === globalThis.DecompressionStream &&\n                    encoding === 'deflate-raw') {\n                    return false;\n                }\n                try {\n                    // eslint-disable-next-line no-new\n                    new fetchAPI.DecompressionStream(encoding);\n                    return true;\n                }\n                catch {\n                    return false;\n                }\n            });\n        }\n        supportedEncodingsByFetchAPI.set(fetchAPI, supportedEncodings);\n    }\n    return supportedEncodings;\n}\nexport function handleResponseDecompression(response, fetchAPI) {\n    const contentEncodingHeader = response?.headers.get('content-encoding');\n    if (!contentEncodingHeader || contentEncodingHeader === 'none') {\n        return response;\n    }\n    if (!response?.body) {\n        return response;\n    }\n    let decompressedResponse = decompressedResponseMap.get(response);\n    if (!decompressedResponse || decompressedResponse.bodyUsed) {\n        let decompressedBody = response.body;\n        const contentEncodings = contentEncodingHeader.split(',');\n        if (!contentEncodings.every(encoding => getSupportedEncodings(fetchAPI).includes(encoding))) {\n            return new fetchAPI.Response(`Unsupported 'Content-Encoding': ${contentEncodingHeader}`, {\n                status: 415,\n                statusText: 'Unsupported Media Type',\n            });\n        }\n        for (const contentEncoding of contentEncodings) {\n            decompressedBody = decompressedBody.pipeThrough(new fetchAPI.DecompressionStream(contentEncoding));\n        }\n        decompressedResponse = new fetchAPI.Response(decompressedBody, response);\n        decompressedResponseMap.set(response, decompressedResponse);\n    }\n    return decompressedResponse;\n}\nconst terminateEvents = ['SIGINT', 'exit', 'SIGTERM'];\nconst disposableStacks = new Set();\nlet eventListenerRegistered = false;\nfunction ensureEventListenerForDisposableStacks() {\n    if (eventListenerRegistered) {\n        return;\n    }\n    eventListenerRegistered = true;\n    for (const event of terminateEvents) {\n        globalThis.process.once(event, function terminateHandler() {\n            return Promise.allSettled([...disposableStacks].map(stack => !stack.disposed && stack.disposeAsync()));\n        });\n    }\n}\nexport function ensureDisposableStackRegisteredForTerminateEvents(disposableStack) {\n    if (globalThis.process) {\n        ensureEventListenerForDisposableStacks();\n        if (!disposableStacks.has(disposableStack)) {\n            disposableStacks.add(disposableStack);\n            disposableStack.defer(() => {\n                disposableStacks.delete(disposableStack);\n            });\n        }\n    }\n}\n", "import { isPromise } from './utils.js';\nexport function isUWSResponse(res) {\n    return !!res.onData;\n}\nexport function getRequestFromUWSRequest({ req, res, fetchAPI, controller, }) {\n    const method = req.getMethod();\n    let duplex;\n    const chunks = [];\n    const pushFns = [\n        (chunk) => {\n            chunks.push(chunk);\n        },\n    ];\n    const push = (chunk) => {\n        for (const pushFn of pushFns) {\n            pushFn(chunk);\n        }\n    };\n    let stopped = false;\n    const stopFns = [\n        () => {\n            stopped = true;\n        },\n    ];\n    const stop = () => {\n        for (const stopFn of stopFns) {\n            stopFn();\n        }\n    };\n    res.onData(function (ab, isLast) {\n        push(Buffer.from(Buffer.from(ab, 0, ab.byteLength)));\n        if (isLast) {\n            stop();\n        }\n    });\n    let getReadableStream;\n    if (method !== 'get' && method !== 'head') {\n        duplex = 'half';\n        controller.signal.addEventListener('abort', () => {\n            stop();\n        }, { once: true });\n        let readableStream;\n        getReadableStream = () => {\n            if (!readableStream) {\n                readableStream = new fetchAPI.ReadableStream({\n                    start(controller) {\n                        for (const chunk of chunks) {\n                            controller.enqueue(chunk);\n                        }\n                        if (stopped) {\n                            controller.close();\n                            return;\n                        }\n                        pushFns.push((chunk) => {\n                            controller.enqueue(chunk);\n                        });\n                        stopFns.push(() => {\n                            if (controller.desiredSize) {\n                                controller.close();\n                            }\n                        });\n                    },\n                });\n            }\n            return readableStream;\n        };\n    }\n    const headers = new fetchAPI.Headers();\n    req.forEach((key, value) => {\n        headers.append(key, value);\n    });\n    let url = `http://localhost${req.getUrl()}`;\n    const query = req.getQuery();\n    if (query) {\n        url += `?${query}`;\n    }\n    let buffer;\n    function getBody() {\n        if (!getReadableStream) {\n            return null;\n        }\n        if (stopped) {\n            return getBufferFromChunks();\n        }\n        return getReadableStream();\n    }\n    const request = new fetchAPI.Request(url, {\n        method,\n        headers,\n        get body() {\n            return getBody();\n        },\n        signal: controller.signal,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - not in the TS types yet\n        duplex,\n    });\n    function getBufferFromChunks() {\n        if (!buffer) {\n            buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks);\n        }\n        return buffer;\n    }\n    function collectBuffer() {\n        if (stopped) {\n            return fakePromise(getBufferFromChunks());\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                stopFns.push(() => {\n                    resolve(getBufferFromChunks());\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    Object.defineProperties(request, {\n        body: {\n            get() {\n                return getBody();\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        json: {\n            value() {\n                return collectBuffer()\n                    .then(b => b.toString('utf8'))\n                    .then(t => JSON.parse(t));\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        text: {\n            value() {\n                return collectBuffer().then(b => b.toString('utf8'));\n            },\n            configurable: true,\n            enumerable: true,\n        },\n        arrayBuffer: {\n            value() {\n                return collectBuffer();\n            },\n            configurable: true,\n            enumerable: true,\n        },\n    });\n    return request;\n}\nexport function createWritableFromUWS(uwsResponse, fetchAPI) {\n    return new fetchAPI.WritableStream({\n        write(chunk) {\n            uwsResponse.cork(() => {\n                uwsResponse.write(chunk);\n            });\n        },\n        close() {\n            uwsResponse.cork(() => {\n                uwsResponse.end();\n            });\n        },\n    });\n}\nexport function sendResponseToUwsOpts(uwsResponse, fetchResponse, controller, fetchAPI) {\n    if (!fetchResponse) {\n        uwsResponse.writeStatus('404 Not Found');\n        uwsResponse.end();\n        return;\n    }\n    const bufferOfRes = fetchResponse._buffer;\n    if (controller.signal.aborted) {\n        return;\n    }\n    uwsResponse.cork(() => {\n        uwsResponse.writeStatus(`${fetchResponse.status} ${fetchResponse.statusText}`);\n        for (const [key, value] of fetchResponse.headers) {\n            // content-length causes an error with Node.js's fetch\n            if (key !== 'content-length') {\n                if (key === 'set-cookie') {\n                    const setCookies = fetchResponse.headers.getSetCookie?.();\n                    if (setCookies) {\n                        for (const setCookie of setCookies) {\n                            uwsResponse.writeHeader(key, setCookie);\n                        }\n                        continue;\n                    }\n                }\n                uwsResponse.writeHeader(key, value);\n            }\n        }\n        if (bufferOfRes) {\n            uwsResponse.end(bufferOfRes);\n        }\n        else if (!fetchResponse.body) {\n            uwsResponse.end();\n        }\n    });\n    if (bufferOfRes || !fetchResponse.body) {\n        return;\n    }\n    controller.signal.addEventListener('abort', () => {\n        if (!fetchResponse.body?.locked) {\n            fetchResponse.body?.cancel(controller.signal.reason);\n        }\n    }, { once: true });\n    return fetchResponse.body\n        .pipeTo(createWritableFromUWS(uwsResponse, fetchAPI), {\n        signal: controller.signal,\n    })\n        .catch(err => {\n        if (controller.signal.aborted) {\n            return;\n        }\n        throw err;\n    });\n}\nexport function fakePromise(value) {\n    if (isPromise(value)) {\n        return value;\n    }\n    // Write a fake promise to avoid the promise constructor\n    // being called with `new Promise` in the browser.\n    return {\n        then(resolve) {\n            if (resolve) {\n                const callbackResult = resolve(value);\n                if (isPromise(callbackResult)) {\n                    return callbackResult;\n                }\n                return fakePromise(callbackResult);\n            }\n            return this;\n        },\n        catch() {\n            return this;\n        },\n        finally(cb) {\n            if (cb) {\n                const callbackResult = cb();\n                if (isPromise(callbackResult)) {\n                    return callbackResult.then(() => value);\n                }\n                return fakePromise(value);\n            }\n            return this;\n        },\n        [Symbol.toStringTag]: 'Promise',\n    };\n}\n", "import { AsyncDisposableStack, DisposableSymbols } from '@whatwg-node/disposablestack';\nimport * as DefaultFetchAPI from '@whatwg-node/fetch';\nimport { completeAssign, ensureDisposableStackRegisteredForTerminateEvents, handleAbortSignalAndPromiseResponse, handleErrorFromRequestHandler, isFetchEvent, isNodeRequest, isolateObject, isPromise, isRequestInit, isServerResponse, iterateAsyncVoid, nodeRequestResponseMap, normalizeNodeRequest, sendNodeResponse, } from './utils.js';\nimport { fakePromise, getRequestFromUWSRequest, isUWSResponse, sendResponseToUwsOpts, } from './uwebsockets.js';\n// Required for envs like nextjs edge runtime\nfunction isRequestAccessible(serverContext) {\n    try {\n        return !!serverContext?.request;\n    }\n    catch {\n        return false;\n    }\n}\nconst EMPTY_OBJECT = {};\nfunction createServerAdapter(serverAdapterBaseObject, options) {\n    const fetchAPI = {\n        ...DefaultFetchAPI,\n        ...options?.fetchAPI,\n    };\n    const givenHandleRequest = typeof serverAdapterBaseObject === 'function'\n        ? serverAdapterBaseObject\n        : serverAdapterBaseObject.handle;\n    const onRequestHooks = [];\n    const onResponseHooks = [];\n    const waitUntilPromises = new Set();\n    let _disposableStack;\n    function ensureDisposableStack() {\n        if (!_disposableStack) {\n            _disposableStack = new AsyncDisposableStack();\n            if (options?.disposeOnProcessTerminate) {\n                ensureDisposableStackRegisteredForTerminateEvents(_disposableStack);\n            }\n            _disposableStack.defer(() => {\n                if (waitUntilPromises.size > 0) {\n                    return Promise.allSettled(waitUntilPromises).then(() => {\n                        waitUntilPromises.clear();\n                    }, () => {\n                        waitUntilPromises.clear();\n                    });\n                }\n            });\n        }\n        return _disposableStack;\n    }\n    function waitUntil(promiseLike) {\n        // Ensure that the disposable stack is created\n        if (isPromise(promiseLike)) {\n            ensureDisposableStack();\n            waitUntilPromises.add(promiseLike);\n            promiseLike.then(() => {\n                waitUntilPromises.delete(promiseLike);\n            }, err => {\n                console.error(`Unexpected error while waiting: ${err.message || err}`);\n                waitUntilPromises.delete(promiseLike);\n            });\n        }\n    }\n    if (options?.plugins != null) {\n        for (const plugin of options.plugins) {\n            if (plugin.onRequest) {\n                onRequestHooks.push(plugin.onRequest);\n            }\n            if (plugin.onResponse) {\n                onResponseHooks.push(plugin.onResponse);\n            }\n            const disposeFn = plugin[DisposableSymbols.dispose];\n            if (disposeFn) {\n                ensureDisposableStack().defer(disposeFn);\n            }\n            const asyncDisposeFn = plugin[DisposableSymbols.asyncDispose];\n            if (asyncDisposeFn) {\n                ensureDisposableStack().defer(asyncDisposeFn);\n            }\n            if (plugin.onDispose) {\n                ensureDisposableStack().defer(plugin.onDispose);\n            }\n        }\n    }\n    const handleRequest = onRequestHooks.length > 0 || onResponseHooks.length > 0\n        ? function handleRequest(request, serverContext) {\n            let requestHandler = givenHandleRequest;\n            let response;\n            if (onRequestHooks.length === 0) {\n                return handleEarlyResponse();\n            }\n            let url = request['parsedUrl'] ||\n                new Proxy(EMPTY_OBJECT, {\n                    get(_target, prop, _receiver) {\n                        url = new fetchAPI.URL(request.url, 'http://localhost');\n                        return Reflect.get(url, prop, url);\n                    },\n                });\n            const onRequestHooksIteration$ = iterateAsyncVoid(onRequestHooks, (onRequestHook, stopEarly) => onRequestHook({\n                request,\n                setRequest(newRequest) {\n                    request = newRequest;\n                },\n                serverContext,\n                fetchAPI,\n                url,\n                requestHandler,\n                setRequestHandler(newRequestHandler) {\n                    requestHandler = newRequestHandler;\n                },\n                endResponse(newResponse) {\n                    response = newResponse;\n                    if (newResponse) {\n                        stopEarly();\n                    }\n                },\n            }));\n            function handleResponse(response) {\n                if (onResponseHooks.length === 0) {\n                    return response;\n                }\n                const onResponseHookPayload = {\n                    request,\n                    response,\n                    serverContext,\n                    setResponse(newResponse) {\n                        response = newResponse;\n                    },\n                    fetchAPI,\n                };\n                const onResponseHooksIteration$ = iterateAsyncVoid(onResponseHooks, onResponseHook => onResponseHook(onResponseHookPayload));\n                if (isPromise(onResponseHooksIteration$)) {\n                    return onResponseHooksIteration$.then(() => response);\n                }\n                return response;\n            }\n            function handleEarlyResponse() {\n                if (!response) {\n                    const response$ = requestHandler(request, serverContext);\n                    if (isPromise(response$)) {\n                        return response$.then(handleResponse);\n                    }\n                    return handleResponse(response$);\n                }\n                return handleResponse(response);\n            }\n            if (isPromise(onRequestHooksIteration$)) {\n                return onRequestHooksIteration$.then(handleEarlyResponse);\n            }\n            return handleEarlyResponse();\n        }\n        : givenHandleRequest;\n    // TODO: Remove this on the next major version\n    function handleNodeRequest(nodeRequest, ...ctx) {\n        const serverContext = ctx.length > 1 ? completeAssign(...ctx) : ctx[0] || {};\n        // Ensure `waitUntil` is available in the server context\n        if (!serverContext.waitUntil) {\n            serverContext.waitUntil = waitUntil;\n        }\n        const request = normalizeNodeRequest(nodeRequest, fetchAPI);\n        return handleRequest(request, serverContext);\n    }\n    function handleNodeRequestAndResponse(nodeRequest, nodeResponseOrContainer, ...ctx) {\n        const nodeResponse = nodeResponseOrContainer.raw || nodeResponseOrContainer;\n        nodeRequestResponseMap.set(nodeRequest, nodeResponse);\n        return handleNodeRequest(nodeRequest, ...ctx);\n    }\n    function requestListener(nodeRequest, nodeResponse, ...ctx) {\n        const defaultServerContext = {\n            req: nodeRequest,\n            res: nodeResponse,\n            waitUntil,\n        };\n        let response$;\n        try {\n            response$ = handleNodeRequestAndResponse(nodeRequest, nodeResponse, defaultServerContext, ...ctx);\n        }\n        catch (err) {\n            response$ = handleErrorFromRequestHandler(err, fetchAPI.Response);\n        }\n        if (isPromise(response$)) {\n            return response$\n                .catch((e) => handleErrorFromRequestHandler(e, fetchAPI.Response))\n                .then(response => sendNodeResponse(response, nodeResponse, nodeRequest))\n                .catch(err => {\n                console.error(`Unexpected error while handling request: ${err.message || err}`);\n            });\n        }\n        try {\n            return sendNodeResponse(response$, nodeResponse, nodeRequest);\n        }\n        catch (err) {\n            console.error(`Unexpected error while handling request: ${err.message || err}`);\n        }\n    }\n    function handleUWS(res, req, ...ctx) {\n        const defaultServerContext = {\n            res,\n            req,\n            waitUntil,\n        };\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign(defaultServerContext, ...ctx)\n            : defaultServerContext;\n        const controller = new AbortController();\n        const originalResEnd = res.end.bind(res);\n        let resEnded = false;\n        res.end = function (data) {\n            resEnded = true;\n            return originalResEnd(data);\n        };\n        const originalOnAborted = res.onAborted.bind(res);\n        originalOnAborted(function () {\n            controller.abort();\n        });\n        res.onAborted = function (cb) {\n            controller.signal.addEventListener('abort', cb, { once: true });\n        };\n        const request = getRequestFromUWSRequest({\n            req,\n            res,\n            fetchAPI,\n            controller,\n        });\n        let response$;\n        try {\n            response$ = handleRequest(request, serverContext);\n        }\n        catch (err) {\n            response$ = handleErrorFromRequestHandler(err, fetchAPI.Response);\n        }\n        if (isPromise(response$)) {\n            return response$\n                .catch((e) => handleErrorFromRequestHandler(e, fetchAPI.Response))\n                .then(response => {\n                if (!controller.signal.aborted && !resEnded) {\n                    return sendResponseToUwsOpts(res, response, controller, fetchAPI);\n                }\n            })\n                .catch(err => {\n                console.error(`Unexpected error while handling request: \\n${err.stack || err.message || err}`);\n            });\n        }\n        try {\n            if (!controller.signal.aborted && !resEnded) {\n                return sendResponseToUwsOpts(res, response$, controller, fetchAPI);\n            }\n        }\n        catch (err) {\n            console.error(`Unexpected error while handling request: \\n${err.stack || err.message || err}`);\n        }\n    }\n    function handleEvent(event, ...ctx) {\n        if (!event.respondWith || !event.request) {\n            throw new TypeError(`Expected FetchEvent, got ${event}`);\n        }\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign({}, event, ...filteredCtxParts)\n            : isolateObject(event);\n        const response$ = handleRequest(event.request, serverContext);\n        event.respondWith(response$);\n    }\n    function handleRequestWithWaitUntil(request, ...ctx) {\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 1\n            ? completeAssign({}, ...filteredCtxParts)\n            : isolateObject(filteredCtxParts[0], filteredCtxParts[0] == null || filteredCtxParts[0].waitUntil == null\n                ? waitUntil\n                : undefined);\n        return handleRequest(request, serverContext);\n    }\n    const fetchFn = (input, ...maybeCtx) => {\n        if (typeof input === 'string' || 'href' in input) {\n            const [initOrCtx, ...restOfCtx] = maybeCtx;\n            if (isRequestInit(initOrCtx)) {\n                const request = new fetchAPI.Request(input, initOrCtx);\n                const res$ = handleRequestWithWaitUntil(request, ...restOfCtx);\n                const signal = initOrCtx.signal;\n                if (signal) {\n                    return handleAbortSignalAndPromiseResponse(res$, signal);\n                }\n                return res$;\n            }\n            const request = new fetchAPI.Request(input);\n            return handleRequestWithWaitUntil(request, ...maybeCtx);\n        }\n        const res$ = handleRequestWithWaitUntil(input, ...maybeCtx);\n        return handleAbortSignalAndPromiseResponse(res$, input.signal);\n    };\n    const genericRequestHandler = (input, ...maybeCtx) => {\n        // If it is a Node request\n        const [initOrCtxOrRes, ...restOfCtx] = maybeCtx;\n        if (isNodeRequest(input)) {\n            if (!isServerResponse(initOrCtxOrRes)) {\n                throw new TypeError(`Expected ServerResponse, got ${initOrCtxOrRes}`);\n            }\n            return requestListener(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isUWSResponse(input)) {\n            return handleUWS(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isServerResponse(initOrCtxOrRes)) {\n            throw new TypeError('Got Node response without Node request');\n        }\n        // Is input a container object over Request?\n        if (isRequestAccessible(input)) {\n            // Is it FetchEvent?\n            if (isFetchEvent(input)) {\n                return handleEvent(input, ...maybeCtx);\n            }\n            // In this input is also the context\n            return handleRequestWithWaitUntil(input.request, input, ...maybeCtx);\n        }\n        // Or is it Request itself?\n        // Then ctx is present and it is the context\n        return fetchFn(input, ...maybeCtx);\n    };\n    const adapterObj = {\n        handleRequest: handleRequestWithWaitUntil,\n        fetch: fetchFn,\n        handleNodeRequest,\n        handleNodeRequestAndResponse,\n        requestListener,\n        handleEvent,\n        handleUWS,\n        handle: genericRequestHandler,\n        get disposableStack() {\n            return ensureDisposableStack();\n        },\n        [DisposableSymbols.asyncDispose]() {\n            if (_disposableStack && !_disposableStack.disposed) {\n                return _disposableStack.disposeAsync();\n            }\n            return fakePromise(undefined);\n        },\n        dispose() {\n            if (_disposableStack && !_disposableStack.disposed) {\n                return _disposableStack.disposeAsync();\n            }\n            return fakePromise(undefined);\n        },\n    };\n    const serverAdapter = new Proxy(genericRequestHandler, {\n        // It should have all the attributes of the handler function and the server instance\n        has: (_, prop) => {\n            return (prop in adapterObj ||\n                prop in genericRequestHandler ||\n                (serverAdapterBaseObject && prop in serverAdapterBaseObject));\n        },\n        get: (_, prop) => {\n            const adapterProp = adapterObj[prop];\n            if (adapterProp) {\n                if (adapterProp.bind) {\n                    return adapterProp.bind(adapterObj);\n                }\n                return adapterProp;\n            }\n            const handleProp = genericRequestHandler[prop];\n            if (handleProp) {\n                if (handleProp.bind) {\n                    return handleProp.bind(genericRequestHandler);\n                }\n                return handleProp;\n            }\n            if (serverAdapterBaseObject) {\n                const serverAdapterBaseObjectProp = serverAdapterBaseObject[prop];\n                if (serverAdapterBaseObjectProp) {\n                    if (serverAdapterBaseObjectProp.bind) {\n                        return function (...args) {\n                            const returnedVal = serverAdapterBaseObject[prop](...args);\n                            if (returnedVal === serverAdapterBaseObject) {\n                                return serverAdapter;\n                            }\n                            return returnedVal;\n                        };\n                    }\n                    return serverAdapterBaseObjectProp;\n                }\n            }\n        },\n        apply(_, __, args) {\n            return genericRequestHandler(...args);\n        },\n    });\n    return serverAdapter;\n}\nexport { createServerAdapter };\n", "", "", "export function getCORSHeadersByRequestAndOptions(request, corsOptions) {\n    const currentOrigin = request.headers.get('origin');\n    if (corsOptions === false || currentOrigin == null) {\n        return null;\n    }\n    const headers = {};\n    // If defined origins have '*' or undefined by any means, we should allow all origins\n    if (corsOptions.origin == null ||\n        corsOptions.origin.length === 0 ||\n        corsOptions.origin.includes('*')) {\n        headers['Access-Control-Allow-Origin'] = currentOrigin;\n        // Vary by origin because there are multiple origins\n        headers['Vary'] = 'Origin';\n    }\n    else if (typeof corsOptions.origin === 'string') {\n        // If there is one specific origin is specified, use it directly\n        headers['Access-Control-Allow-Origin'] = corsOptions.origin;\n    }\n    else if (Array.isArray(corsOptions.origin)) {\n        // If there is only one origin defined in the array, consider it as a single one\n        if (corsOptions.origin.length === 1) {\n            headers['Access-Control-Allow-Origin'] = corsOptions.origin[0];\n        }\n        else if (corsOptions.origin.includes(currentOrigin)) {\n            // If origin is available in the headers, use it\n            headers['Access-Control-Allow-Origin'] = currentOrigin;\n            // Vary by origin because there are multiple origins\n            headers['Vary'] = 'Origin';\n        }\n        else {\n            // There is no origin found in the headers, so we should return null\n            headers['Access-Control-Allow-Origin'] = 'null';\n        }\n    }\n    if (corsOptions.methods?.length) {\n        headers['Access-Control-Allow-Methods'] = corsOptions.methods.join(', ');\n    }\n    else {\n        const requestMethod = request.headers.get('access-control-request-method');\n        if (requestMethod) {\n            headers['Access-Control-Allow-Methods'] = requestMethod;\n        }\n    }\n    if (corsOptions.allowedHeaders?.length) {\n        headers['Access-Control-Allow-Headers'] = corsOptions.allowedHeaders.join(', ');\n    }\n    else {\n        const requestHeaders = request.headers.get('access-control-request-headers');\n        if (requestHeaders) {\n            headers['Access-Control-Allow-Headers'] = requestHeaders;\n            if (headers['Vary']) {\n                headers['Vary'] += ', Access-Control-Request-Headers';\n            }\n            else {\n                headers['Vary'] = 'Access-Control-Request-Headers';\n            }\n        }\n    }\n    if (corsOptions.credentials != null) {\n        if (corsOptions.credentials === true) {\n            headers['Access-Control-Allow-Credentials'] = 'true';\n        }\n    }\n    else if (headers['Access-Control-Allow-Origin'] !== '*') {\n        headers['Access-Control-Allow-Credentials'] = 'true';\n    }\n    if (corsOptions.exposedHeaders) {\n        headers['Access-Control-Expose-Headers'] = corsOptions.exposedHeaders.join(', ');\n    }\n    if (corsOptions.maxAge) {\n        headers['Access-Control-Max-Age'] = corsOptions.maxAge.toString();\n    }\n    return headers;\n}\nasync function getCORSResponseHeaders(request, corsOptionsFactory, serverContext) {\n    const corsOptions = await corsOptionsFactory(request, serverContext);\n    return getCORSHeadersByRequestAndOptions(request, corsOptions);\n}\nexport function useCORS(options) {\n    let corsOptionsFactory = () => ({});\n    if (options != null) {\n        if (typeof options === 'function') {\n            corsOptionsFactory = options;\n        }\n        else if (typeof options === 'object') {\n            const corsOptions = {\n                ...options,\n            };\n            corsOptionsFactory = () => corsOptions;\n        }\n        else if (options === false) {\n            corsOptionsFactory = () => false;\n        }\n    }\n    return {\n        onRequest({ request, fetchAPI, endResponse }) {\n            if (request.method.toUpperCase() === 'OPTIONS') {\n                const response = new fetchAPI.Response(null, {\n                    status: 204,\n                    // Safari (and potentially other browsers) need content-length 0,\n                    // for 204 or they just hang waiting for a body\n                    // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176\n                    headers: {\n                        'Content-Length': '0',\n                    },\n                });\n                endResponse(response);\n            }\n        },\n        async onResponse({ request, serverContext, response }) {\n            const headers = await getCORSResponseHeaders(request, corsOptionsFactory, serverContext);\n            if (headers != null) {\n                for (const headerName in headers) {\n                    response.headers.set(headerName, headers[headerName]);\n                }\n            }\n        },\n    };\n}\n", "import { Response as DefaultResponseCtor } from '@whatwg-node/fetch';\nimport { isPromise } from '../utils.js';\nexport function createDefaultErrorHandler(ResponseCtor = DefaultResponseCtor) {\n    return function defaultErrorHandler(e) {\n        if (e.details || e.status || e.headers || e.name === 'HTTPError') {\n            return new ResponseCtor(typeof e.details === 'object' ? JSON.stringify(e.details) : e.message, {\n                status: e.status,\n                headers: e.headers || {},\n            });\n        }\n        console.error(e);\n        return createDefaultErrorResponse(ResponseCtor);\n    };\n}\nfunction createDefaultErrorResponse(ResponseCtor) {\n    if (ResponseCtor.error) {\n        return ResponseCtor.error();\n    }\n    return new ResponseCtor(null, { status: 500 });\n}\nexport class HTTPError extends Error {\n    status;\n    message;\n    headers;\n    details;\n    name = 'HTTPError';\n    constructor(status = 500, message, headers = {}, details) {\n        super(message);\n        this.status = status;\n        this.message = message;\n        this.headers = headers;\n        this.details = details;\n        Error.captureStackTrace(this, HTTPError);\n    }\n}\nexport function useErrorHandling(onError) {\n    return {\n        onRequest({ requestHandler, setRequestHandler, fetchAPI }) {\n            const errorHandler = onError || createDefaultErrorHandler(fetchAPI.Response);\n            setRequestHandler(function handlerWithErrorHandling(request, serverContext) {\n                try {\n                    const response$ = requestHandler(request, serverContext);\n                    if (isPromise(response$)) {\n                        return response$.catch(e => errorHandler(e, request, serverContext) ||\n                            createDefaultErrorResponse(fetchAPI.Response));\n                    }\n                    return response$;\n                }\n                catch (e) {\n                    return (errorHandler(e, request, serverContext) || createDefaultErrorResponse(fetchAPI.Response));\n                }\n            });\n        },\n    };\n}\n", "import { decompressedResponseMap, getSupportedEncodings, isAsyncIterable, isReadable, } from '../utils.js';\nexport function useContentEncoding() {\n    const encodingMap = new WeakMap();\n    return {\n        onRequest({ request, setRequest, fetchAPI, endResponse }) {\n            if (request.body) {\n                const contentEncodingHeader = request.headers.get('content-encoding');\n                if (contentEncodingHeader && contentEncodingHeader !== 'none') {\n                    const contentEncodings = contentEncodingHeader?.split(',');\n                    if (!contentEncodings.every(encoding => getSupportedEncodings(fetchAPI).includes(encoding))) {\n                        endResponse(new fetchAPI.Response(`Unsupported 'Content-Encoding': ${contentEncodingHeader}`, {\n                            status: 415,\n                            statusText: 'Unsupported Media Type',\n                        }));\n                        return;\n                    }\n                    let newBody = request.body;\n                    for (const contentEncoding of contentEncodings) {\n                        newBody = newBody.pipeThrough(new fetchAPI.DecompressionStream(contentEncoding));\n                    }\n                    request = new fetchAPI.Request(request.url, {\n                        body: newBody,\n                        cache: request.cache,\n                        credentials: request.credentials,\n                        headers: request.headers,\n                        integrity: request.integrity,\n                        keepalive: request.keepalive,\n                        method: request.method,\n                        mode: request.mode,\n                        redirect: request.redirect,\n                        referrer: request.referrer,\n                        referrerPolicy: request.referrerPolicy,\n                        signal: request.signal,\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore - not in the TS types yet\n                        duplex: 'half',\n                    });\n                    setRequest(request);\n                }\n            }\n            const acceptEncoding = request.headers.get('accept-encoding');\n            if (acceptEncoding) {\n                encodingMap.set(request, acceptEncoding.split(','));\n            }\n        },\n        onResponse({ request, response, setResponse, fetchAPI, serverContext }) {\n            // Hack for avoiding to create whatwg-node to create a readable stream until it's needed\n            if (response['bodyInit'] || response.body) {\n                const encodings = encodingMap.get(request);\n                if (encodings) {\n                    const supportedEncoding = encodings.find(encoding => getSupportedEncodings(fetchAPI).includes(encoding));\n                    if (supportedEncoding) {\n                        const compressionStream = new fetchAPI.CompressionStream(supportedEncoding);\n                        // To calculate final content-length\n                        const contentLength = response.headers.get('content-length');\n                        if (contentLength) {\n                            const bufOfRes = response._buffer;\n                            if (bufOfRes) {\n                                const writer = compressionStream.writable.getWriter();\n                                const write$ = writer.write(bufOfRes);\n                                serverContext.waitUntil?.(write$);\n                                const close$ = writer.close();\n                                serverContext.waitUntil?.(close$);\n                                const uint8Arrays$ = isReadable(compressionStream.readable['readable'])\n                                    ? collectReadableValues(compressionStream.readable['readable'])\n                                    : isAsyncIterable(compressionStream.readable)\n                                        ? collectAsyncIterableValues(compressionStream.readable)\n                                        : collectReadableStreamValues(compressionStream.readable);\n                                return uint8Arrays$.then(uint8Arrays => {\n                                    const chunks = uint8Arrays.flatMap(uint8Array => [...uint8Array]);\n                                    const uint8Array = new Uint8Array(chunks);\n                                    const newHeaders = new fetchAPI.Headers(response.headers);\n                                    newHeaders.set('content-encoding', supportedEncoding);\n                                    newHeaders.set('content-length', uint8Array.byteLength.toString());\n                                    const compressedResponse = new fetchAPI.Response(uint8Array, {\n                                        ...response,\n                                        headers: newHeaders,\n                                    });\n                                    decompressedResponseMap.set(compressedResponse, response);\n                                    setResponse(compressedResponse);\n                                    const close$ = compressionStream.writable.close();\n                                    serverContext.waitUntil?.(close$);\n                                });\n                            }\n                        }\n                        const newHeaders = new fetchAPI.Headers(response.headers);\n                        newHeaders.set('content-encoding', supportedEncoding);\n                        newHeaders.delete('content-length');\n                        const compressedBody = response.body.pipeThrough(compressionStream);\n                        const compressedResponse = new fetchAPI.Response(compressedBody, {\n                            status: response.status,\n                            statusText: response.statusText,\n                            headers: newHeaders,\n                        });\n                        decompressedResponseMap.set(compressedResponse, response);\n                        setResponse(compressedResponse);\n                    }\n                }\n            }\n        },\n    };\n}\nfunction collectReadableValues(readable) {\n    const values = [];\n    readable.on('data', value => values.push(value));\n    return new Promise((resolve, reject) => {\n        readable.once('end', () => resolve(values));\n        readable.once('error', reject);\n    });\n}\nasync function collectAsyncIterableValues(asyncIterable) {\n    const values = [];\n    for await (const value of asyncIterable) {\n        values.push(value);\n    }\n    return values;\n}\nasync function collectReadableStreamValues(readableStream) {\n    const reader = readableStream.getReader();\n    const values = [];\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            reader.releaseLock();\n            break;\n        }\n        else if (value) {\n            values.push(value);\n        }\n    }\n    return values;\n}\n", "export * from './createServerAdapter.js';\nexport * from './types.js';\nexport * from './utils.js';\nexport * from './plugins/types.js';\nexport * from './plugins/useCors.js';\nexport * from './plugins/useErrorHandling.js';\nexport * from './plugins/useContentEncoding.js';\nexport * from './uwebsockets.js';\nexport { Response } from '@whatwg-node/fetch';\nexport { DisposableSymbols } from '@whatwg-node/disposablestack';\n", "import { GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nfunction isAggregateError(obj) {\n    return obj != null && typeof obj === 'object' && 'errors' in obj;\n}\nfunction hasToString(obj) {\n    return obj != null && typeof obj.toString === 'function';\n}\nexport function isGraphQLError(val) {\n    return val instanceof GraphQLError;\n}\nexport function isOriginalGraphQLError(val) {\n    if (val instanceof GraphQLError) {\n        if (val.originalError != null) {\n            return isOriginalGraphQLError(val.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nexport function isAbortError(error) {\n    return (typeof error === 'object' &&\n        error?.constructor?.name === 'DOMException' &&\n        error.name === 'AbortError');\n}\nexport function handleError(error, maskedErrorsOpts, logger) {\n    const errors = new Set();\n    if (isAggregateError(error)) {\n        for (const singleError of error.errors) {\n            const handledErrors = handleError(singleError, maskedErrorsOpts, logger);\n            for (const handledError of handledErrors) {\n                errors.add(handledError);\n            }\n        }\n    }\n    else if (isAbortError(error)) {\n        logger.debug('Request aborted');\n    }\n    else if (maskedErrorsOpts) {\n        const maskedError = maskedErrorsOpts.maskError(error, maskedErrorsOpts.errorMessage, maskedErrorsOpts.isDev);\n        if (maskedError !== error) {\n            logger.error(error);\n        }\n        errors.add(isGraphQLError(maskedError)\n            ? maskedError\n            : createGraphQLError(maskedError.message, {\n                originalError: maskedError,\n            }));\n    }\n    else if (isGraphQLError(error)) {\n        errors.add(error);\n    }\n    else if (error instanceof Error) {\n        errors.add(createGraphQLError(error.message, {\n            originalError: error,\n        }));\n    }\n    else if (typeof error === 'string') {\n        errors.add(createGraphQLError(error, {\n            extensions: {\n                unexpected: true,\n            },\n        }));\n    }\n    else if (hasToString(error)) {\n        errors.add(createGraphQLError(error.toString(), {\n            extensions: {\n                unexpected: true,\n            },\n        }));\n    }\n    else {\n        logger.error(error);\n        errors.add(createGraphQLError('Unexpected error.', {\n            extensions: {\n                http: {\n                    unexpected: true,\n                },\n            },\n        }));\n    }\n    return Array.from(errors);\n}\nexport function getResponseInitByRespectingErrors(result, headers = {}, isApplicationJson = false) {\n    let status;\n    let unexpectedErrorExists = false;\n    if ('extensions' in result && result.extensions?.http) {\n        if (result.extensions.http.headers) {\n            Object.assign(headers, result.extensions.http.headers);\n        }\n        if (result.extensions.http.status) {\n            status = result.extensions.http.status;\n        }\n    }\n    if ('errors' in result && result.errors?.length) {\n        for (const error of result.errors) {\n            if (error.extensions?.['http']) {\n                if (error.extensions['http'].headers) {\n                    Object.assign(headers, error.extensions['http'].headers);\n                }\n                if (isApplicationJson && error.extensions['http'].spec) {\n                    continue;\n                }\n                if (error.extensions['http'].status &&\n                    (!status || error.extensions['http'].status > status)) {\n                    status = error.extensions['http'].status;\n                }\n            }\n            else if (!isOriginalGraphQLError(error) || error.extensions?.['unexpected']) {\n                unexpectedErrorExists = true;\n            }\n        }\n    }\n    else {\n        status ||= 200;\n    }\n    if (!status) {\n        if (unexpectedErrorExists && !('data' in result)) {\n            status = 500;\n        }\n        else {\n            status = 200;\n        }\n    }\n    return {\n        status,\n        headers,\n    };\n}\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nexport function handleURLSearchParams(searchParams) {\n    const operationName = searchParams.get('operationName') || undefined;\n    const query = searchParams.get('query') || undefined;\n    const variablesStr = searchParams.get('variables') || undefined;\n    const extensionsStr = searchParams.get('extensions') || undefined;\n    return {\n        operationName,\n        query,\n        variables: variablesStr ? JSON.parse(variablesStr) : undefined,\n        extensions: extensionsStr ? JSON.parse(extensionsStr) : undefined,\n    };\n}\nexport function parseURLSearchParams(requestBody) {\n    const searchParams = new URLSearchParams(requestBody);\n    return handleURLSearchParams(searchParams);\n}\nexport function isContentTypeMatch(request, expectedContentType) {\n    let contentType = request.headers.get('content-type');\n    // a list of content-types is not valid as per HTTP spec, but some clients dont care\n    contentType = contentType?.split(',')[0] || null;\n    return (contentType === expectedContentType || !!contentType?.startsWith(`${expectedContentType};`));\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nimport { handleURLSearchParams } from './utils.js';\nexport function isGETRequest(request) {\n    return request.method === 'GET';\n}\nexport function parseGETRequest(request) {\n    const queryString = request.url.substring(request.url.indexOf('?') + 1);\n    const searchParams = new URLSearchParams(queryString);\n    return handleURLSearchParams(searchParams);\n}\n", "import { isContentTypeMatch, parseURLSearchParams } from './utils.js';\nexport function isPOSTFormUrlEncodedRequest(request) {\n    return (request.method === 'POST' && isContentTypeMatch(request, 'application/x-www-form-urlencoded'));\n}\nexport async function parsePOSTFormUrlEncodedRequest(request) {\n    const requestBody = await request.text();\n    return parseURLSearchParams(requestBody);\n}\n", "import { isContentTypeMatch } from './utils.js';\nexport function isPOSTGraphQLStringRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'application/graphql');\n}\nexport async function parsePOSTGraphQLStringRequest(request) {\n    const requestBody = await request.text();\n    return {\n        query: requestBody,\n    };\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTJsonRequest(request) {\n    return (request.method === 'POST' &&\n        (isContentTypeMatch(request, 'application/json') ||\n            isContentTypeMatch(request, 'application/graphql+json')));\n}\nexport async function parsePOSTJsonRequest(request) {\n    let requestBody;\n    try {\n        requestBody = await request.json();\n    }\n    catch (err) {\n        const extensions = {\n            http: {\n                spec: true,\n                status: 400,\n            },\n        };\n        if (err instanceof Error) {\n            extensions['originalError'] = {\n                name: err.name,\n                message: err.message,\n            };\n        }\n        throw createGraphQLError('POST body sent invalid JSON.', {\n            extensions,\n        });\n    }\n    if (requestBody == null) {\n        throw createGraphQLError(`POST body is expected to be object but received ${requestBody}`, {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    const requestBodyTypeof = typeof requestBody;\n    if (requestBodyTypeof !== 'object') {\n        throw createGraphQLError(`POST body is expected to be object but received ${requestBodyTypeof}`, {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    return requestBody;\n}\n", "export function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = ''+keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { dset } from 'dset';\nimport { createGraphQLError } from '@graphql-tools/utils';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTMultipartRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'multipart/form-data');\n}\nexport async function parsePOSTMultipartRequest(request) {\n    let requestBody;\n    try {\n        requestBody = await request.formData();\n    }\n    catch (e) {\n        if (e instanceof Error && e.message.startsWith('File size limit exceeded: ')) {\n            throw createGraphQLError(e.message, {\n                extensions: {\n                    http: {\n                        status: 413,\n                    },\n                },\n            });\n        }\n        throw e;\n    }\n    const operationsStr = requestBody.get('operations');\n    if (!operationsStr) {\n        throw createGraphQLError('Missing multipart form field \"operations\"');\n    }\n    if (typeof operationsStr !== 'string') {\n        throw createGraphQLError('Multipart form field \"operations\" must be a string');\n    }\n    let operations;\n    try {\n        operations = JSON.parse(operationsStr);\n    }\n    catch {\n        throw createGraphQLError('Multipart form field \"operations\" must be a valid JSON string');\n    }\n    const mapStr = requestBody.get('map');\n    if (mapStr != null) {\n        if (typeof mapStr !== 'string') {\n            throw createGraphQLError('Multipart form field \"map\" must be a string');\n        }\n        let map;\n        try {\n            map = JSON.parse(mapStr);\n        }\n        catch {\n            throw createGraphQLError('Multipart form field \"map\" must be a valid JSON string');\n        }\n        for (const fileIndex in map) {\n            const file = requestBody.get(fileIndex);\n            const keys = map[fileIndex];\n            for (const key of keys) {\n                dset(operations, key, file);\n            }\n        }\n    }\n    return operations;\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nconst expectedParameters = new Set(['query', 'variables', 'operationName', 'extensions']);\nexport function assertInvalidParams(params, extraParamNames) {\n    if (params == null || typeof params !== 'object') {\n        throw createGraphQLError('Invalid \"params\" in the request body', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                },\n            },\n        });\n    }\n    for (const paramKey in params) {\n        if (params[paramKey] == null) {\n            continue;\n        }\n        if (!expectedParameters.has(paramKey)) {\n            if (extraParamNames?.includes(paramKey)) {\n                continue;\n            }\n            throw createGraphQLError(`Unexpected parameter \"${paramKey}\" in the request body.`, {\n                extensions: {\n                    http: {\n                        status: 400,\n                    },\n                },\n            });\n        }\n    }\n}\nexport function checkGraphQLQueryParams(params, extraParamNames) {\n    if (!isObject(params)) {\n        throw createGraphQLError(`Expected params to be an object but given ${extendedTypeof(params)}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    assertInvalidParams(params, extraParamNames);\n    if (params['query'] == null) {\n        throw createGraphQLError('Must provide query string.', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const queryType = extendedTypeof(params['query']);\n    if (queryType !== 'string') {\n        throw createGraphQLError(`Expected \"query\" param to be a string, but given ${queryType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const variablesParamType = extendedTypeof(params['variables']);\n    if (!['object', 'null', 'undefined'].includes(variablesParamType)) {\n        throw createGraphQLError(`Expected \"variables\" param to be empty or an object, but given ${variablesParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const extensionsParamType = extendedTypeof(params['extensions']);\n    if (!['object', 'null', 'undefined'].includes(extensionsParamType)) {\n        throw createGraphQLError(`Expected \"extensions\" param to be empty or an object, but given ${extensionsParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    return params;\n}\nexport function isValidGraphQLParams(params) {\n    try {\n        checkGraphQLQueryParams(params);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function useCheckGraphQLQueryParams(extraParamNames) {\n    return {\n        onParams({ params }) {\n            checkGraphQLQueryParams(params, extraParamNames);\n        },\n    };\n}\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\nfunction isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nexport function isValidMethodForGraphQL(method) {\n    return method === 'GET' || method === 'POST';\n}\nexport function useCheckMethodForGraphQL() {\n    return {\n        onRequestParse({ request }) {\n            if (!isValidMethodForGraphQL(request.method)) {\n                throw createGraphQLError('GraphQL only supports GET and POST requests.', {\n                    extensions: {\n                        http: {\n                            status: 405,\n                            headers: {\n                                Allow: 'GET, POST',\n                            },\n                        },\n                    },\n                });\n            }\n        },\n    };\n}\n", "export function useHTTPValidationError() {\n    return {\n        onValidate() {\n            return ({ valid, result }) => {\n                if (!valid) {\n                    for (const error of result) {\n                        error.extensions.http = {\n                            ...error.extensions.http,\n                            spec: error.extensions.http?.spec ?? true,\n                            status: error.extensions.http?.status ?? 400,\n                        };\n                    }\n                }\n            };\n        },\n    };\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nexport function useLimitBatching(limit) {\n    return {\n        onRequestParse() {\n            return {\n                onRequestParseDone({ requestParserResult }) {\n                    if (Array.isArray(requestParserResult)) {\n                        if (!limit) {\n                            throw createGraphQLError(`Batching is not supported.`, {\n                                extensions: {\n                                    http: {\n                                        status: 400,\n                                    },\n                                },\n                            });\n                        }\n                        if (requestParserResult.length > limit) {\n                            throw createGraphQLError(`Batching is limited to ${limit} operations per request.`, {\n                                extensions: {\n                                    http: {\n                                        status: 413,\n                                    },\n                                },\n                            });\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n", "import { getOperationAST, GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nexport function assertMutationViaGet(method, document, operationName) {\n    const operation = document\n        ? (getOperationAST(document, operationName) ?? undefined)\n        : undefined;\n    if (!operation) {\n        throw createGraphQLError('Could not determine what operation to execute.', {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    if (operation.operation === 'mutation' && method === 'GET') {\n        throw createGraphQLError('Can only perform a mutation operation from a POST request.', {\n            extensions: {\n                http: {\n                    status: 405,\n                    headers: {\n                        Allow: 'POST',\n                    },\n                },\n            },\n        });\n    }\n}\nexport function usePreventMutationViaGET() {\n    return {\n        onParse() {\n            // We should improve this by getting Yoga stuff from the hook params directly instead of the context\n            return ({ result, context: { request, \n            // the `params` might be missing in cases where the user provided\n            // malformed context to getEnveloped (like `yoga.getEnveloped({})`)\n            params: { operationName } = {}, }, }) => {\n                // Run only if this is a Yoga request\n                // the `request` might be missing when using graphql-ws for example\n                // in which case throwing an error would abruptly close the socket\n                if (!request) {\n                    return;\n                }\n                if (result instanceof Error) {\n                    if (result instanceof GraphQLError) {\n                        result.extensions['http'] = {\n                            spec: true,\n                            status: 400,\n                        };\n                    }\n                    throw result;\n                }\n                assertMutationViaGet(request.method, result, operationName);\n            };\n        },\n    };\n}\n", "export function useHealthCheck({ id = Date.now().toString(), logger = console, endpoint = '/health', } = {}) {\n    return {\n        onRequest({ endResponse, fetchAPI, request }) {\n            if (request.url.endsWith(endpoint)) {\n                logger.debug('Responding Health Check');\n                const response = new fetchAPI.Response(null, {\n                    status: 200,\n                    headers: {\n                        'x-yoga-id': id,\n                    },\n                });\n                endResponse(response);\n            }\n        },\n    };\n}\n", "/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   *\n   * - `evict`: The item was evicted because it is the least recently used,\n   *   and the cache is full.\n   * - `set`: A new value was set, overwriting the old value being disposed.\n   * - `delete`: The item was explicitly deleted, either by calling\n   *   {@link LRUCache#delete}, {@link LRUCache#clear}, or\n   *   {@link LRUCache#set} with an undefined value.\n   * - `expire`: The item was removed due to exceeding its TTL.\n   * - `fetch`: A {@link OptionsBase#fetchMethod} operation returned\n   *   `undefined` or was aborted, causing the item to be deleted.\n   */\n  export type DisposeReason =\n    | 'evict'\n    | 'set'\n    | 'delete'\n    | 'expire'\n    | 'fetch'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Occasionally, it may be useful to track the internal behavior of the\n   * cache, particularly for logging, debugging, or for behavior within the\n   * `fetchMethod`. To do this, you can pass a `status` object to the\n   * {@link LRUCache#fetch}, {@link LRUCache#get}, {@link LRUCache#set},\n   * {@link LRUCache#memo}, and {@link LRUCache#has} methods.\n   *\n   * The `status` option should be a plain JavaScript object. The following\n   * fields will be set on it appropriately, depending on the situation.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no {@link OptionsBase.fetchMethod}, so\n     *   {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  export interface MemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.memoMethod} as\n     * the {@link MemoizerOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface MemoOptionsWithContext<K, V, FC>\n    extends MemoOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface MemoOptionsNoContext<K, V>\n    extends MemoOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.memoMethod} function.\n   */\n  export interface MemoizerOptions<K, V, FC = unknown> {\n    options: MemoizerMemoOptions<K, V, FC>\n    /**\n     * Object provided in the {@link MemoOptions.context} option to\n     * {@link LRUCache#memo}\n     */\n    context: FC\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#memo}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link MemoOptions.forceRefresh}, and\n   * {@link MemoerOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.memoMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the memoMethod is called.\n   */\n  export interface MemoizerMemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n    > {\n    status?: Status<V>\n    size?: Size\n    start?: Milliseconds\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * the type signature for the {@link OptionsBase.memoMethod} option.\n   */\n  export type Memoizer<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: MemoizerOptions<K, V, FC>\n  ) => V\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   *\n   * All options are also available on the {@link LRUCache} instance, making\n   * it safe to pass an LRUCache instance as the options argumemnt to\n   * make another empty cache of the same type.\n   *\n   * Some options are marked as read-only, because changing them after\n   * instantiation is not safe. Changing any of the other options will of\n   * course only have an effect on subsequent method calls.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     *\n     * **It is strongly recommended to set a `max` to prevent unbounded growth\n     * of the cache.**\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed by\n     * default, and MAY live in the cache, contributing to its LRU max, long\n     * after they have expired, unless {@link OptionsBase.ttlAutopurge} is\n     * set.\n     *\n     * If set to `0` (the default value), then that means \"do not track\n     * TTL\", not \"expire immediately\".\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * This is not primarily a TTL cache, and does not make strong TTL\n     * guarantees. There is no pre-emptive pruning of expired items, but you\n     * _may_ set a TTL on the cache, and it will treat expired items as missing\n     * when they are fetched, and delete them.\n     *\n     * Optional, but must be a non-negative integer in ms if specified.\n     *\n     * This may be overridden by passing an options object to `cache.set()`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if ttl tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * If ttl tracking is enabled, and `max` and `maxSize` are not set,\n     * and `ttlAutopurge` is not set, then a warning will be emitted\n     * cautioning about the potential for unbounded memory consumption.\n     * (The TypeScript definitions will also discourage this.)\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     *\n     * Note that this may *significantly* degrade performance, especially if\n     * the cache is storing a large number of items. It is almost always best\n     * to just leave the stale items in the cache, and let them fall out as new\n     * items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * Use with caution!\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever it is retrieved from cache with\n     * {@link LRUCache#get}, causing it to not expire. (It can still fall out\n     * of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever its presence in the cache is\n     * checked with {@link LRUCache#has}, causing it to not expire. (It can\n     * still fall out of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     *\n     * By default, if you set `ttl`, stale items will only be deleted from the\n     * cache when you `get(key)`. That is, it's not preemptively pruning items,\n     * unless {@link OptionsBase.ttlAutopurge} is set.\n     *\n     * If you set `allowStale:true`, it'll return the stale value *as well as*\n     * deleting it. If you don't set this, then it'll return `undefined` when\n     * you try to get a stale entry.\n     *\n     * Note that when a stale entry is fetched, _even if it is returned due to\n     * `allowStale` being set_, it is removed from the cache immediately. You\n     * can suppress this behavior by setting\n     * {@link OptionsBase.noDeleteOnStaleGet}, either in the constructor, or in\n     * the options provided to {@link LRUCache#get}.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     * The `cache.has()` method will always return `false` for stale items.\n     *\n     * Only relevant if a ttl is set.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the\n     * cache, as `dispose(value, key, reason)`.\n     *\n     * This can be handy if you want to close file descriptors or do\n     * other cleanup tasks when items are no longer stored in the cache.\n     *\n     * **NOTE**: It is called _before_ the item has been fully removed\n     * from the cache, so if you want to put it right back in, you need\n     * to wait until the next tick. If you try to add it back in during\n     * the `dispose()` function call, it will break things in subtle and\n     * weird ways.\n     *\n     * Unlike several other options, this may _not_ be overridden by\n     * passing an option to `set()`, for performance reasons.\n     *\n     * The `reason` will be one of the following strings, corresponding\n     * to the reason for the item's deletion:\n     *\n     * - `evict` Item was evicted to make space for a new addition\n     * - `set` Item was overwritten by a new value\n     * - `expire` Item expired its TTL\n     * - `fetch` Item was deleted due to a failed or aborted fetch, or a\n     *   fetchMethod returning `undefined.\n     * - `delete` Item was removed by explicit `cache.delete(key)`,\n     *   `cache.clear()`, or `cache.set(key, undefined)`.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     *\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     *\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     *\n     * Only relevant if `dispose` or `disposeAfter` are set.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when setting a new\n     * value for an existing key (ie, when updating a value rather than\n     * inserting a new value).  Note that the TTL value is _always_ set (if\n     * provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     *\n     * May be passed as an option to {@link LRUCache#set}.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * Set to a positive integer to track the sizes of items added to the\n     * cache, and automatically evict items in order to stay below this size.\n     * Note that this may result in fewer than `max` items being stored.\n     *\n     * Attempting to add an item to the cache whose calculated size is greater\n     * that this amount will be a no-op. The item will not be cached, and no\n     * other items will be evicted.\n     *\n     * Optional, must be a positive integer if provided.\n     *\n     * Sets `maxEntrySize` to the same value, unless a different value is\n     * provided for `maxEntrySize`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if size tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod} or {@link OptionsBase.memoMethod}, then\n     * it will not be stored in the cache.\n     *\n     * Attempting to add an item whose calculated size is greater than\n     * this amount will not cache the item or evict any old items, but\n     * WILL delete an existing value if one is already present.\n     *\n     * Optional, must be a positive integer if provided. Defaults to\n     * the value of `maxSize` if provided.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * Requires {@link OptionsBase.maxSize} to be set.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     *\n     * ```ts\n     * fetchMethod(key, staleValue, { signal, options, context })\n     * ```\n     *\n     * If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n     * to `Promise.resolve(cache.get(key))`.\n     *\n     * If at any time, `signal.aborted` is set to `true`, or if the\n     * `signal.onabort` method is called, or if it emits an `'abort'` event\n     * which you can listen to with `addEventListener`, then that means that\n     * the fetch should be abandoned. This may be passed along to async\n     * functions aware of AbortController/AbortSignal behavior.\n     *\n     * The `fetchMethod` should **only** return `undefined` or a Promise\n     * resolving to `undefined` if the AbortController signaled an `abort`\n     * event. In all other cases, it should return or resolve to a value\n     * suitable for adding to the cache.\n     *\n     * The `options` object is a union of the options that may be provided to\n     * `set()` and `get()`. If they are modified, then that will result in\n     * modifying the settings to `cache.set()` when the value is resolved, and\n     * in the case of\n     * {@link OptionsBase.noDeleteOnFetchRejection} and\n     * {@link OptionsBase.allowStaleOnFetchRejection}, the handling of\n     * `fetchMethod` failures.\n     *\n     * For example, a DNS cache may update the TTL based on the value returned\n     * from a remote DNS server by changing `options.ttl` in the `fetchMethod`.\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#memo}\n     */\n    memoMethod?: Memoizer<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     *\n     * When using time-expiring entries with `ttl`, by default stale\n     * items will be removed from the cache when the key is accessed\n     * with `cache.get()`.\n     *\n     * Setting this option will cause stale items to remain in the cache, until\n     * they are explicitly deleted with `cache.delete(key)`, or retrieved with\n     * `noDeleteOnStaleGet` set to `false`.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     *\n     * Only relevant if a ttl is used.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the {@link LRUCache#fetch}\n     * fails, not any other times.\n     *\n     * If a `fetchMethod` fails, and there is no stale value available, the\n     * `fetch()` will resolve to `undefined`. Ie, all `fetchMethod` errors are\n     * suppressed.\n     *\n     * Implies `noDeleteOnFetchRejection`.\n     *\n     * This may be set in calls to `fetch()`, or defaulted on the constructor,\n     * or overridden by modifying the options object in the `fetchMethod`.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches\n     * an `'abort'` event, whether user-triggered, or due to internal cache\n     * behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls\n     * are not immediately resolved or rejected when they are aborted, and\n     * instead take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * For example:\n     *\n     * ```ts\n     * const c = new LRUCache({\n     *   ttl: 100,\n     *   ignoreFetchAbort: true,\n     *   allowStaleOnFetchAbort: true,\n     *   fetchMethod: async (key, oldValue, { signal }) => {\n     *     // note: do NOT pass the signal to fetch()!\n     *     // let's say this fetch can take a long time.\n     *     const res = await fetch(`https://slow-backend-server/${key}`)\n     *     return await res.json()\n     *   },\n     * })\n     *\n     * // this will return the stale value after 100ms, while still\n     * // updating in the background for next time.\n     * const val = await c.fetch('key', { signal: AbortSignal.timeout(100) })\n     * ```\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown>\n  implements Map<K, V>\n{\n  // options that cannot be changed without disaster\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n  readonly #memoMethod?: LRUCache.Memoizer<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  get memoMethod(): LRUCache.Memoizer<K, V, FC> | undefined {\n    return this.#memoMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      memoMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      memoMethod !== undefined &&\n      typeof memoMethod !== 'function'\n    ) {\n      throw new TypeError('memoMethod must be a function if defined')\n    }\n    this.#memoMethod = memoMethod\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the number of ms left in the item's TTL. If item is not in cache,\n   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.#delete(this.#keyList[index] as K, 'expire')\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string\n   * description of an object. Called by the built-in method\n   * `Object.prototype.toString`.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from most\n   * recently used to least recently used.\n   *\n   * `fn` is called as `fn(value, key, cache)`.\n   *\n   * If `thisp` is provided, function will be called in the `this`-context of\n   * the provided object, or the cache if no `thisp` object is provided.\n   *\n   * Does not update age or recenty of use, or iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.#delete(this.#keyList[i] as K, 'expire')\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Returns `undefined` if the key is not present.\n   *\n   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n   * serialization, the `start` value is always the current timestamp, and the\n   * `ttl` is a calculated remaining time to live (negative if expired).\n   *\n   * Always returns stale values, if their info is found in the cache, so be\n   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n   * if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to {@link LRLUCache#load}.\n   *\n   * The `start` fields are calculated relative to a portable `Date.now()`\n   * timestamp, even if `performance.now()` is available.\n   *\n   * Stale entries are always included in the `dump`, even if\n   * {@link LRUCache.OptionsBase.allowStale} is false.\n   *\n   * Note: this returns an actual array, not a generator, so it can be more\n   * easily passed around.\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   *\n   * The shape of the resulting cache may be different if the same options are\n   * not used in both caches.\n   *\n   * The `start` fields are assumed to be calculated relative to a portable\n   * `Date.now()` timestamp, even if `performance.now()` is available.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   *\n   * Fields on the {@link LRUCache.SetOptions} options param will override\n   * their corresponding values in the constructor options for the scope\n   * of this single `set()` operation.\n   *\n   * If `start` is provided, then that will set the effective start\n   * time for the TTL calculation. Note that this must be a previous\n   * value of `performance.now()` if supported, or a previous value of\n   * `Date.now()` if not.\n   *\n   * Options object may also include `size`, which will prevent\n   * calling the `sizeCalculation` function and just use the specified\n   * number if it is a positive integer, and `noDisposeOnSet` which\n   * will prevent calling a `dispose` function in the case of\n   * overwrites.\n   *\n   * If the `size` (or return value of `sizeCalculation`) for a given\n   * entry is greater than `maxEntrySize`, then the item will not be\n   * added to the cache.\n   *\n   * Will update the recency of the entry.\n   *\n   * If the value is `undefined`, then this is an alias for\n   * `cache.delete(key)`. `undefined` is never stored in the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.#delete(k, 'set')\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Check if a key is in the cache, without updating the recency of\n   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n   * to `true` in either the options or the constructor.\n   *\n   * Will return `false` if the item is stale, even though it is technically in\n   * the cache. The difference can be determined (if it matters) by using a\n   * `status` argument, and inspecting the `has` field.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.#delete(k, 'fetch')\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.#delete(k, 'fetch')\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If the value is in the cache and not stale, then the returned\n   * Promise resolves to the value.\n   *\n   * If not in the cache, or beyond its TTL staleness, then\n   * `fetchMethod(key, staleValue, { options, signal, context })` is\n   * called, and the value returned will be added to the cache once\n   * resolved.\n   *\n   * If called with `allowStale`, and an asynchronous fetch is\n   * currently in progress to reload a stale value, then the former\n   * stale value will be returned.\n   *\n   * If called with `forceRefresh`, then the cached item will be\n   * re-fetched, even if it is not stale. However, if `allowStale` is also\n   * set, then the old value will still be returned. This is useful\n   * in cases where you want to force a reload of a cached value. If\n   * a background fetch is already in progress, then `forceRefresh`\n   * has no effect.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   *\n   * If {@link LRUCache.OptionsBase.fetchMethod} is not specified, then this is\n   * effectively an alias for `Promise.resolve(cache.get(key))`.\n   *\n   * When the fetch method resolves to a value, if the fetch has not\n   * been aborted due to deletion, eviction, or being overwritten,\n   * then it is added to the cache using the options provided.\n   *\n   * If the key is evicted or deleted before the `fetchMethod`\n   * resolves, then the AbortSignal passed to the `fetchMethod` will\n   * receive an `abort` event, and the promise returned by `fetch()`\n   * will reject with the reason for the abort.\n   *\n   * If a `signal` is passed to the `fetch()` call, then aborting the\n   * signal will abort the fetch and cause the `fetch()` promise to\n   * reject with the reason provided.\n   *\n   * **Setting `context`**\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the {@link LRUCache} constructor, then all\n   * calls to `cache.fetch()` _must_ provide a `context` option. If\n   * set to `undefined` or `void`, then calls to fetch _must not_\n   * provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that\n   * might be relevant in the course of fetching the data. It is only\n   * relevant for the course of a single `fetch()` operation, and\n   * discarded afterwards.\n   *\n   * **Note: `fetch()` calls are inflight-unique**\n   *\n   * If you call `fetch()` multiple times with the same key value,\n   * then every call after the first will resolve on the same\n   * promise<sup>1</sup>,\n   * _even if they have different settings that would otherwise change\n   * the behavior of the fetch_, such as `noDeleteOnFetchRejection`\n   * or `ignoreFetchAbort`.\n   *\n   * In most cases, this is not a problem (in fact, only fetching\n   * something once is what you probably want, if you're caching in\n   * the first place). If you are changing the fetch() options\n   * dramatically between runs, there's a good chance that you might\n   * be trying to fit divergent semantics into a single object, and\n   * would be better off with multiple cache instances.\n   *\n   * **1**: Ie, they're not the \"same Promise\", but they resolve at\n   * the same time, because they're both waiting on the same\n   * underlying fetchMethod response.\n   */\n\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * In some cases, `cache.fetch()` may resolve to `undefined`, either because\n   * a {@link LRUCache.OptionsBase#fetchMethod} was not provided (turning\n   * `cache.fetch(k)` into just an async wrapper around `cache.get(k)`) or\n   * because `ignoreFetchAbort` was specified (either to the constructor or\n   * in the {@link LRUCache.FetchOptions}). Also, the\n   * {@link OptionsBase.fetchMethod} may return `undefined` or `void`, making\n   * the test even more complicated.\n   *\n   * Because inferring the cases where `undefined` might be returned are so\n   * cumbersome, but testing for `undefined` can also be annoying, this method\n   * can be used, which will reject if `this.fetch()` resolves to undefined.\n   */\n  forceFetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<V>\n  // this overload not allowed if context is required\n  forceFetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<V>\n  async forceFetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<V> {\n    const v = await this.fetch(\n      k,\n      fetchOptions as unknown extends FC\n        ? LRUCache.FetchOptions<K, V, FC>\n        : FC extends undefined | void\n        ? LRUCache.FetchOptionsNoContext<K, V>\n        : LRUCache.FetchOptionsWithContext<K, V, FC>\n    )\n    if (v === undefined) throw new Error('fetch() returned undefined')\n    return v\n  }\n\n  /**\n   * If the key is found in the cache, then this is equivalent to\n   * {@link LRUCache#get}. If not, in the cache, then calculate the value using\n   * the {@link LRUCache.OptionsBase.memoMethod}, and add it to the cache.\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the LRUCache constructor, then all calls to `cache.memo()`\n   * _must_ provide a `context` option. If set to `undefined` or `void`, then\n   * calls to memo _must not_ provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that might be\n   * relevant in the course of fetching the data. It is only relevant for the\n   * course of a single `memo()` operation, and discarded afterwards.\n   */\n  memo(\n    k: K,\n    memoOptions: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : LRUCache.MemoOptionsWithContext<K, V, FC>\n  ): V\n  // this overload not allowed if context is required\n  memo(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    memoOptions?: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : never\n  ): V\n  memo(k: K, memoOptions: LRUCache.MemoOptions<K, V, FC> = {}) {\n    const memoMethod = this.#memoMethod\n    if (!memoMethod) {\n      throw new Error('no memoMethod provided to constructor')\n    }\n    const { context, forceRefresh, ...options } = memoOptions\n    const v = this.get(k, options)\n    if (!forceRefresh && v !== undefined) return v\n    const vv = memoMethod(k, v, {\n      options,\n      context,\n    } as LRUCache.MemoizerOptions<K, V, FC>)\n    this.set(k, vv, options)\n    return vv\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.#delete(k, 'expire')\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   *\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    return this.#delete(k, 'delete')\n  }\n\n  #delete(k: K, reason: LRUCache.DisposeReason) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.#clear(reason)\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, reason)\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, reason])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    return this.#clear('delete')\n  }\n  #clear(reason: LRUCache.DisposeReason) {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, reason)\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, reason])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-empty-object-type */\nimport { LRUCache as LRU } from 'lru-cache';\n/**\n * @deprecated In the next major, `createLRUCache` will be renamed to `_createLRUCache`,\n * and the current `createLRUCache` will be removed.\n */\nexport const createLRUCache = _createLRUCache;\nconst DEFAULT_MAX = 1024;\nconst DEFAULT_TTL = 3_600_000;\n/**\n * @internal This is an internal utility, and you should use it with your own risk.\n * This utility can have breaking changes in the future.\n */\nexport function _createLRUCache({ max = DEFAULT_MAX, ttl = DEFAULT_TTL, } = {}) {\n    return new LRU({ max, ttl });\n}\n", "import { _createLRUCache } from '../utils/create-lru-cache.js';\nexport function useParserAndValidationCache({ documentCache = _createLRUCache(), errorCache = _createLRUCache(), validationCache = true, }) {\n    const validationCacheByRules = _createLRUCache();\n    return {\n        onParse({ params, setParsedDocument }) {\n            const strDocument = params.source.toString();\n            const document = documentCache.get(strDocument);\n            if (document) {\n                setParsedDocument(document);\n                return;\n            }\n            const parserError = errorCache.get(strDocument);\n            if (parserError) {\n                throw parserError;\n            }\n            return ({ result }) => {\n                if (result != null) {\n                    if (result instanceof Error) {\n                        errorCache.set(strDocument, result);\n                    }\n                    else {\n                        documentCache.set(strDocument, result);\n                    }\n                }\n            };\n        },\n        onValidate({ params: { schema, documentAST, rules }, setResult,\n        // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n         }) {\n            /** No schema no cache */\n            if (schema == null) {\n                return;\n            }\n            if (validationCache !== false) {\n                const rulesKey = rules?.map((rule) => rule.name).join(',') || '';\n                let validationCacheBySchema = validationCacheByRules.get(rulesKey);\n                if (!validationCacheBySchema) {\n                    validationCacheBySchema = new WeakMap();\n                    validationCacheByRules.set(rulesKey, validationCacheBySchema);\n                }\n                let validationCacheByDocument = validationCacheBySchema.get(schema);\n                if (!validationCacheByDocument) {\n                    validationCacheByDocument = new WeakMap();\n                    validationCacheBySchema.set(schema, validationCacheByDocument);\n                }\n                const cachedResult = validationCacheByDocument.get(documentAST);\n                if (cachedResult) {\n                    setResult(cachedResult);\n                    return;\n                }\n                return ({ result }) => {\n                    if (result != null) {\n                        validationCacheByDocument?.set(documentAST, result);\n                    }\n                };\n            }\n        },\n    };\n}\n", "const DEFAULT_MATCHER = () => true;\nexport function useRequestParser(options) {\n    const matchFn = options.match || DEFAULT_MATCHER;\n    return {\n        onRequestParse({ request, setRequestParser }) {\n            if (matchFn(request)) {\n                setRequestParser(options.parse);\n            }\n        },\n    };\n}\n", "export function getMediaTypesForRequestInOrder(request) {\n    const accepts = (request.headers.get('accept') || '*/*')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(',');\n    const mediaTypes = [];\n    for (const accept of accepts) {\n        const [mediaType, ...params] = accept.split(';');\n        if (mediaType === undefined)\n            continue; // If true, malformed header.\n        const charset = params?.find(param => param.includes('charset=')) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n        if (charset !== 'charset=utf-8') {\n            // only utf-8 is supported\n            continue;\n        }\n        mediaTypes.push(mediaType);\n    }\n    return mediaTypes.reverse();\n}\nexport function isMatchingMediaType(askedMediaType, processorMediaType) {\n    const [askedPre, askedSuf] = askedMediaType.split('/');\n    const [pre, suf] = processorMediaType.split('/');\n    if ((pre === '*' || pre === askedPre) && (suf === '*' || suf === askedSuf)) {\n        return true;\n    }\n    return false;\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isGraphQLError } from '../../error.js';\n// JSON stringifier that adjusts the result error extensions while serialising\nexport function jsonStringifyResultWithoutInternals(result) {\n    if (Array.isArray(result)) {\n        return `[${result\n            .map(r => {\n            const sanitizedResult = omitInternalsFromResultErrors(r);\n            const stringifier = r.stringify || JSON.stringify;\n            return stringifier(sanitizedResult);\n        })\n            .join(',')}]`;\n    }\n    const sanitizedResult = omitInternalsFromResultErrors(result);\n    const stringifier = result.stringify || JSON.stringify;\n    return stringifier(sanitizedResult);\n}\nexport function omitInternalsFromResultErrors(result) {\n    if (result.errors?.length || result.extensions?.http) {\n        const newResult = { ...result };\n        newResult.errors &&= newResult.errors.map(omitInternalsFromError);\n        if (newResult.extensions) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n            const { http, ...extensions } = result.extensions;\n            newResult.extensions = Object.keys(extensions).length ? extensions : undefined;\n        }\n        return newResult;\n    }\n    return result;\n}\nfunction omitInternalsFromError(err) {\n    if (isGraphQLError(err)) {\n        const serializedError = 'toJSON' in err && typeof err.toJSON === 'function' ? err.toJSON() : Object(err);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n        const { http, unexpected, ...extensions } = serializedError.extensions || {};\n        return createGraphQLError(err.message, {\n            nodes: err.nodes,\n            source: err.source,\n            positions: err.positions,\n            path: err.path,\n            originalError: omitInternalsFromError(err.originalError || undefined),\n            extensions: Object.keys(extensions).length ? extensions : undefined,\n        });\n    }\n    return err;\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { fakePromise } from '@whatwg-node/server';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processMultipartResult(result, fetchAPI) {\n    const headersInit = {\n        Connection: 'keep-alive',\n        'Content-Type': 'multipart/mixed; boundary=\"-\"',\n        'Transfer-Encoding': 'chunked',\n    };\n    const responseInit = getResponseInitByRespectingErrors(result, headersInit);\n    let iterator;\n    const textEncoder = new fetchAPI.TextEncoder();\n    const readableStream = new fetchAPI.ReadableStream({\n        start(controller) {\n            if (isAsyncIterable(result)) {\n                iterator = result[Symbol.asyncIterator]();\n            }\n            else {\n                let finished = false;\n                iterator = {\n                    next: () => {\n                        if (finished) {\n                            return fakePromise({ done: true, value: null });\n                        }\n                        finished = true;\n                        return fakePromise({ done: false, value: result });\n                    },\n                };\n            }\n            controller.enqueue(textEncoder.encode('\\r\\n'));\n            controller.enqueue(textEncoder.encode(`---`));\n        },\n        async pull(controller) {\n            try {\n                const { done, value } = await iterator.next();\n                if (value != null) {\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('Content-Type: application/json; charset=utf-8'));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    const chunk = jsonStringifyResultWithoutInternals(value);\n                    const encodedChunk = textEncoder.encode(chunk);\n                    controller.enqueue(textEncoder.encode('Content-Length: ' + encodedChunk.byteLength));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(encodedChunk);\n                    controller.enqueue(textEncoder.encode('\\r\\n'));\n                    controller.enqueue(textEncoder.encode('---'));\n                }\n                if (done) {\n                    controller.enqueue(textEncoder.encode('--\\r\\n'));\n                    controller.close();\n                }\n            }\n            catch (err) {\n                controller.error(err);\n            }\n        },\n        async cancel(e) {\n            await iterator.return?.(e);\n        },\n    });\n    return new fetchAPI.Response(readableStream, responseInit);\n}\n", "import { isAsyncIterable } from '@graphql-tools/utils';\nimport { areGraphQLErrors, getResponseInitByRespectingErrors, isGraphQLError, } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processRegularResult(executionResult, fetchAPI, acceptedHeader) {\n    if (isAsyncIterable(executionResult)) {\n        return new fetchAPI.Response(null, {\n            status: 406,\n            statusText: 'Not Acceptable',\n            headers: {\n                accept: 'application/json; charset=utf-8, application/graphql-response+json; charset=utf-8',\n            },\n        });\n    }\n    const headersInit = {\n        'Content-Type': acceptedHeader + '; charset=utf-8',\n    };\n    const responseInit = getResponseInitByRespectingErrors(executionResult, headersInit, \n    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors\n    acceptedHeader === 'application/json' &&\n        !Array.isArray(executionResult) &&\n        areGraphQLErrors(executionResult.errors) &&\n        executionResult.errors.some(err => !err.extensions?.['originalError'] || isGraphQLError(err.extensions['originalError'])));\n    const responseBody = jsonStringifyResultWithoutInternals(executionResult);\n    return new fetchAPI.Response(responseBody, responseInit);\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { fakePromise } from '@whatwg-node/server';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function getSSEProcessor() {\n    return function processSSEResult(result, fetchAPI) {\n        let pingIntervalMs = 12_000;\n        // for testing the pings, reduce the timeout\n        if (globalThis.process?.env?.['NODE_ENV'] === 'test') {\n            pingIntervalMs = 300;\n        }\n        const headersInit = {\n            'Content-Type': 'text/event-stream',\n            Connection: 'keep-alive',\n            'Cache-Control': 'no-cache',\n            'Content-Encoding': 'none',\n        };\n        const responseInit = getResponseInitByRespectingErrors(result, headersInit, true);\n        let iterator;\n        let pingInterval;\n        const textEncoder = new fetchAPI.TextEncoder();\n        const readableStream = new fetchAPI.ReadableStream({\n            start(controller) {\n                // always start with a ping because some browsers dont accept a header flush\n                // causing the fetch to stall until something is streamed through the response\n                controller.enqueue(textEncoder.encode(':\\n\\n'));\n                // ping client every 12 seconds to keep the connection alive\n                pingInterval = setInterval(() => {\n                    if (!controller.desiredSize) {\n                        clearInterval(pingInterval);\n                        return;\n                    }\n                    controller.enqueue(textEncoder.encode(':\\n\\n'));\n                }, pingIntervalMs);\n                if (isAsyncIterable(result)) {\n                    iterator = result[Symbol.asyncIterator]();\n                }\n                else {\n                    let finished = false;\n                    iterator = {\n                        next: () => {\n                            if (finished) {\n                                return fakePromise({ done: true, value: null });\n                            }\n                            finished = true;\n                            return fakePromise({ done: false, value: result });\n                        },\n                    };\n                }\n            },\n            async pull(controller) {\n                try {\n                    const result = await iterator.next();\n                    if (result.value != null) {\n                        controller.enqueue(textEncoder.encode(`event: next\\n`));\n                        const chunk = jsonStringifyResultWithoutInternals(result.value);\n                        controller.enqueue(textEncoder.encode(`data: ${chunk}\\n\\n`));\n                    }\n                    if (result.done) {\n                        controller.enqueue(textEncoder.encode(`event: complete\\n`));\n                        controller.enqueue(textEncoder.encode(`data:\\n\\n`));\n                        clearInterval(pingInterval);\n                        controller.close();\n                    }\n                }\n                catch (err) {\n                    controller.error(err);\n                }\n            },\n            async cancel(e) {\n                clearInterval(pingInterval);\n                await iterator.return?.(e);\n            },\n        });\n        return new fetchAPI.Response(readableStream, responseInit);\n    };\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { getMediaTypesForRequestInOrder, isMatchingMediaType } from './result-processor/accept.js';\nimport { processMultipartResult } from './result-processor/multipart.js';\nimport { processRegularResult } from './result-processor/regular.js';\nimport { getSSEProcessor } from './result-processor/sse.js';\nconst multipart = {\n    mediaTypes: ['multipart/mixed'],\n    asyncIterables: true,\n    processResult: processMultipartResult,\n};\nfunction getSSEProcessorConfig() {\n    return {\n        mediaTypes: ['text/event-stream'],\n        asyncIterables: true,\n        processResult: getSSEProcessor(),\n    };\n}\nconst regular = {\n    mediaTypes: ['application/graphql-response+json', 'application/json'],\n    asyncIterables: false,\n    processResult: processRegularResult,\n};\nexport function useResultProcessors() {\n    const isSubscriptionRequestMap = new WeakMap();\n    const sse = getSSEProcessorConfig();\n    const defaultList = [sse, multipart, regular];\n    const subscriptionList = [sse, regular];\n    return {\n        onSubscribe({ args: { contextValue } }) {\n            if (contextValue.request) {\n                isSubscriptionRequestMap.set(contextValue.request, true);\n            }\n        },\n        onResultProcess({ request, result, acceptableMediaTypes, setResultProcessor }) {\n            const isSubscriptionRequest = isSubscriptionRequestMap.get(request);\n            const processorConfigList = isSubscriptionRequest ? subscriptionList : defaultList;\n            const requestMediaTypes = getMediaTypesForRequestInOrder(request);\n            const isAsyncIterableResult = isAsyncIterable(result);\n            for (const resultProcessorConfig of processorConfigList) {\n                for (const requestMediaType of requestMediaTypes) {\n                    if (isAsyncIterableResult && !resultProcessorConfig.asyncIterables) {\n                        continue;\n                    }\n                    for (const processorMediaType of resultProcessorConfig.mediaTypes) {\n                        acceptableMediaTypes.push(processorMediaType);\n                        if (isMatchingMediaType(processorMediaType, requestMediaType)) {\n                            setResultProcessor(resultProcessorConfig.processResult, processorMediaType);\n                        }\n                    }\n                }\n            }\n        },\n    };\n}\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox=\\\"-0.41 0.445 472.812 499.811\\\" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d=\\\"M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z\\\" fill=url(#paint3_linear_1677_11483) /><path d=\\\"M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z\\\" fill=url(#paint4_linear_1677_11483) /><path d=\\\"M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z\\\" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d=\\\"M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z\\\" fill=black /></mask><path d=\\\"M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z\\\" fill=url(#paint0_linear_1677_11483) /><path d=\\\"M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z\\\" fill=url(#paint1_linear_1677_11483) /><path d=\\\"M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z\\\" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d=\\\"M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z\\\" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1><p>Version: 5.11.0</p></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? \uD83D\uDC40</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  landingPage: false\\n})\\n          </code>\\n        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  graphqlEndpoint: '__REQUEST_PATH__',\\n})\\n          </code>\\n        </pre></section></main></body></html>\";\n", "import { isPromise } from '@graphql-tools/utils';\nimport landingPageBody from '../landing-page-html.js';\nexport const defaultRenderLandingPage = function defaultRenderLandingPage(opts) {\n    return new opts.fetchAPI.Response(landingPageBody\n        .replace(/__GRAPHIQL_LINK__/g, opts.graphqlEndpoint)\n        .replace(/__REQUEST_PATH__/g, opts.url.pathname), {\n        status: 200,\n        statusText: 'OK',\n        headers: {\n            'Content-Type': 'text/html',\n        },\n    });\n};\nexport function useUnhandledRoute(args) {\n    let urlPattern;\n    function getUrlPattern({ URLPattern }) {\n        urlPattern ||= new URLPattern({\n            pathname: args.graphqlEndpoint,\n        });\n        return urlPattern;\n    }\n    const landingPageRenderer = args.landingPageRenderer || defaultRenderLandingPage;\n    return {\n        onRequest({ request, fetchAPI, endResponse, url }) {\n            if (!request.url.endsWith(args.graphqlEndpoint) &&\n                !request.url.endsWith(`${args.graphqlEndpoint}/`) &&\n                url.pathname !== args.graphqlEndpoint &&\n                url.pathname !== `${args.graphqlEndpoint}/` &&\n                !getUrlPattern(fetchAPI).test(url)) {\n                if (args.showLandingPage === true &&\n                    request.method === 'GET' &&\n                    !!request.headers?.get('accept')?.includes('text/html')) {\n                    const landingPage$ = landingPageRenderer({\n                        request,\n                        fetchAPI,\n                        url,\n                        graphqlEndpoint: args.graphqlEndpoint,\n                        get urlPattern() {\n                            return getUrlPattern(fetchAPI);\n                        },\n                    });\n                    if (isPromise(landingPage$)) {\n                        return landingPage$.then(endResponse);\n                    }\n                    endResponse(landingPage$);\n                    return;\n                }\n                endResponse(new fetchAPI.Response('', {\n                    status: 404,\n                    statusText: 'Not Found',\n                }));\n            }\n        },\n    };\n}\n", "import { getOperationAST } from 'graphql';\nexport async function processResult({ request, result, fetchAPI, onResultProcessHooks, serverContext, }) {\n    let resultProcessor;\n    const acceptableMediaTypes = [];\n    let acceptedMediaType = '*/*';\n    for (const onResultProcessHook of onResultProcessHooks) {\n        await onResultProcessHook({\n            request,\n            acceptableMediaTypes,\n            result,\n            setResult(newResult) {\n                result = newResult;\n            },\n            resultProcessor,\n            setResultProcessor(newResultProcessor, newAcceptedMimeType) {\n                resultProcessor = newResultProcessor;\n                acceptedMediaType = newAcceptedMimeType;\n            },\n            serverContext,\n        });\n    }\n    // If no result processor found for this result, return an error\n    if (!resultProcessor) {\n        return new fetchAPI.Response(null, {\n            status: 406,\n            statusText: 'Not Acceptable',\n            headers: {\n                accept: acceptableMediaTypes.join('; charset=utf-8, '),\n            },\n        });\n    }\n    return resultProcessor(result, fetchAPI, acceptedMediaType);\n}\nexport async function processRequest({ params, enveloped, }) {\n    // Parse GraphQLParams\n    const document = enveloped.parse(params.query);\n    // Validate parsed Document Node\n    const errors = enveloped.validate(enveloped.schema, document);\n    if (errors.length > 0) {\n        return { errors };\n    }\n    // Build the context for the execution\n    const contextValue = await enveloped.contextFactory();\n    const executionArgs = {\n        schema: enveloped.schema,\n        document,\n        contextValue,\n        variableValues: params.variables,\n        operationName: params.operationName,\n    };\n    // Get the actual operation\n    const operation = getOperationAST(document, params.operationName);\n    // Choose the right executor\n    const executeFn = operation?.operation === 'subscription' ? enveloped.subscribe : enveloped.execute;\n    // Get the result to be processed\n    return executeFn(executionArgs);\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isGraphQLError } from '../error.js';\nexport const maskError = (error, message, isDev = globalThis.process?.env?.['NODE_ENV'] === 'development') => {\n    if (isGraphQLError(error)) {\n        if (error.originalError) {\n            if (error.originalError.name === 'GraphQLError') {\n                return error;\n            }\n            // Original error should be removed\n            const extensions = {\n                ...error.extensions,\n                unexpected: true,\n            };\n            if (isDev) {\n                extensions['originalError'] = {\n                    message: error.originalError.message,\n                    stack: error.originalError.stack,\n                };\n            }\n            return createGraphQLError(message, {\n                nodes: error.nodes,\n                source: error.source,\n                positions: error.positions,\n                path: error.path,\n                extensions,\n            });\n        }\n        return error;\n    }\n    return createGraphQLError(message, {\n        extensions: {\n            unexpected: true,\n            originalError: isDev\n                ? error instanceof Error\n                    ? {\n                        message: error.message,\n                        stack: error.stack,\n                    }\n                    : error\n                : undefined,\n        },\n    });\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { parse, specifiedRules, validate } from 'graphql';\nimport { envelop, isAsyncIterable, useEngine, useExtendContext, useMaskedErrors, } from '@envelop/core';\nimport { normalizedExecutor } from '@graphql-tools/executor';\nimport { mapAsyncIterator } from '@graphql-tools/utils';\nimport { createLogger } from '@graphql-yoga/logger';\nimport * as defaultFetchAPI from '@whatwg-node/fetch';\nimport { createServerAdapter, useCORS, useErrorHandling, } from '@whatwg-node/server';\nimport { handleError, isAbortError } from './error.js';\nimport { isGETRequest, parseGETRequest } from './plugins/request-parser/get.js';\nimport { isPOSTFormUrlEncodedRequest, parsePOSTFormUrlEncodedRequest, } from './plugins/request-parser/post-form-url-encoded.js';\nimport { isPOSTGraphQLStringRequest, parsePOSTGraphQLStringRequest, } from './plugins/request-parser/post-graphql-string.js';\nimport { isPOSTJsonRequest, parsePOSTJsonRequest } from './plugins/request-parser/post-json.js';\nimport { isPOSTMultipartRequest, parsePOSTMultipartRequest, } from './plugins/request-parser/post-multipart.js';\nimport { useCheckGraphQLQueryParams } from './plugins/request-validation/use-check-graphql-query-params.js';\nimport { useCheckMethodForGraphQL } from './plugins/request-validation/use-check-method-for-graphql.js';\nimport { useHTTPValidationError } from './plugins/request-validation/use-http-validation-error.js';\nimport { useLimitBatching } from './plugins/request-validation/use-limit-batching.js';\nimport { usePreventMutationViaGET } from './plugins/request-validation/use-prevent-mutation-via-get.js';\nimport { useGraphiQL } from './plugins/use-graphiql.js';\nimport { useHealthCheck } from './plugins/use-health-check.js';\nimport { useParserAndValidationCache, } from './plugins/use-parser-and-validation-cache.js';\nimport { useRequestParser } from './plugins/use-request-parser.js';\nimport { useResultProcessors } from './plugins/use-result-processor.js';\nimport { useSchema } from './plugins/use-schema.js';\nimport { useUnhandledRoute } from './plugins/use-unhandled-route.js';\nimport { processRequest as processGraphQLParams, processResult } from './process-request.js';\nimport { maskError } from './utils/mask-error.js';\n/**\n * Base class that can be extended to create a GraphQL server with any HTTP server framework.\n * @internal\n */\nexport class YogaServer {\n    /**\n     * Instance of envelop\n     */\n    getEnveloped;\n    logger;\n    graphqlEndpoint;\n    fetchAPI;\n    plugins;\n    onRequestParseHooks;\n    onParamsHooks;\n    onExecutionResultHooks;\n    onResultProcessHooks;\n    maskedErrorsOpts;\n    id;\n    version = '5.11.0';\n    constructor(options) {\n        this.id = options?.id ?? 'yoga';\n        this.fetchAPI = {\n            ...defaultFetchAPI,\n        };\n        if (options?.fetchAPI) {\n            for (const key in options.fetchAPI) {\n                if (options.fetchAPI[key]) {\n                    this.fetchAPI[key] = options.fetchAPI[key];\n                }\n            }\n        }\n        const logger = options?.logging == null ? true : options.logging;\n        this.logger =\n            typeof logger === 'boolean'\n                ? logger === true\n                    ? createLogger()\n                    : createLogger('silent')\n                : typeof logger === 'string'\n                    ? createLogger(logger)\n                    : logger;\n        const maskErrorFn = (typeof options?.maskedErrors === 'object' && options.maskedErrors.maskError) || maskError;\n        const maskedErrorSet = new WeakSet();\n        this.maskedErrorsOpts =\n            options?.maskedErrors === false\n                ? null\n                : {\n                    errorMessage: 'Unexpected error.',\n                    ...(typeof options?.maskedErrors === 'object' ? options.maskedErrors : {}),\n                    maskError: (error, message) => {\n                        if (maskedErrorSet.has(error)) {\n                            return error;\n                        }\n                        const newError = maskErrorFn(error, message, this.maskedErrorsOpts?.isDev);\n                        if (newError !== error) {\n                            this.logger.error(error);\n                        }\n                        maskedErrorSet.add(newError);\n                        return newError;\n                    },\n                };\n        const maskedErrors = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;\n        let batchingLimit = 0;\n        if (options?.batching) {\n            if (typeof options.batching === 'boolean') {\n                batchingLimit = 10;\n            }\n            else {\n                batchingLimit = options.batching.limit ?? 10;\n            }\n        }\n        this.graphqlEndpoint = options?.graphqlEndpoint || '/graphql';\n        const graphqlEndpoint = this.graphqlEndpoint;\n        this.plugins = [\n            useEngine({\n                parse,\n                validate,\n                execute: normalizedExecutor,\n                subscribe: normalizedExecutor,\n                specifiedRules,\n            }),\n            // Use the schema provided by the user\n            !!options?.schema && useSchema(options.schema),\n            options?.context != null &&\n                useExtendContext(initialContext => {\n                    if (options?.context) {\n                        if (typeof options.context === 'function') {\n                            return options.context(initialContext);\n                        }\n                        return options.context;\n                    }\n                    return {};\n                }),\n            // Middlewares before processing the incoming HTTP request\n            useHealthCheck({\n                id: this.id,\n                logger: this.logger,\n                endpoint: options?.healthCheckEndpoint,\n            }),\n            options?.cors !== false && useCORS(options?.cors),\n            options?.graphiql !== false &&\n                useGraphiQL({\n                    graphqlEndpoint,\n                    options: options?.graphiql,\n                    render: options?.renderGraphiQL,\n                    logger: this.logger,\n                }),\n            // Middlewares before the GraphQL execution\n            useRequestParser({\n                match: isGETRequest,\n                parse: parseGETRequest,\n            }),\n            useRequestParser({\n                match: isPOSTJsonRequest,\n                parse: parsePOSTJsonRequest,\n            }),\n            options?.multipart !== false &&\n                useRequestParser({\n                    match: isPOSTMultipartRequest,\n                    parse: parsePOSTMultipartRequest,\n                }),\n            useRequestParser({\n                match: isPOSTGraphQLStringRequest,\n                parse: parsePOSTGraphQLStringRequest,\n            }),\n            useRequestParser({\n                match: isPOSTFormUrlEncodedRequest,\n                parse: parsePOSTFormUrlEncodedRequest,\n            }),\n            // Middlewares after the GraphQL execution\n            useResultProcessors(),\n            useErrorHandling((error, request, serverContext) => {\n                const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n                const result = {\n                    errors,\n                };\n                return processResult({\n                    request,\n                    result,\n                    fetchAPI: this.fetchAPI,\n                    onResultProcessHooks: this.onResultProcessHooks,\n                    serverContext,\n                });\n            }),\n            ...(options?.plugins ?? []),\n            // To make sure those are called at the end\n            {\n                onPluginInit({ addPlugin }) {\n                    if (options?.parserAndValidationCache !== false) {\n                        addPlugin(\n                        // @ts-expect-error Add plugins has context but this hook doesn't care\n                        useParserAndValidationCache(!options?.parserAndValidationCache || options?.parserAndValidationCache === true\n                            ? {}\n                            : options?.parserAndValidationCache));\n                    }\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useLimitBatching(batchingLimit));\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckGraphQLQueryParams(options?.extraParamNames));\n                    const showLandingPage = !!(options?.landingPage ?? true);\n                    addPlugin(\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    useUnhandledRoute({\n                        graphqlEndpoint,\n                        showLandingPage,\n                        landingPageRenderer: typeof options?.landingPage === 'function' ? options.landingPage : undefined,\n                    }));\n                    // We check the method after user-land plugins because the plugin might support more methods (like graphql-sse).\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckMethodForGraphQL());\n                    // We make sure that the user doesn't send a mutation with GET\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(usePreventMutationViaGET());\n                    if (maskedErrors) {\n                        // Make sure we always throw AbortError instead of masking it!\n                        addPlugin({\n                            onSubscribe() {\n                                return {\n                                    onSubscribeError({ error }) {\n                                        if (isAbortError(error)) {\n                                            throw error;\n                                        }\n                                    },\n                                };\n                            },\n                        });\n                        addPlugin(useMaskedErrors(maskedErrors));\n                    }\n                    addPlugin(\n                    // We handle validation errors at the end\n                    useHTTPValidationError());\n                },\n            },\n        ];\n        this.getEnveloped = envelop({\n            plugins: this.plugins,\n        });\n        this.plugins = this.getEnveloped._plugins;\n        this.onRequestParseHooks = [];\n        this.onParamsHooks = [];\n        this.onExecutionResultHooks = [];\n        this.onResultProcessHooks = [];\n        for (const plugin of this.plugins) {\n            if (plugin) {\n                if (plugin.onYogaInit) {\n                    plugin.onYogaInit({\n                        yoga: this,\n                    });\n                }\n                if (plugin.onRequestParse) {\n                    this.onRequestParseHooks.push(plugin.onRequestParse);\n                }\n                if (plugin.onParams) {\n                    this.onParamsHooks.push(plugin.onParams);\n                }\n                if (plugin.onExecutionResult) {\n                    this.onExecutionResultHooks.push(plugin.onExecutionResult);\n                }\n                if (plugin.onResultProcess) {\n                    this.onResultProcessHooks.push(plugin.onResultProcess);\n                }\n            }\n        }\n    }\n    handleParams = async ({ request, context, params }) => {\n        let result;\n        try {\n            const additionalContext = context['request'] === request\n                ? {\n                    params,\n                }\n                : {\n                    request,\n                    params,\n                };\n            Object.assign(context, additionalContext);\n            const enveloped = this.getEnveloped(context);\n            this.logger.debug(`Processing GraphQL Parameters`);\n            result = await processGraphQLParams({\n                params,\n                enveloped,\n            });\n            this.logger.debug(`Processing GraphQL Parameters done.`);\n        }\n        catch (error) {\n            const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n            result = {\n                errors,\n            };\n        }\n        if (isAsyncIterable(result)) {\n            result = mapAsyncIterator(result, v => v, (error) => {\n                if (error.name === 'AbortError') {\n                    this.logger.debug(`Request aborted`);\n                    throw error;\n                }\n                const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n                return {\n                    errors,\n                };\n            });\n        }\n        return result;\n    };\n    async getResultForParams({ params, request, }, context) {\n        let result;\n        let paramsHandler = this.handleParams;\n        for (const onParamsHook of this.onParamsHooks) {\n            await onParamsHook({\n                params,\n                request,\n                setParams(newParams) {\n                    params = newParams;\n                },\n                paramsHandler,\n                setParamsHandler(newHandler) {\n                    paramsHandler = newHandler;\n                },\n                setResult(newResult) {\n                    result = newResult;\n                },\n                fetchAPI: this.fetchAPI,\n                context,\n            });\n        }\n        result ??= await paramsHandler({\n            request,\n            params,\n            context: context,\n        });\n        for (const onExecutionResult of this.onExecutionResultHooks) {\n            await onExecutionResult({\n                result,\n                setResult(newResult) {\n                    result = newResult;\n                },\n                request,\n                context: context,\n            });\n        }\n        return result;\n    }\n    handle = async (request, serverContext) => {\n        let url = new Proxy({}, {\n            get: (_target, prop, _receiver) => {\n                url = new this.fetchAPI.URL(request.url, 'http://localhost');\n                return Reflect.get(url, prop, url);\n            },\n        });\n        let requestParser;\n        const onRequestParseDoneList = [];\n        for (const onRequestParse of this.onRequestParseHooks) {\n            const onRequestParseResult = await onRequestParse({\n                request,\n                url,\n                requestParser,\n                serverContext,\n                setRequestParser(parser) {\n                    requestParser = parser;\n                },\n            });\n            if (onRequestParseResult?.onRequestParseDone != null) {\n                onRequestParseDoneList.push(onRequestParseResult.onRequestParseDone);\n            }\n        }\n        this.logger.debug(`Parsing request to extract GraphQL parameters`);\n        if (!requestParser) {\n            return new this.fetchAPI.Response(null, {\n                status: 415,\n                statusText: 'Unsupported Media Type',\n            });\n        }\n        let requestParserResult = await requestParser(request);\n        for (const onRequestParseDone of onRequestParseDoneList) {\n            await onRequestParseDone({\n                requestParserResult,\n                setRequestParserResult(newParams) {\n                    requestParserResult = newParams;\n                },\n            });\n        }\n        const result = (await (Array.isArray(requestParserResult)\n            ? Promise.all(requestParserResult.map(params => this.getResultForParams({\n                params,\n                request,\n            }, Object.create(serverContext))))\n            : this.getResultForParams({\n                params: requestParserResult,\n                request,\n            }, serverContext)));\n        return processResult({\n            request,\n            result,\n            fetchAPI: this.fetchAPI,\n            onResultProcessHooks: this.onResultProcessHooks,\n            serverContext,\n        });\n    };\n}\nexport function createYoga(options) {\n    const server = new YogaServer(options);\n    return createServerAdapter(server, {\n        fetchAPI: server.fetchAPI,\n        plugins: server['plugins'],\n    });\n}\n", "/// <reference types=\"./repeater.d.ts\" />\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\n\n/** An error subclass which is thrown when there are too many pending push or next operations on a single repeater. */\r\nvar RepeaterOverflowError = /** @class */ (function (_super) {\r\n    __extends(RepeaterOverflowError, _super);\r\n    function RepeaterOverflowError(message) {\r\n        var _this = _super.call(this, message) || this;\r\n        Object.defineProperty(_this, \"name\", {\r\n            value: \"RepeaterOverflowError\",\r\n            enumerable: false,\r\n        });\r\n        if (typeof Object.setPrototypeOf === \"function\") {\r\n            Object.setPrototypeOf(_this, _this.constructor.prototype);\r\n        }\r\n        else {\r\n            _this.__proto__ = _this.constructor.prototype;\r\n        }\r\n        if (typeof Error.captureStackTrace === \"function\") {\r\n            Error.captureStackTrace(_this, _this.constructor);\r\n        }\r\n        return _this;\r\n    }\r\n    return RepeaterOverflowError;\r\n}(Error));\r\n/** A buffer which allows you to push a set amount of values to the repeater without pushes waiting or throwing errors. */\r\nvar FixedBuffer = /** @class */ (function () {\r\n    function FixedBuffer(capacity) {\r\n        if (capacity < 0) {\r\n            throw new RangeError(\"Capacity may not be less than 0\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(FixedBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FixedBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return this._q.length >= this._c;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    FixedBuffer.prototype.add = function (value) {\r\n        if (this.full) {\r\n            throw new Error(\"Buffer full\");\r\n        }\r\n        else {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    FixedBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return FixedBuffer;\r\n}());\r\n// TODO: Use a circular buffer here.\r\n/** Sliding buffers allow you to push a set amount of values to the repeater without pushes waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the earliest values added. */\r\nvar SlidingBuffer = /** @class */ (function () {\r\n    function SlidingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(SlidingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SlidingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SlidingBuffer.prototype.add = function (value) {\r\n        while (this._q.length >= this._c) {\r\n            this._q.shift();\r\n        }\r\n        this._q.push(value);\r\n    };\r\n    SlidingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return SlidingBuffer;\r\n}());\r\n/** Dropping buffers allow you to push a set amount of values to the repeater without the push function waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the latest values added. */\r\nvar DroppingBuffer = /** @class */ (function () {\r\n    function DroppingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(DroppingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DroppingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DroppingBuffer.prototype.add = function (value) {\r\n        if (this._q.length < this._c) {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    DroppingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return DroppingBuffer;\r\n}());\r\n/** Makes sure promise-likes don\u2019t cause unhandled rejections. */\r\nfunction swallow(value) {\r\n    if (value != null && typeof value.then === \"function\") {\r\n        value.then(NOOP, NOOP);\r\n    }\r\n}\r\n/*** REPEATER STATES ***/\r\n/** The following is an enumeration of all possible repeater states. These states are ordered, and a repeater may only advance to higher states. */\r\n/** The initial state of the repeater. */\r\nvar Initial = 0;\r\n/** Repeaters advance to this state the first time the next method is called on the repeater. */\r\nvar Started = 1;\r\n/** Repeaters advance to this state when the stop function is called. */\r\nvar Stopped = 2;\r\n/** Repeaters advance to this state when there are no values left to be pulled from the repeater. */\r\nvar Done = 3;\r\n/** Repeaters advance to this state if an error is thrown into the repeater. */\r\nvar Rejected = 4;\r\n/** The maximum number of push or next operations which may exist on a single repeater. */\r\nvar MAX_QUEUE_LENGTH = 1024;\r\nvar NOOP = function () { };\r\n/** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */\r\nfunction consumeExecution(r) {\r\n    var err = r.err;\r\n    var execution = Promise.resolve(r.execution).then(function (value) {\r\n        if (err != null) {\r\n            throw err;\r\n        }\r\n        return value;\r\n    });\r\n    r.err = undefined;\r\n    r.execution = execution.then(function () { return undefined; }, function () { return undefined; });\r\n    return r.pending === undefined ? execution : r.pending.then(function () { return execution; });\r\n}\r\n/** A helper function for building iterations from values. Promises are unwrapped, so that iterations never have their value property set to a promise. */\r\nfunction createIteration(r, value) {\r\n    var done = r.state >= Done;\r\n    return Promise.resolve(value).then(function (value) {\r\n        if (!done && r.state >= Rejected) {\r\n            return consumeExecution(r).then(function (value) { return ({\r\n                value: value,\r\n                done: true,\r\n            }); });\r\n        }\r\n        return { value: value, done: done };\r\n    });\r\n}\r\n/**\r\n * This function is bound and passed to the executor as the stop argument.\r\n *\r\n * Advances state to Stopped.\r\n */\r\nfunction stop(r, err) {\r\n    var e_1, _a;\r\n    if (r.state >= Stopped) {\r\n        return;\r\n    }\r\n    r.state = Stopped;\r\n    r.onnext();\r\n    r.onstop();\r\n    if (r.err == null) {\r\n        r.err = err;\r\n    }\r\n    if (r.pushes.length === 0 &&\r\n        (typeof r.buffer === \"undefined\" || r.buffer.empty)) {\r\n        finish(r);\r\n    }\r\n    else {\r\n        try {\r\n            for (var _b = __values(r.pushes), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n                var push_1 = _d.value;\r\n                push_1.resolve();\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    }\r\n}\r\n/**\r\n * The difference between stopping a repeater vs finishing a repeater is that stopping a repeater allows next to continue to drain values from the push queue and buffer, while finishing a repeater will clear all pending values and end iteration immediately. Once, a repeater is finished, all iterations will have the done property set to true.\r\n *\r\n * Advances state to Done.\r\n */\r\nfunction finish(r) {\r\n    var e_2, _a;\r\n    if (r.state >= Done) {\r\n        return;\r\n    }\r\n    if (r.state < Stopped) {\r\n        stop(r);\r\n    }\r\n    r.state = Done;\r\n    r.buffer = undefined;\r\n    try {\r\n        for (var _b = __values(r.nexts), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n            var next = _d.value;\r\n            var execution = r.pending === undefined\r\n                ? consumeExecution(r)\r\n                : r.pending.then(function () { return consumeExecution(r); });\r\n            next.resolve(createIteration(r, execution));\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    r.pushes = [];\r\n    r.nexts = [];\r\n}\r\n/**\r\n * Called when a promise passed to push rejects, or when a push call is unhandled.\r\n *\r\n * Advances state to Rejected.\r\n */\r\nfunction reject(r) {\r\n    if (r.state >= Rejected) {\r\n        return;\r\n    }\r\n    if (r.state < Done) {\r\n        finish(r);\r\n    }\r\n    r.state = Rejected;\r\n}\r\n/** This function is bound and passed to the executor as the push argument. */\r\nfunction push(r, value) {\r\n    swallow(value);\r\n    if (r.pushes.length >= MAX_QUEUE_LENGTH) {\r\n        throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to push are allowed on a single repeater.\");\r\n    }\r\n    else if (r.state >= Stopped) {\r\n        return Promise.resolve(undefined);\r\n    }\r\n    var valueP = r.pending === undefined\r\n        ? Promise.resolve(value)\r\n        : r.pending.then(function () { return value; });\r\n    valueP = valueP.catch(function (err) {\r\n        if (r.state < Stopped) {\r\n            r.err = err;\r\n        }\r\n        reject(r);\r\n        return undefined; // void :(\r\n    });\r\n    var nextP;\r\n    if (r.nexts.length) {\r\n        var next_1 = r.nexts.shift();\r\n        next_1.resolve(createIteration(r, valueP));\r\n        if (r.nexts.length) {\r\n            nextP = Promise.resolve(r.nexts[0].value);\r\n        }\r\n        else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\r\n            nextP = Promise.resolve(undefined);\r\n        }\r\n        else {\r\n            nextP = new Promise(function (resolve) { return (r.onnext = resolve); });\r\n        }\r\n    }\r\n    else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\r\n        r.buffer.add(valueP);\r\n        nextP = Promise.resolve(undefined);\r\n    }\r\n    else {\r\n        nextP = new Promise(function (resolve) { return r.pushes.push({ resolve: resolve, value: valueP }); });\r\n    }\r\n    // If an error is thrown into the repeater via the next or throw methods, we give the repeater a chance to handle this by rejecting the promise returned from push. If the push call is not immediately handled we throw the next iteration of the repeater.\r\n    // To check that the promise returned from push is floating, we modify the then and catch methods of the returned promise so that they flip the floating flag. The push function actually does not return a promise, because modern engines do not call the then and catch methods on native promises. By making next a plain old javascript object, we ensure that the then and catch methods will be called.\r\n    var floating = true;\r\n    var next = {};\r\n    var unhandled = nextP.catch(function (err) {\r\n        if (floating) {\r\n            throw err;\r\n        }\r\n        return undefined; // void :(\r\n    });\r\n    next.then = function (onfulfilled, onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.then.call(nextP, onfulfilled, onrejected);\r\n    };\r\n    next.catch = function (onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.catch.call(nextP, onrejected);\r\n    };\r\n    next.finally = nextP.finally.bind(nextP);\r\n    r.pending = valueP\r\n        .then(function () { return unhandled; })\r\n        .catch(function (err) {\r\n        r.err = err;\r\n        reject(r);\r\n    });\r\n    return next;\r\n}\r\n/**\r\n * Creates the stop callable promise which is passed to the executor\r\n */\r\nfunction createStop(r) {\r\n    var stop1 = stop.bind(null, r);\r\n    var stopP = new Promise(function (resolve) { return (r.onstop = resolve); });\r\n    stop1.then = stopP.then.bind(stopP);\r\n    stop1.catch = stopP.catch.bind(stopP);\r\n    stop1.finally = stopP.finally.bind(stopP);\r\n    return stop1;\r\n}\r\n/**\r\n * Calls the executor passed into the constructor. This function is called the first time the next method is called on the repeater.\r\n *\r\n * Advances state to Started.\r\n */\r\nfunction execute(r) {\r\n    if (r.state >= Started) {\r\n        return;\r\n    }\r\n    r.state = Started;\r\n    var push1 = push.bind(null, r);\r\n    var stop1 = createStop(r);\r\n    r.execution = new Promise(function (resolve) { return resolve(r.executor(push1, stop1)); });\r\n    // TODO: We should consider stopping all repeaters when the executor settles.\r\n    r.execution.catch(function () { return stop(r); });\r\n}\r\nvar records = new WeakMap();\r\n// NOTE: While repeaters implement and are assignable to the AsyncGenerator interface, and you can use the types interchangeably, we don\u2019t use typescript\u2019s implements syntax here because this would make supporting earlier versions of typescript trickier. This is because TypeScript version 3.6 changed the iterator types by adding the TReturn and TNext type parameters.\r\nvar Repeater = /** @class */ (function () {\r\n    function Repeater(executor, buffer) {\r\n        records.set(this, {\r\n            executor: executor,\r\n            buffer: buffer,\r\n            err: undefined,\r\n            state: Initial,\r\n            pushes: [],\r\n            nexts: [],\r\n            pending: undefined,\r\n            execution: undefined,\r\n            onnext: NOOP,\r\n            onstop: NOOP,\r\n        });\r\n    }\r\n    Repeater.prototype.next = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.nexts.length >= MAX_QUEUE_LENGTH) {\r\n            throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to next are allowed on a single repeater.\");\r\n        }\r\n        if (r.state <= Initial) {\r\n            execute(r);\r\n        }\r\n        r.onnext(value);\r\n        if (typeof r.buffer !== \"undefined\" && !r.buffer.empty) {\r\n            var result = createIteration(r, r.buffer.remove());\r\n            if (r.pushes.length) {\r\n                var push_2 = r.pushes.shift();\r\n                r.buffer.add(push_2.value);\r\n                r.onnext = push_2.resolve;\r\n            }\r\n            return result;\r\n        }\r\n        else if (r.pushes.length) {\r\n            var push_3 = r.pushes.shift();\r\n            r.onnext = push_3.resolve;\r\n            return createIteration(r, push_3.value);\r\n        }\r\n        else if (r.state >= Stopped) {\r\n            finish(r);\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return new Promise(function (resolve) { return r.nexts.push({ resolve: resolve, value: value }); });\r\n    };\r\n    Repeater.prototype.return = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        finish(r);\r\n        // We override the execution because return should always return the value passed in.\r\n        r.execution = Promise.resolve(r.execution).then(function () { return value; });\r\n        return createIteration(r, consumeExecution(r));\r\n    };\r\n    Repeater.prototype.throw = function (err) {\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.state <= Initial ||\r\n            r.state >= Stopped ||\r\n            (typeof r.buffer !== \"undefined\" && !r.buffer.empty)) {\r\n            finish(r);\r\n            // If r.err is already set, that mean the repeater has already produced an error, so we throw that error rather than the error passed in, because doing so might be more informative for the caller.\r\n            if (r.err == null) {\r\n                r.err = err;\r\n            }\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return this.next(Promise.reject(err));\r\n    };\r\n    Repeater.prototype[Symbol.asyncIterator] = function () {\r\n        return this;\r\n    };\r\n    // TODO: Remove these static methods from the class.\r\n    Repeater.race = race;\r\n    Repeater.merge = merge;\r\n    Repeater.zip = zip;\r\n    Repeater.latest = latest;\r\n    return Repeater;\r\n}());\r\n/*** COMBINATOR FUNCTIONS ***/\r\n// TODO: move these combinators to their own file.\r\nfunction getIterators(values, options) {\r\n    var e_3, _a;\r\n    var iters = [];\r\n    var _loop_1 = function (value) {\r\n        if (value != null && typeof value[Symbol.asyncIterator] === \"function\") {\r\n            iters.push(value[Symbol.asyncIterator]());\r\n        }\r\n        else if (value != null && typeof value[Symbol.iterator] === \"function\") {\r\n            iters.push(value[Symbol.iterator]());\r\n        }\r\n        else {\r\n            iters.push((function valueToAsyncIterator() {\r\n                return __asyncGenerator(this, arguments, function valueToAsyncIterator_1() {\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                if (!options.yieldValues) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 1: return [4 /*yield*/, _a.sent()];\r\n                            case 2:\r\n                                _a.sent();\r\n                                _a.label = 3;\r\n                            case 3:\r\n                                if (!options.returnValues) return [3 /*break*/, 5];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 4: return [2 /*return*/, _a.sent()];\r\n                            case 5: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            })());\r\n        }\r\n    };\r\n    try {\r\n        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\r\n            var value = values_1_1.value;\r\n            _loop_1(value);\r\n        }\r\n    }\r\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n    finally {\r\n        try {\r\n            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\r\n        }\r\n        finally { if (e_3) throw e_3.error; }\r\n    }\r\n    return iters;\r\n}\r\n// NOTE: whenever you see any variables called `advance` or `advances`, know that it is a hack to get around the fact that `Promise.race` leaks memory. These variables are intended to be set to the resolve function of a promise which is constructed and awaited as an alternative to Promise.race. For more information, see this comment in the Node.js issue tracker: https://github.com/nodejs/node/issues/17469#issuecomment-685216777.\r\nfunction race(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, finalIteration, iteration, i_1, _loop_2;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    iteration = void 0;\r\n                    i_1 = 0;\r\n                    _loop_2 = function () {\r\n                        var j, iters_1, iters_1_1, iter;\r\n                        var e_4, _a;\r\n                        return __generator(this, function (_b) {\r\n                            switch (_b.label) {\r\n                                case 0:\r\n                                    j = i_1;\r\n                                    try {\r\n                                        for (iters_1 = (e_4 = void 0, __values(iters)), iters_1_1 = iters_1.next(); !iters_1_1.done; iters_1_1 = iters_1.next()) {\r\n                                            iter = iters_1_1.value;\r\n                                            Promise.resolve(iter.next()).then(function (iteration) {\r\n                                                if (iteration.done) {\r\n                                                    stop();\r\n                                                    if (finalIteration === undefined) {\r\n                                                        finalIteration = iteration;\r\n                                                    }\r\n                                                }\r\n                                                else if (i_1 === j) {\r\n                                                    // This iterator has won, advance i and resolve the promise.\r\n                                                    i_1++;\r\n                                                    advance(iteration);\r\n                                                }\r\n                                            }, function (err) { return stop(err); });\r\n                                        }\r\n                                    }\r\n                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                                    finally {\r\n                                        try {\r\n                                            if (iters_1_1 && !iters_1_1.done && (_a = iters_1.return)) _a.call(iters_1);\r\n                                        }\r\n                                        finally { if (e_4) throw e_4.error; }\r\n                                    }\r\n                                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                                case 1:\r\n                                    iteration = _b.sent();\r\n                                    if (!(iteration !== undefined)) return [3 /*break*/, 3];\r\n                                    return [4 /*yield*/, push(iteration.value)];\r\n                                case 2:\r\n                                    _b.sent();\r\n                                    _b.label = 3;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    };\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 4];\r\n                    return [5 /*yield**/, _loop_2()];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 4: return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.race(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction merge(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { yieldValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advances, stopped, finalIteration;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_5, _a;\r\n                        stopped = true;\r\n                        try {\r\n                            for (var advances_1 = __values(advances), advances_1_1 = advances_1.next(); !advances_1_1.done; advances_1_1 = advances_1.next()) {\r\n                                var advance = advances_1_1.value;\r\n                                advance();\r\n                            }\r\n                        }\r\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_1_1 && !advances_1_1.done && (_a = advances_1.return)) _a.call(advances_1);\r\n                            }\r\n                            finally { if (e_5) throw e_5.error; }\r\n                        }\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 3, 4]);\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration, _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        _b.trys.push([0, , 6, 9]);\r\n                                        _b.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 5];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) {\r\n                                                advances[i] = resolve;\r\n                                            })];\r\n                                    case 2:\r\n                                        iteration = _b.sent();\r\n                                        if (!(iteration !== undefined)) return [3 /*break*/, 4];\r\n                                        if (iteration.done) {\r\n                                            finalIteration = iteration;\r\n                                            return [2 /*return*/];\r\n                                        }\r\n                                        return [4 /*yield*/, push(iteration.value)];\r\n                                    case 3:\r\n                                        _b.sent();\r\n                                        _b.label = 4;\r\n                                    case 4: return [3 /*break*/, 1];\r\n                                    case 5: return [3 /*break*/, 9];\r\n                                    case 6:\r\n                                        _a = iter.return;\r\n                                        if (!_a) return [3 /*break*/, 8];\r\n                                        return [4 /*yield*/, iter.return()];\r\n                                    case 7:\r\n                                        _a = (_b.sent());\r\n                                        _b.label = 8;\r\n                                    case 8:\r\n                                        return [7 /*endfinally*/];\r\n                                    case 9: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 3:\r\n                    stop();\r\n                    return [7 /*endfinally*/];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction zip(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, iterations, values;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 6, 8]);\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 5];\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 3:\r\n                    iterations = _a.sent();\r\n                    if (iterations === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values = iterations.map(function (iteration) { return iteration.value; });\r\n                    if (iterations.some(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values];\r\n                    }\r\n                    return [4 /*yield*/, push(values)];\r\n                case 4:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 5: return [3 /*break*/, 8];\r\n                case 6:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 7:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction latest(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, {\r\n        yieldValues: true,\r\n        returnValues: true,\r\n    });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, advances, stopped, iterations_1, values_2;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_6, _a;\r\n                        advance();\r\n                        try {\r\n                            for (var advances_2 = __values(advances), advances_2_1 = advances_2.next(); !advances_2_1.done; advances_2_1 = advances_2.next()) {\r\n                                var advance1 = advances_2_1.value;\r\n                                advance1();\r\n                            }\r\n                        }\r\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_2_1 && !advances_2_1.done && (_a = advances_2.return)) _a.call(advances_2);\r\n                            }\r\n                            finally { if (e_6) throw e_6.error; }\r\n                        }\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 2:\r\n                    iterations_1 = _a.sent();\r\n                    if (iterations_1 === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values_2 = iterations_1.map(function (iteration) { return iteration.value; });\r\n                    if (iterations_1.every(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values_2];\r\n                    }\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    return [4 /*yield*/, push(values_2.slice())];\r\n                case 3:\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    _a.sent();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration;\r\n                            return __generator(this, function (_a) {\r\n                                switch (_a.label) {\r\n                                    case 0:\r\n                                        if (iterations_1[i].done) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        _a.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 4];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) { return (advances[i] = resolve); })];\r\n                                    case 2:\r\n                                        iteration = _a.sent();\r\n                                        if (iteration === undefined) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        else if (iteration.done) {\r\n                                            return [2 /*return*/, iteration.value];\r\n                                        }\r\n                                        values_2[i] = iteration.value;\r\n                                        return [4 /*yield*/, push(values_2.slice())];\r\n                                    case 3:\r\n                                        _a.sent();\r\n                                        return [3 /*break*/, 1];\r\n                                    case 4: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 4: return [2 /*return*/, _a.sent()];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\n\nexport { DroppingBuffer, FixedBuffer, MAX_QUEUE_LENGTH, Repeater, RepeaterOverflowError, SlidingBuffer };\n//# sourceMappingURL=repeater.js.map\n", "import { Repeater } from '@repeaterjs/repeater';\nimport { CustomEvent } from '@whatwg-node/events';\n/**\n * Utility for publishing and subscribing to events.\n */\nexport const createPubSub = (config) => {\n    const target = config?.eventTarget ?? new EventTarget();\n    return {\n        publish(routingKey, ...args) {\n            const payload = args[1] ?? args[0] ?? null;\n            const topic = args[1] === undefined ? routingKey : `${routingKey}:${args[0]}`;\n            const event = new CustomEvent(topic, {\n                detail: payload,\n            });\n            target.dispatchEvent(event);\n        },\n        subscribe(...[routingKey, id]) {\n            const topic = id === undefined ? routingKey : `${routingKey}:${id}`;\n            return new Repeater(function subscriptionRepeater(next, stop) {\n                stop.then(function subscriptionRepeaterStopHandler() {\n                    target.removeEventListener(topic, pubsubEventListener);\n                });\n                target.addEventListener(topic, pubsubEventListener);\n                function pubsubEventListener(event) {\n                    next(event.detail);\n                }\n            });\n        },\n    };\n};\n", "import { Repeater } from '@repeaterjs/repeater';\nexport function filter(filter) {\n    return (source) => new Repeater(async (push, stop) => {\n        const iterable = source[Symbol.asyncIterator]();\n        stop.then(() => {\n            iterable.return?.();\n        });\n        let latest;\n        while ((latest = await iterable.next()).done === false) {\n            if (await filter(latest.value)) {\n                await push(latest.value);\n            }\n        }\n        stop();\n    });\n}\n", "import { Repeater } from '@repeaterjs/repeater';\n/**\n * Utility for mapping an event stream.\n */\nexport const map = (mapper) => (source) => new Repeater(async (push, stop) => {\n    const iterable = source[Symbol.asyncIterator]();\n    stop.then(() => {\n        iterable.return?.();\n    });\n    let latest;\n    while ((latest = await iterable.next()).done === false) {\n        await push(await mapper(latest.value));\n    }\n    stop();\n});\n", "/* eslint-disable @typescript-eslint/no-unsafe-function-type */\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        default:\n            // eslint-disable-next-line no-case-declarations, prefer-rest-params\n            let ret = arguments[0];\n            for (let i = 1; i < arguments.length; i++) {\n                // eslint-disable-next-line prefer-rest-params\n                ret = arguments[i](ret);\n            }\n            return ret;\n    }\n}\n", "export { createPubSub } from './create-pub-sub.js';\nexport { filter } from './operator/filter.js';\nexport { map } from './operator/map.js';\nexport { pipe } from './utils/pipe.js';\nexport { Repeater } from '@repeaterjs/repeater';\n", "export * from '@graphql-yoga/subscription';\n", "", "export * from '@graphql-yoga/logger';\nexport { renderGraphiQL, shouldRenderGraphiQL } from './plugins/use-graphiql.js';\nexport { useReadinessCheck } from './plugins/use-readiness-check.js';\nexport { useSchema } from './plugins/use-schema.js';\nexport * from './schema.js';\nexport * from './server.js';\nexport * from './subscription.js';\nexport * from './types.js';\nexport { maskError } from './utils/mask-error.js';\nexport { _createLRUCache, createLRUCache } from './utils/create-lru-cache.js';\nexport { mergeSchemas } from '@graphql-tools/schema';\nexport { \n// useful for anyone creating a new envelop instance\nenvelop, errorAsyncIterator, finalAsyncIterator, handleStreamOrSingleExecutionResult, isAsyncIterable, \n// useful helpers\nisIntrospectionOperationString, makeExecute, makeSubscribe, mapAsyncIterator, \n// Default plugins\nuseEnvelop, useErrorHandler, useExtendContext, useLogger, usePayloadFormatter, } from '@envelop/core';\nexport { createGraphQLError, isPromise, mapMaybePromise } from '@graphql-tools/utils';\nexport { getSSEProcessor } from './plugins/result-processor/sse.js';\nexport { processRegularResult } from './plugins/result-processor/regular.js';\nexport { useExecutionCancellation } from './plugins/use-execution-cancellation.js';\nexport { DisposableSymbols } from '@whatwg-node/server';\n", "import { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport { drizzle } from \"drizzle-orm/d1\";\nimport { createYoga, createSchema } from \"graphql-yoga\";\nconst names = sqliteTable(\"names\", {\n  id: integer(\"id\").primaryKey(),\n  name: text(\"name\")\n});\nconst schema = \"type Query {\\n\tKVNames: [String!]!\\n\tD1Names: [D1Name!]!\\n\tDOCounter: Int!\\n}\\n\\ntype Mutation {\\n\tKVAddName(name: String!): String!\\n\tD1AddName(name: String!): D1Name!\\n\tDOIncrementCounter(amount: Int): Int!\\n\tAnalyticsWriteDataPoint(value: Float!): Boolean!\\n\tQueueAddTask(task: String!): Boolean!\\n}\\n\\ntype D1Name {\\n\tid: ID!\\n\tname: String!\\n}\\n\";\nconst yogaApp = createYoga({\n  batching: true,\n  logging: true,\n  schema: createSchema({\n    typeDefs: [schema],\n    resolvers: {\n      Query: {\n        KVNames: async (_, _args, ctx) => {\n          const res = await ctx.platform.env.KV.list({\n            limit: 10\n          });\n          return res.keys?.map((key) => key.name);\n        },\n        D1Names: async (_, _args, ctx) => {\n          const db = drizzle(ctx.platform.env.DB);\n          return await db.select().from(names).all();\n        },\n        DOCounter: async (_, _args, ctx) => {\n          const id = ctx.platform.env.DO_COUNTER.idFromName(\"foo\");\n          const stub = ctx.platform.env.DO_COUNTER.get(id);\n          return await stub.getCounterValue();\n        }\n      },\n      Mutation: {\n        KVAddName: async (_, {\n          name\n        }, ctx) => {\n          await ctx.platform.env.KV.put(name, name);\n          return name;\n        },\n        D1AddName: async (_, {\n          name\n        }, ctx) => {\n          const db = drizzle(ctx.platform.env.DB);\n          const res = await db.insert(names).values({\n            name\n          }).returning();\n          return res[0];\n        },\n        DOIncrementCounter: async (_, {\n          amount\n        }, ctx) => {\n          const id = ctx.platform.env.DO_COUNTER.idFromName(\"foo\");\n          const stub = ctx.platform.env.DO_COUNTER.get(id);\n          return await stub.increment(amount || 1);\n        },\n        QueueAddTask: async (_, {\n          task\n        }, ctx) => {\n          await ctx.platform.env.QUEUE?.send(task, {\n            contentType: \"text\"\n          });\n          return !!ctx.platform.env.QUEUE;\n        },\n        AnalyticsWriteDataPoint: (_, {\n          value\n        }, ctx) => {\n          const {\n            region,\n            country,\n            city\n          } = ctx.platform.cf;\n          const blobs = [region, country, city].filter((i) => i);\n          ctx.platform.env.ANALYTICS?.writeDataPoint({\n            blobs: [...blobs, \"foobar\"],\n            doubles: [value],\n            indexes: [\"foo\"]\n          });\n          return !!ctx.platform.env.ANALYTICS;\n        }\n      }\n    }\n  }),\n  plugins: [],\n  graphqlEndpoint: \"/graphql\",\n  graphiql: {\n    defaultQuery: `\n\t\t\tquery {\n\t\t\t\tKVNames\n\t\t\t}\n\t\t`\n  },\n  fetchAPI: {\n    Response\n  }\n});\nexport {\n  yogaApp as GET,\n  yogaApp as OPTIONS,\n  yogaApp as POST\n};\n", "'use strict';\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function(t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n", "module.exports = {\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomdeleted+xml\":[\"atomdeleted\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/atsc-dwd+xml\":[\"dwd\"],\"application/atsc-held+xml\":[\"held\"],\"application/atsc-rsat+xml\":[\"rsat\"],\"application/bdoc\":[\"bdoc\"],\"application/calendar+xml\":[\"xcs\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdfx+xml\":[\"cdfx\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"es\",\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/emotionml+xml\":[\"emotionml\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/express\":[\"exp\"],\"application/fdt+xml\":[\"fdt\"],\"application/font-tdpfr\":[\"pfr\"],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hjson\":[\"hjson\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/its+xml\":[\"its\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lgr+xml\":[\"lgr\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mmt-aei+xml\":[\"maei\"],\"application/mmt-usd+xml\":[\"musd\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/n-quads\":[\"nq\"],\"application/n-triples\":[\"nt\"],\"application/node\":[\"cjs\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/p2p-overlay+xml\":[\"relo\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/provenance+xml\":[\"provx\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\",\"owl\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/route-apd+xml\":[\"rapd\"],\"application/route-s-tsid+xml\":[\"sls\"],\"application/route-usd+xml\":[\"rusd\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/senml+xml\":[\"senmlx\"],\"application/sensml+xml\":[\"sensmlx\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/sieve\":[\"siv\",\"sieve\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/swid+xml\":[\"swidtag\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/toml\":[\"toml\"],\"application/trig\":[\"trig\"],\"application/ttml+xml\":[\"ttml\"],\"application/ubjson\":[\"ubj\"],\"application/urc-ressheet+xml\":[\"rsheet\"],\"application/urc-targetdesc+xml\":[\"td\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-att+xml\":[\"xav\"],\"application/xcap-caps+xml\":[\"xca\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xcap-el+xml\":[\"xel\"],\"application/xcap-ns+xml\":[\"xns\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xliff+xml\":[\"xlf\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"*xsl\",\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[\"*3gpp\"],\"audio/adpcm\":[\"adp\"],\"audio/amr\":[\"amr\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mobile-xmf\":[\"mxmf\"],\"audio/mp3\":[\"*mp3\"],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\",\"opus\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[\"*wav\"],\"audio/webm\":[\"weba\"],\"audio/xm\":[\"xm\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/aces\":[\"exr\"],\"image/apng\":[\"apng\"],\"image/avif\":[\"avif\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/dicom-rle\":[\"drle\"],\"image/emf\":[\"emf\"],\"image/fits\":[\"fits\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/heic\":[\"heic\"],\"image/heic-sequence\":[\"heics\"],\"image/heif\":[\"heif\"],\"image/heif-sequence\":[\"heifs\"],\"image/hej2k\":[\"hej2\"],\"image/hsj2\":[\"hsj2\"],\"image/ief\":[\"ief\"],\"image/jls\":[\"jls\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jph\":[\"jph\"],\"image/jphc\":[\"jhc\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/jxr\":[\"jxr\"],\"image/jxra\":[\"jxra\"],\"image/jxrs\":[\"jxrs\"],\"image/jxs\":[\"jxs\"],\"image/jxsc\":[\"jxsc\"],\"image/jxsi\":[\"jxsi\"],\"image/jxss\":[\"jxss\"],\"image/ktx\":[\"ktx\"],\"image/ktx2\":[\"ktx2\"],\"image/png\":[\"png\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/t38\":[\"t38\"],\"image/tiff\":[\"tif\",\"tiff\"],\"image/tiff-fx\":[\"tfx\"],\"image/webp\":[\"webp\"],\"image/wmf\":[\"wmf\"],\"message/disposition-notification\":[\"disposition-notification\"],\"message/global\":[\"u8msg\"],\"message/global-delivery-status\":[\"u8dsn\"],\"message/global-disposition-notification\":[\"u8mdn\"],\"message/global-headers\":[\"u8hdr\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/3mf\":[\"3mf\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/mtl\":[\"mtl\"],\"model/obj\":[\"obj\"],\"model/step+xml\":[\"stpx\"],\"model/step+zip\":[\"stpz\"],\"model/step-xml+zip\":[\"stpxz\"],\"model/stl\":[\"stl\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"*x3db\",\"x3dbz\"],\"model/x3d+fastinfoset\":[\"x3db\"],\"model/x3d+vrml\":[\"*x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"model/x3d-vrml\":[\"x3dv\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/mdx\":[\"mdx\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[\"*rtf\"],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/shex\":[\"shex\"],\"text/slim\":[\"slim\",\"slm\"],\"text/spdx\":[\"spdx\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vtt\":[\"vtt\"],\"text/xml\":[\"*xml\"],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/iso.segment\":[\"m4s\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"*jpm\",\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/webm\":[\"webm\"]};", "module.exports = {\"application/prs.cww\":[\"cww\"],\"application/vnd.1000minds.decision-model+xml\":[\"1km\"],\"application/vnd.3gpp.pic-bw-large\":[\"plb\"],\"application/vnd.3gpp.pic-bw-small\":[\"psb\"],\"application/vnd.3gpp.pic-bw-var\":[\"pvb\"],\"application/vnd.3gpp2.tcap\":[\"tcap\"],\"application/vnd.3m.post-it-notes\":[\"pwn\"],\"application/vnd.accpac.simply.aso\":[\"aso\"],\"application/vnd.accpac.simply.imp\":[\"imp\"],\"application/vnd.acucobol\":[\"acu\"],\"application/vnd.acucorp\":[\"atc\",\"acutc\"],\"application/vnd.adobe.air-application-installer-package+zip\":[\"air\"],\"application/vnd.adobe.formscentral.fcdt\":[\"fcdt\"],\"application/vnd.adobe.fxp\":[\"fxp\",\"fxpl\"],\"application/vnd.adobe.xdp+xml\":[\"xdp\"],\"application/vnd.adobe.xfdf\":[\"xfdf\"],\"application/vnd.ahead.space\":[\"ahead\"],\"application/vnd.airzip.filesecure.azf\":[\"azf\"],\"application/vnd.airzip.filesecure.azs\":[\"azs\"],\"application/vnd.amazon.ebook\":[\"azw\"],\"application/vnd.americandynamics.acc\":[\"acc\"],\"application/vnd.amiga.ami\":[\"ami\"],\"application/vnd.android.package-archive\":[\"apk\"],\"application/vnd.anser-web-certificate-issue-initiation\":[\"cii\"],\"application/vnd.anser-web-funds-transfer-initiation\":[\"fti\"],\"application/vnd.antix.game-component\":[\"atx\"],\"application/vnd.apple.installer+xml\":[\"mpkg\"],\"application/vnd.apple.keynote\":[\"key\"],\"application/vnd.apple.mpegurl\":[\"m3u8\"],\"application/vnd.apple.numbers\":[\"numbers\"],\"application/vnd.apple.pages\":[\"pages\"],\"application/vnd.apple.pkpass\":[\"pkpass\"],\"application/vnd.aristanetworks.swi\":[\"swi\"],\"application/vnd.astraea-software.iota\":[\"iota\"],\"application/vnd.audiograph\":[\"aep\"],\"application/vnd.balsamiq.bmml+xml\":[\"bmml\"],\"application/vnd.blueice.multipass\":[\"mpm\"],\"application/vnd.bmi\":[\"bmi\"],\"application/vnd.businessobjects\":[\"rep\"],\"application/vnd.chemdraw+xml\":[\"cdxml\"],\"application/vnd.chipnuts.karaoke-mmd\":[\"mmd\"],\"application/vnd.cinderella\":[\"cdy\"],\"application/vnd.citationstyles.style+xml\":[\"csl\"],\"application/vnd.claymore\":[\"cla\"],\"application/vnd.cloanto.rp9\":[\"rp9\"],\"application/vnd.clonk.c4group\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"],\"application/vnd.cluetrust.cartomobile-config\":[\"c11amc\"],\"application/vnd.cluetrust.cartomobile-config-pkg\":[\"c11amz\"],\"application/vnd.commonspace\":[\"csp\"],\"application/vnd.contact.cmsg\":[\"cdbcmsg\"],\"application/vnd.cosmocaller\":[\"cmc\"],\"application/vnd.crick.clicker\":[\"clkx\"],\"application/vnd.crick.clicker.keyboard\":[\"clkk\"],\"application/vnd.crick.clicker.palette\":[\"clkp\"],\"application/vnd.crick.clicker.template\":[\"clkt\"],\"application/vnd.crick.clicker.wordbank\":[\"clkw\"],\"application/vnd.criticaltools.wbs+xml\":[\"wbs\"],\"application/vnd.ctc-posml\":[\"pml\"],\"application/vnd.cups-ppd\":[\"ppd\"],\"application/vnd.curl.car\":[\"car\"],\"application/vnd.curl.pcurl\":[\"pcurl\"],\"application/vnd.dart\":[\"dart\"],\"application/vnd.data-vision.rdz\":[\"rdz\"],\"application/vnd.dbf\":[\"dbf\"],\"application/vnd.dece.data\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"],\"application/vnd.dece.ttml+xml\":[\"uvt\",\"uvvt\"],\"application/vnd.dece.unspecified\":[\"uvx\",\"uvvx\"],\"application/vnd.dece.zip\":[\"uvz\",\"uvvz\"],\"application/vnd.denovo.fcselayout-link\":[\"fe_launch\"],\"application/vnd.dna\":[\"dna\"],\"application/vnd.dolby.mlp\":[\"mlp\"],\"application/vnd.dpgraph\":[\"dpg\"],\"application/vnd.dreamfactory\":[\"dfac\"],\"application/vnd.ds-keypoint\":[\"kpxx\"],\"application/vnd.dvb.ait\":[\"ait\"],\"application/vnd.dvb.service\":[\"svc\"],\"application/vnd.dynageo\":[\"geo\"],\"application/vnd.ecowin.chart\":[\"mag\"],\"application/vnd.enliven\":[\"nml\"],\"application/vnd.epson.esf\":[\"esf\"],\"application/vnd.epson.msf\":[\"msf\"],\"application/vnd.epson.quickanime\":[\"qam\"],\"application/vnd.epson.salt\":[\"slt\"],\"application/vnd.epson.ssf\":[\"ssf\"],\"application/vnd.eszigno3+xml\":[\"es3\",\"et3\"],\"application/vnd.ezpix-album\":[\"ez2\"],\"application/vnd.ezpix-package\":[\"ez3\"],\"application/vnd.fdf\":[\"fdf\"],\"application/vnd.fdsn.mseed\":[\"mseed\"],\"application/vnd.fdsn.seed\":[\"seed\",\"dataless\"],\"application/vnd.flographit\":[\"gph\"],\"application/vnd.fluxtime.clip\":[\"ftc\"],\"application/vnd.framemaker\":[\"fm\",\"frame\",\"maker\",\"book\"],\"application/vnd.frogans.fnc\":[\"fnc\"],\"application/vnd.frogans.ltf\":[\"ltf\"],\"application/vnd.fsc.weblaunch\":[\"fsc\"],\"application/vnd.fujitsu.oasys\":[\"oas\"],\"application/vnd.fujitsu.oasys2\":[\"oa2\"],\"application/vnd.fujitsu.oasys3\":[\"oa3\"],\"application/vnd.fujitsu.oasysgp\":[\"fg5\"],\"application/vnd.fujitsu.oasysprs\":[\"bh2\"],\"application/vnd.fujixerox.ddd\":[\"ddd\"],\"application/vnd.fujixerox.docuworks\":[\"xdw\"],\"application/vnd.fujixerox.docuworks.binder\":[\"xbd\"],\"application/vnd.fuzzysheet\":[\"fzs\"],\"application/vnd.genomatix.tuxedo\":[\"txd\"],\"application/vnd.geogebra.file\":[\"ggb\"],\"application/vnd.geogebra.tool\":[\"ggt\"],\"application/vnd.geometry-explorer\":[\"gex\",\"gre\"],\"application/vnd.geonext\":[\"gxt\"],\"application/vnd.geoplan\":[\"g2w\"],\"application/vnd.geospace\":[\"g3w\"],\"application/vnd.gmx\":[\"gmx\"],\"application/vnd.google-apps.document\":[\"gdoc\"],\"application/vnd.google-apps.presentation\":[\"gslides\"],\"application/vnd.google-apps.spreadsheet\":[\"gsheet\"],\"application/vnd.google-earth.kml+xml\":[\"kml\"],\"application/vnd.google-earth.kmz\":[\"kmz\"],\"application/vnd.grafeq\":[\"gqf\",\"gqs\"],\"application/vnd.groove-account\":[\"gac\"],\"application/vnd.groove-help\":[\"ghf\"],\"application/vnd.groove-identity-message\":[\"gim\"],\"application/vnd.groove-injector\":[\"grv\"],\"application/vnd.groove-tool-message\":[\"gtm\"],\"application/vnd.groove-tool-template\":[\"tpl\"],\"application/vnd.groove-vcard\":[\"vcg\"],\"application/vnd.hal+xml\":[\"hal\"],\"application/vnd.handheld-entertainment+xml\":[\"zmm\"],\"application/vnd.hbci\":[\"hbci\"],\"application/vnd.hhe.lesson-player\":[\"les\"],\"application/vnd.hp-hpgl\":[\"hpgl\"],\"application/vnd.hp-hpid\":[\"hpid\"],\"application/vnd.hp-hps\":[\"hps\"],\"application/vnd.hp-jlyt\":[\"jlt\"],\"application/vnd.hp-pcl\":[\"pcl\"],\"application/vnd.hp-pclxl\":[\"pclxl\"],\"application/vnd.hydrostatix.sof-data\":[\"sfd-hdstx\"],\"application/vnd.ibm.minipay\":[\"mpy\"],\"application/vnd.ibm.modcap\":[\"afp\",\"listafp\",\"list3820\"],\"application/vnd.ibm.rights-management\":[\"irm\"],\"application/vnd.ibm.secure-container\":[\"sc\"],\"application/vnd.iccprofile\":[\"icc\",\"icm\"],\"application/vnd.igloader\":[\"igl\"],\"application/vnd.immervision-ivp\":[\"ivp\"],\"application/vnd.immervision-ivu\":[\"ivu\"],\"application/vnd.insors.igm\":[\"igm\"],\"application/vnd.intercon.formnet\":[\"xpw\",\"xpx\"],\"application/vnd.intergeo\":[\"i2g\"],\"application/vnd.intu.qbo\":[\"qbo\"],\"application/vnd.intu.qfx\":[\"qfx\"],\"application/vnd.ipunplugged.rcprofile\":[\"rcprofile\"],\"application/vnd.irepository.package+xml\":[\"irp\"],\"application/vnd.is-xpr\":[\"xpr\"],\"application/vnd.isac.fcs\":[\"fcs\"],\"application/vnd.jam\":[\"jam\"],\"application/vnd.jcp.javame.midlet-rms\":[\"rms\"],\"application/vnd.jisp\":[\"jisp\"],\"application/vnd.joost.joda-archive\":[\"joda\"],\"application/vnd.kahootz\":[\"ktz\",\"ktr\"],\"application/vnd.kde.karbon\":[\"karbon\"],\"application/vnd.kde.kchart\":[\"chrt\"],\"application/vnd.kde.kformula\":[\"kfo\"],\"application/vnd.kde.kivio\":[\"flw\"],\"application/vnd.kde.kontour\":[\"kon\"],\"application/vnd.kde.kpresenter\":[\"kpr\",\"kpt\"],\"application/vnd.kde.kspread\":[\"ksp\"],\"application/vnd.kde.kword\":[\"kwd\",\"kwt\"],\"application/vnd.kenameaapp\":[\"htke\"],\"application/vnd.kidspiration\":[\"kia\"],\"application/vnd.kinar\":[\"kne\",\"knp\"],\"application/vnd.koan\":[\"skp\",\"skd\",\"skt\",\"skm\"],\"application/vnd.kodak-descriptor\":[\"sse\"],\"application/vnd.las.las+xml\":[\"lasxml\"],\"application/vnd.llamagraphics.life-balance.desktop\":[\"lbd\"],\"application/vnd.llamagraphics.life-balance.exchange+xml\":[\"lbe\"],\"application/vnd.lotus-1-2-3\":[\"123\"],\"application/vnd.lotus-approach\":[\"apr\"],\"application/vnd.lotus-freelance\":[\"pre\"],\"application/vnd.lotus-notes\":[\"nsf\"],\"application/vnd.lotus-organizer\":[\"org\"],\"application/vnd.lotus-screencam\":[\"scm\"],\"application/vnd.lotus-wordpro\":[\"lwp\"],\"application/vnd.macports.portpkg\":[\"portpkg\"],\"application/vnd.mapbox-vector-tile\":[\"mvt\"],\"application/vnd.mcd\":[\"mcd\"],\"application/vnd.medcalcdata\":[\"mc1\"],\"application/vnd.mediastation.cdkey\":[\"cdkey\"],\"application/vnd.mfer\":[\"mwf\"],\"application/vnd.mfmp\":[\"mfm\"],\"application/vnd.micrografx.flo\":[\"flo\"],\"application/vnd.micrografx.igx\":[\"igx\"],\"application/vnd.mif\":[\"mif\"],\"application/vnd.mobius.daf\":[\"daf\"],\"application/vnd.mobius.dis\":[\"dis\"],\"application/vnd.mobius.mbk\":[\"mbk\"],\"application/vnd.mobius.mqy\":[\"mqy\"],\"application/vnd.mobius.msl\":[\"msl\"],\"application/vnd.mobius.plc\":[\"plc\"],\"application/vnd.mobius.txf\":[\"txf\"],\"application/vnd.mophun.application\":[\"mpn\"],\"application/vnd.mophun.certificate\":[\"mpc\"],\"application/vnd.mozilla.xul+xml\":[\"xul\"],\"application/vnd.ms-artgalry\":[\"cil\"],\"application/vnd.ms-cab-compressed\":[\"cab\"],\"application/vnd.ms-excel\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"],\"application/vnd.ms-excel.addin.macroenabled.12\":[\"xlam\"],\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":[\"xlsb\"],\"application/vnd.ms-excel.sheet.macroenabled.12\":[\"xlsm\"],\"application/vnd.ms-excel.template.macroenabled.12\":[\"xltm\"],\"application/vnd.ms-fontobject\":[\"eot\"],\"application/vnd.ms-htmlhelp\":[\"chm\"],\"application/vnd.ms-ims\":[\"ims\"],\"application/vnd.ms-lrm\":[\"lrm\"],\"application/vnd.ms-officetheme\":[\"thmx\"],\"application/vnd.ms-outlook\":[\"msg\"],\"application/vnd.ms-pki.seccat\":[\"cat\"],\"application/vnd.ms-pki.stl\":[\"*stl\"],\"application/vnd.ms-powerpoint\":[\"ppt\",\"pps\",\"pot\"],\"application/vnd.ms-powerpoint.addin.macroenabled.12\":[\"ppam\"],\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":[\"pptm\"],\"application/vnd.ms-powerpoint.slide.macroenabled.12\":[\"sldm\"],\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":[\"ppsm\"],\"application/vnd.ms-powerpoint.template.macroenabled.12\":[\"potm\"],\"application/vnd.ms-project\":[\"mpp\",\"mpt\"],\"application/vnd.ms-word.document.macroenabled.12\":[\"docm\"],\"application/vnd.ms-word.template.macroenabled.12\":[\"dotm\"],\"application/vnd.ms-works\":[\"wps\",\"wks\",\"wcm\",\"wdb\"],\"application/vnd.ms-wpl\":[\"wpl\"],\"application/vnd.ms-xpsdocument\":[\"xps\"],\"application/vnd.mseq\":[\"mseq\"],\"application/vnd.musician\":[\"mus\"],\"application/vnd.muvee.style\":[\"msty\"],\"application/vnd.mynfc\":[\"taglet\"],\"application/vnd.neurolanguage.nlu\":[\"nlu\"],\"application/vnd.nitf\":[\"ntf\",\"nitf\"],\"application/vnd.noblenet-directory\":[\"nnd\"],\"application/vnd.noblenet-sealer\":[\"nns\"],\"application/vnd.noblenet-web\":[\"nnw\"],\"application/vnd.nokia.n-gage.ac+xml\":[\"*ac\"],\"application/vnd.nokia.n-gage.data\":[\"ngdat\"],\"application/vnd.nokia.n-gage.symbian.install\":[\"n-gage\"],\"application/vnd.nokia.radio-preset\":[\"rpst\"],\"application/vnd.nokia.radio-presets\":[\"rpss\"],\"application/vnd.novadigm.edm\":[\"edm\"],\"application/vnd.novadigm.edx\":[\"edx\"],\"application/vnd.novadigm.ext\":[\"ext\"],\"application/vnd.oasis.opendocument.chart\":[\"odc\"],\"application/vnd.oasis.opendocument.chart-template\":[\"otc\"],\"application/vnd.oasis.opendocument.database\":[\"odb\"],\"application/vnd.oasis.opendocument.formula\":[\"odf\"],\"application/vnd.oasis.opendocument.formula-template\":[\"odft\"],\"application/vnd.oasis.opendocument.graphics\":[\"odg\"],\"application/vnd.oasis.opendocument.graphics-template\":[\"otg\"],\"application/vnd.oasis.opendocument.image\":[\"odi\"],\"application/vnd.oasis.opendocument.image-template\":[\"oti\"],\"application/vnd.oasis.opendocument.presentation\":[\"odp\"],\"application/vnd.oasis.opendocument.presentation-template\":[\"otp\"],\"application/vnd.oasis.opendocument.spreadsheet\":[\"ods\"],\"application/vnd.oasis.opendocument.spreadsheet-template\":[\"ots\"],\"application/vnd.oasis.opendocument.text\":[\"odt\"],\"application/vnd.oasis.opendocument.text-master\":[\"odm\"],\"application/vnd.oasis.opendocument.text-template\":[\"ott\"],\"application/vnd.oasis.opendocument.text-web\":[\"oth\"],\"application/vnd.olpc-sugar\":[\"xo\"],\"application/vnd.oma.dd2+xml\":[\"dd2\"],\"application/vnd.openblox.game+xml\":[\"obgx\"],\"application/vnd.openofficeorg.extension\":[\"oxt\"],\"application/vnd.openstreetmap.data+xml\":[\"osm\"],\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":[\"pptx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slide\":[\"sldx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":[\"ppsx\"],\"application/vnd.openxmlformats-officedocument.presentationml.template\":[\"potx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":[\"xlsx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":[\"xltx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":[\"docx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":[\"dotx\"],\"application/vnd.osgeo.mapguide.package\":[\"mgp\"],\"application/vnd.osgi.dp\":[\"dp\"],\"application/vnd.osgi.subsystem\":[\"esa\"],\"application/vnd.palm\":[\"pdb\",\"pqa\",\"oprc\"],\"application/vnd.pawaafile\":[\"paw\"],\"application/vnd.pg.format\":[\"str\"],\"application/vnd.pg.osasli\":[\"ei6\"],\"application/vnd.picsel\":[\"efif\"],\"application/vnd.pmi.widget\":[\"wg\"],\"application/vnd.pocketlearn\":[\"plf\"],\"application/vnd.powerbuilder6\":[\"pbd\"],\"application/vnd.previewsystems.box\":[\"box\"],\"application/vnd.proteus.magazine\":[\"mgz\"],\"application/vnd.publishare-delta-tree\":[\"qps\"],\"application/vnd.pvi.ptid1\":[\"ptid\"],\"application/vnd.quark.quarkxpress\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"],\"application/vnd.rar\":[\"rar\"],\"application/vnd.realvnc.bed\":[\"bed\"],\"application/vnd.recordare.musicxml\":[\"mxl\"],\"application/vnd.recordare.musicxml+xml\":[\"musicxml\"],\"application/vnd.rig.cryptonote\":[\"cryptonote\"],\"application/vnd.rim.cod\":[\"cod\"],\"application/vnd.rn-realmedia\":[\"rm\"],\"application/vnd.rn-realmedia-vbr\":[\"rmvb\"],\"application/vnd.route66.link66+xml\":[\"link66\"],\"application/vnd.sailingtracker.track\":[\"st\"],\"application/vnd.seemail\":[\"see\"],\"application/vnd.sema\":[\"sema\"],\"application/vnd.semd\":[\"semd\"],\"application/vnd.semf\":[\"semf\"],\"application/vnd.shana.informed.formdata\":[\"ifm\"],\"application/vnd.shana.informed.formtemplate\":[\"itp\"],\"application/vnd.shana.informed.interchange\":[\"iif\"],\"application/vnd.shana.informed.package\":[\"ipk\"],\"application/vnd.simtech-mindmapper\":[\"twd\",\"twds\"],\"application/vnd.smaf\":[\"mmf\"],\"application/vnd.smart.teacher\":[\"teacher\"],\"application/vnd.software602.filler.form+xml\":[\"fo\"],\"application/vnd.solent.sdkm+xml\":[\"sdkm\",\"sdkd\"],\"application/vnd.spotfire.dxp\":[\"dxp\"],\"application/vnd.spotfire.sfs\":[\"sfs\"],\"application/vnd.stardivision.calc\":[\"sdc\"],\"application/vnd.stardivision.draw\":[\"sda\"],\"application/vnd.stardivision.impress\":[\"sdd\"],\"application/vnd.stardivision.math\":[\"smf\"],\"application/vnd.stardivision.writer\":[\"sdw\",\"vor\"],\"application/vnd.stardivision.writer-global\":[\"sgl\"],\"application/vnd.stepmania.package\":[\"smzip\"],\"application/vnd.stepmania.stepchart\":[\"sm\"],\"application/vnd.sun.wadl+xml\":[\"wadl\"],\"application/vnd.sun.xml.calc\":[\"sxc\"],\"application/vnd.sun.xml.calc.template\":[\"stc\"],\"application/vnd.sun.xml.draw\":[\"sxd\"],\"application/vnd.sun.xml.draw.template\":[\"std\"],\"application/vnd.sun.xml.impress\":[\"sxi\"],\"application/vnd.sun.xml.impress.template\":[\"sti\"],\"application/vnd.sun.xml.math\":[\"sxm\"],\"application/vnd.sun.xml.writer\":[\"sxw\"],\"application/vnd.sun.xml.writer.global\":[\"sxg\"],\"application/vnd.sun.xml.writer.template\":[\"stw\"],\"application/vnd.sus-calendar\":[\"sus\",\"susp\"],\"application/vnd.svd\":[\"svd\"],\"application/vnd.symbian.install\":[\"sis\",\"sisx\"],\"application/vnd.syncml+xml\":[\"xsm\"],\"application/vnd.syncml.dm+wbxml\":[\"bdm\"],\"application/vnd.syncml.dm+xml\":[\"xdm\"],\"application/vnd.syncml.dmddf+xml\":[\"ddf\"],\"application/vnd.tao.intent-module-archive\":[\"tao\"],\"application/vnd.tcpdump.pcap\":[\"pcap\",\"cap\",\"dmp\"],\"application/vnd.tmobile-livetv\":[\"tmo\"],\"application/vnd.trid.tpt\":[\"tpt\"],\"application/vnd.triscape.mxs\":[\"mxs\"],\"application/vnd.trueapp\":[\"tra\"],\"application/vnd.ufdl\":[\"ufd\",\"ufdl\"],\"application/vnd.uiq.theme\":[\"utz\"],\"application/vnd.umajin\":[\"umj\"],\"application/vnd.unity\":[\"unityweb\"],\"application/vnd.uoml+xml\":[\"uoml\"],\"application/vnd.vcx\":[\"vcx\"],\"application/vnd.visio\":[\"vsd\",\"vst\",\"vss\",\"vsw\"],\"application/vnd.visionary\":[\"vis\"],\"application/vnd.vsf\":[\"vsf\"],\"application/vnd.wap.wbxml\":[\"wbxml\"],\"application/vnd.wap.wmlc\":[\"wmlc\"],\"application/vnd.wap.wmlscriptc\":[\"wmlsc\"],\"application/vnd.webturbo\":[\"wtb\"],\"application/vnd.wolfram.player\":[\"nbp\"],\"application/vnd.wordperfect\":[\"wpd\"],\"application/vnd.wqd\":[\"wqd\"],\"application/vnd.wt.stf\":[\"stf\"],\"application/vnd.xara\":[\"xar\"],\"application/vnd.xfdl\":[\"xfdl\"],\"application/vnd.yamaha.hv-dic\":[\"hvd\"],\"application/vnd.yamaha.hv-script\":[\"hvs\"],\"application/vnd.yamaha.hv-voice\":[\"hvp\"],\"application/vnd.yamaha.openscoreformat\":[\"osf\"],\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":[\"osfpvg\"],\"application/vnd.yamaha.smaf-audio\":[\"saf\"],\"application/vnd.yamaha.smaf-phrase\":[\"spf\"],\"application/vnd.yellowriver-custom-menu\":[\"cmp\"],\"application/vnd.zul\":[\"zir\",\"zirz\"],\"application/vnd.zzazz.deck+xml\":[\"zaz\"],\"application/x-7z-compressed\":[\"7z\"],\"application/x-abiword\":[\"abw\"],\"application/x-ace-compressed\":[\"ace\"],\"application/x-apple-diskimage\":[\"*dmg\"],\"application/x-arj\":[\"arj\"],\"application/x-authorware-bin\":[\"aab\",\"x32\",\"u32\",\"vox\"],\"application/x-authorware-map\":[\"aam\"],\"application/x-authorware-seg\":[\"aas\"],\"application/x-bcpio\":[\"bcpio\"],\"application/x-bdoc\":[\"*bdoc\"],\"application/x-bittorrent\":[\"torrent\"],\"application/x-blorb\":[\"blb\",\"blorb\"],\"application/x-bzip\":[\"bz\"],\"application/x-bzip2\":[\"bz2\",\"boz\"],\"application/x-cbr\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"],\"application/x-cdlink\":[\"vcd\"],\"application/x-cfs-compressed\":[\"cfs\"],\"application/x-chat\":[\"chat\"],\"application/x-chess-pgn\":[\"pgn\"],\"application/x-chrome-extension\":[\"crx\"],\"application/x-cocoa\":[\"cco\"],\"application/x-conference\":[\"nsc\"],\"application/x-cpio\":[\"cpio\"],\"application/x-csh\":[\"csh\"],\"application/x-debian-package\":[\"*deb\",\"udeb\"],\"application/x-dgc-compressed\":[\"dgc\"],\"application/x-director\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"],\"application/x-doom\":[\"wad\"],\"application/x-dtbncx+xml\":[\"ncx\"],\"application/x-dtbook+xml\":[\"dtb\"],\"application/x-dtbresource+xml\":[\"res\"],\"application/x-dvi\":[\"dvi\"],\"application/x-envoy\":[\"evy\"],\"application/x-eva\":[\"eva\"],\"application/x-font-bdf\":[\"bdf\"],\"application/x-font-ghostscript\":[\"gsf\"],\"application/x-font-linux-psf\":[\"psf\"],\"application/x-font-pcf\":[\"pcf\"],\"application/x-font-snf\":[\"snf\"],\"application/x-font-type1\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"],\"application/x-freearc\":[\"arc\"],\"application/x-futuresplash\":[\"spl\"],\"application/x-gca-compressed\":[\"gca\"],\"application/x-glulx\":[\"ulx\"],\"application/x-gnumeric\":[\"gnumeric\"],\"application/x-gramps-xml\":[\"gramps\"],\"application/x-gtar\":[\"gtar\"],\"application/x-hdf\":[\"hdf\"],\"application/x-httpd-php\":[\"php\"],\"application/x-install-instructions\":[\"install\"],\"application/x-iso9660-image\":[\"*iso\"],\"application/x-iwork-keynote-sffkey\":[\"*key\"],\"application/x-iwork-numbers-sffnumbers\":[\"*numbers\"],\"application/x-iwork-pages-sffpages\":[\"*pages\"],\"application/x-java-archive-diff\":[\"jardiff\"],\"application/x-java-jnlp-file\":[\"jnlp\"],\"application/x-keepass2\":[\"kdbx\"],\"application/x-latex\":[\"latex\"],\"application/x-lua-bytecode\":[\"luac\"],\"application/x-lzh-compressed\":[\"lzh\",\"lha\"],\"application/x-makeself\":[\"run\"],\"application/x-mie\":[\"mie\"],\"application/x-mobipocket-ebook\":[\"prc\",\"mobi\"],\"application/x-ms-application\":[\"application\"],\"application/x-ms-shortcut\":[\"lnk\"],\"application/x-ms-wmd\":[\"wmd\"],\"application/x-ms-wmz\":[\"wmz\"],\"application/x-ms-xbap\":[\"xbap\"],\"application/x-msaccess\":[\"mdb\"],\"application/x-msbinder\":[\"obd\"],\"application/x-mscardfile\":[\"crd\"],\"application/x-msclip\":[\"clp\"],\"application/x-msdos-program\":[\"*exe\"],\"application/x-msdownload\":[\"*exe\",\"*dll\",\"com\",\"bat\",\"*msi\"],\"application/x-msmediaview\":[\"mvb\",\"m13\",\"m14\"],\"application/x-msmetafile\":[\"*wmf\",\"*wmz\",\"*emf\",\"emz\"],\"application/x-msmoney\":[\"mny\"],\"application/x-mspublisher\":[\"pub\"],\"application/x-msschedule\":[\"scd\"],\"application/x-msterminal\":[\"trm\"],\"application/x-mswrite\":[\"wri\"],\"application/x-netcdf\":[\"nc\",\"cdf\"],\"application/x-ns-proxy-autoconfig\":[\"pac\"],\"application/x-nzb\":[\"nzb\"],\"application/x-perl\":[\"pl\",\"pm\"],\"application/x-pilot\":[\"*prc\",\"*pdb\"],\"application/x-pkcs12\":[\"p12\",\"pfx\"],\"application/x-pkcs7-certificates\":[\"p7b\",\"spc\"],\"application/x-pkcs7-certreqresp\":[\"p7r\"],\"application/x-rar-compressed\":[\"*rar\"],\"application/x-redhat-package-manager\":[\"rpm\"],\"application/x-research-info-systems\":[\"ris\"],\"application/x-sea\":[\"sea\"],\"application/x-sh\":[\"sh\"],\"application/x-shar\":[\"shar\"],\"application/x-shockwave-flash\":[\"swf\"],\"application/x-silverlight-app\":[\"xap\"],\"application/x-sql\":[\"sql\"],\"application/x-stuffit\":[\"sit\"],\"application/x-stuffitx\":[\"sitx\"],\"application/x-subrip\":[\"srt\"],\"application/x-sv4cpio\":[\"sv4cpio\"],\"application/x-sv4crc\":[\"sv4crc\"],\"application/x-t3vm-image\":[\"t3\"],\"application/x-tads\":[\"gam\"],\"application/x-tar\":[\"tar\"],\"application/x-tcl\":[\"tcl\",\"tk\"],\"application/x-tex\":[\"tex\"],\"application/x-tex-tfm\":[\"tfm\"],\"application/x-texinfo\":[\"texinfo\",\"texi\"],\"application/x-tgif\":[\"*obj\"],\"application/x-ustar\":[\"ustar\"],\"application/x-virtualbox-hdd\":[\"hdd\"],\"application/x-virtualbox-ova\":[\"ova\"],\"application/x-virtualbox-ovf\":[\"ovf\"],\"application/x-virtualbox-vbox\":[\"vbox\"],\"application/x-virtualbox-vbox-extpack\":[\"vbox-extpack\"],\"application/x-virtualbox-vdi\":[\"vdi\"],\"application/x-virtualbox-vhd\":[\"vhd\"],\"application/x-virtualbox-vmdk\":[\"vmdk\"],\"application/x-wais-source\":[\"src\"],\"application/x-web-app-manifest+json\":[\"webapp\"],\"application/x-x509-ca-cert\":[\"der\",\"crt\",\"pem\"],\"application/x-xfig\":[\"fig\"],\"application/x-xliff+xml\":[\"*xlf\"],\"application/x-xpinstall\":[\"xpi\"],\"application/x-xz\":[\"xz\"],\"application/x-zmachine\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"],\"audio/vnd.dece.audio\":[\"uva\",\"uvva\"],\"audio/vnd.digital-winds\":[\"eol\"],\"audio/vnd.dra\":[\"dra\"],\"audio/vnd.dts\":[\"dts\"],\"audio/vnd.dts.hd\":[\"dtshd\"],\"audio/vnd.lucent.voice\":[\"lvp\"],\"audio/vnd.ms-playready.media.pya\":[\"pya\"],\"audio/vnd.nuera.ecelp4800\":[\"ecelp4800\"],\"audio/vnd.nuera.ecelp7470\":[\"ecelp7470\"],\"audio/vnd.nuera.ecelp9600\":[\"ecelp9600\"],\"audio/vnd.rip\":[\"rip\"],\"audio/x-aac\":[\"aac\"],\"audio/x-aiff\":[\"aif\",\"aiff\",\"aifc\"],\"audio/x-caf\":[\"caf\"],\"audio/x-flac\":[\"flac\"],\"audio/x-m4a\":[\"*m4a\"],\"audio/x-matroska\":[\"mka\"],\"audio/x-mpegurl\":[\"m3u\"],\"audio/x-ms-wax\":[\"wax\"],\"audio/x-ms-wma\":[\"wma\"],\"audio/x-pn-realaudio\":[\"ram\",\"ra\"],\"audio/x-pn-realaudio-plugin\":[\"rmp\"],\"audio/x-realaudio\":[\"*ra\"],\"audio/x-wav\":[\"*wav\"],\"chemical/x-cdx\":[\"cdx\"],\"chemical/x-cif\":[\"cif\"],\"chemical/x-cmdf\":[\"cmdf\"],\"chemical/x-cml\":[\"cml\"],\"chemical/x-csml\":[\"csml\"],\"chemical/x-xyz\":[\"xyz\"],\"image/prs.btif\":[\"btif\"],\"image/prs.pti\":[\"pti\"],\"image/vnd.adobe.photoshop\":[\"psd\"],\"image/vnd.airzip.accelerator.azv\":[\"azv\"],\"image/vnd.dece.graphic\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"],\"image/vnd.djvu\":[\"djvu\",\"djv\"],\"image/vnd.dvb.subtitle\":[\"*sub\"],\"image/vnd.dwg\":[\"dwg\"],\"image/vnd.dxf\":[\"dxf\"],\"image/vnd.fastbidsheet\":[\"fbs\"],\"image/vnd.fpx\":[\"fpx\"],\"image/vnd.fst\":[\"fst\"],\"image/vnd.fujixerox.edmics-mmr\":[\"mmr\"],\"image/vnd.fujixerox.edmics-rlc\":[\"rlc\"],\"image/vnd.microsoft.icon\":[\"ico\"],\"image/vnd.ms-dds\":[\"dds\"],\"image/vnd.ms-modi\":[\"mdi\"],\"image/vnd.ms-photo\":[\"wdp\"],\"image/vnd.net-fpx\":[\"npx\"],\"image/vnd.pco.b16\":[\"b16\"],\"image/vnd.tencent.tap\":[\"tap\"],\"image/vnd.valve.source.texture\":[\"vtf\"],\"image/vnd.wap.wbmp\":[\"wbmp\"],\"image/vnd.xiff\":[\"xif\"],\"image/vnd.zbrush.pcx\":[\"pcx\"],\"image/x-3ds\":[\"3ds\"],\"image/x-cmu-raster\":[\"ras\"],\"image/x-cmx\":[\"cmx\"],\"image/x-freehand\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"],\"image/x-icon\":[\"*ico\"],\"image/x-jng\":[\"jng\"],\"image/x-mrsid-image\":[\"sid\"],\"image/x-ms-bmp\":[\"*bmp\"],\"image/x-pcx\":[\"*pcx\"],\"image/x-pict\":[\"pic\",\"pct\"],\"image/x-portable-anymap\":[\"pnm\"],\"image/x-portable-bitmap\":[\"pbm\"],\"image/x-portable-graymap\":[\"pgm\"],\"image/x-portable-pixmap\":[\"ppm\"],\"image/x-rgb\":[\"rgb\"],\"image/x-tga\":[\"tga\"],\"image/x-xbitmap\":[\"xbm\"],\"image/x-xpixmap\":[\"xpm\"],\"image/x-xwindowdump\":[\"xwd\"],\"message/vnd.wfa.wsc\":[\"wsc\"],\"model/vnd.collada+xml\":[\"dae\"],\"model/vnd.dwf\":[\"dwf\"],\"model/vnd.gdl\":[\"gdl\"],\"model/vnd.gtw\":[\"gtw\"],\"model/vnd.mts\":[\"mts\"],\"model/vnd.opengex\":[\"ogex\"],\"model/vnd.parasolid.transmit.binary\":[\"x_b\"],\"model/vnd.parasolid.transmit.text\":[\"x_t\"],\"model/vnd.sap.vds\":[\"vds\"],\"model/vnd.usdz+zip\":[\"usdz\"],\"model/vnd.valve.source.compiled-map\":[\"bsp\"],\"model/vnd.vtu\":[\"vtu\"],\"text/prs.lines.tag\":[\"dsc\"],\"text/vnd.curl\":[\"curl\"],\"text/vnd.curl.dcurl\":[\"dcurl\"],\"text/vnd.curl.mcurl\":[\"mcurl\"],\"text/vnd.curl.scurl\":[\"scurl\"],\"text/vnd.dvb.subtitle\":[\"sub\"],\"text/vnd.fly\":[\"fly\"],\"text/vnd.fmi.flexstor\":[\"flx\"],\"text/vnd.graphviz\":[\"gv\"],\"text/vnd.in3d.3dml\":[\"3dml\"],\"text/vnd.in3d.spot\":[\"spot\"],\"text/vnd.sun.j2me.app-descriptor\":[\"jad\"],\"text/vnd.wap.wml\":[\"wml\"],\"text/vnd.wap.wmlscript\":[\"wmls\"],\"text/x-asm\":[\"s\",\"asm\"],\"text/x-c\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"],\"text/x-component\":[\"htc\"],\"text/x-fortran\":[\"f\",\"for\",\"f77\",\"f90\"],\"text/x-handlebars-template\":[\"hbs\"],\"text/x-java-source\":[\"java\"],\"text/x-lua\":[\"lua\"],\"text/x-markdown\":[\"mkd\"],\"text/x-nfo\":[\"nfo\"],\"text/x-opml\":[\"opml\"],\"text/x-org\":[\"*org\"],\"text/x-pascal\":[\"p\",\"pas\"],\"text/x-processing\":[\"pde\"],\"text/x-sass\":[\"sass\"],\"text/x-scss\":[\"scss\"],\"text/x-setext\":[\"etx\"],\"text/x-sfv\":[\"sfv\"],\"text/x-suse-ymp\":[\"ymp\"],\"text/x-uuencode\":[\"uu\"],\"text/x-vcalendar\":[\"vcs\"],\"text/x-vcard\":[\"vcf\"],\"video/vnd.dece.hd\":[\"uvh\",\"uvvh\"],\"video/vnd.dece.mobile\":[\"uvm\",\"uvvm\"],\"video/vnd.dece.pd\":[\"uvp\",\"uvvp\"],\"video/vnd.dece.sd\":[\"uvs\",\"uvvs\"],\"video/vnd.dece.video\":[\"uvv\",\"uvvv\"],\"video/vnd.dvb.file\":[\"dvb\"],\"video/vnd.fvt\":[\"fvt\"],\"video/vnd.mpegurl\":[\"mxu\",\"m4u\"],\"video/vnd.ms-playready.media.pyv\":[\"pyv\"],\"video/vnd.uvvu.mp4\":[\"uvu\",\"uvvu\"],\"video/vnd.vivo\":[\"viv\"],\"video/x-f4v\":[\"f4v\"],\"video/x-fli\":[\"fli\"],\"video/x-flv\":[\"flv\"],\"video/x-m4v\":[\"m4v\"],\"video/x-matroska\":[\"mkv\",\"mk3d\",\"mks\"],\"video/x-mng\":[\"mng\"],\"video/x-ms-asf\":[\"asf\",\"asx\"],\"video/x-ms-vob\":[\"vob\"],\"video/x-ms-wm\":[\"wm\"],\"video/x-ms-wmv\":[\"wmv\"],\"video/x-ms-wmx\":[\"wmx\"],\"video/x-ms-wvx\":[\"wvx\"],\"video/x-msvideo\":[\"avi\"],\"video/x-sgi-movie\":[\"movie\"],\"video/x-smv\":[\"smv\"],\"x-conference/x-cooltalk\":[\"ice\"]};", "'use strict';\n\nlet Mime = require('./Mime');\nmodule.exports = new Mime(require('./types/standard'), require('./types/other'));\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.KVError = void 0;\nclass KVError extends Error {\n    constructor(message, status = 500) {\n        super(message);\n        // see: typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n        this.name = KVError.name; // stack traces display correctly now\n        this.status = status;\n    }\n}\nexports.KVError = KVError;\nclass MethodNotAllowedError extends KVError {\n    constructor(message = `Not a valid request method`, status = 405) {\n        super(message, status);\n    }\n}\nexports.MethodNotAllowedError = MethodNotAllowedError;\nclass NotFoundError extends KVError {\n    constructor(message = `Not Found`, status = 404) {\n        super(message, status);\n    }\n}\nexports.NotFoundError = NotFoundError;\nclass InternalError extends KVError {\n    constructor(message = `Internal Error in KV Asset Handler`, status = 500) {\n        super(message, status);\n    }\n}\nexports.InternalError = InternalError;\n", "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InternalError = exports.NotFoundError = exports.MethodNotAllowedError = exports.serveSinglePageApp = exports.mapRequestToAsset = exports.getAssetFromKV = void 0;\nconst mime = require(\"mime\");\nconst types_1 = require(\"./types\");\nObject.defineProperty(exports, \"MethodNotAllowedError\", { enumerable: true, get: function () { return types_1.MethodNotAllowedError; } });\nObject.defineProperty(exports, \"NotFoundError\", { enumerable: true, get: function () { return types_1.NotFoundError; } });\nObject.defineProperty(exports, \"InternalError\", { enumerable: true, get: function () { return types_1.InternalError; } });\nconst defaultCacheControl = {\n    browserTTL: null,\n    edgeTTL: 2 * 60 * 60 * 24,\n    bypassCache: false, // do not bypass Cloudflare's cache\n};\nconst parseStringAsObject = (maybeString) => typeof maybeString === 'string' ? JSON.parse(maybeString) : maybeString;\nconst getAssetFromKVDefaultOptions = {\n    ASSET_NAMESPACE: typeof __STATIC_CONTENT !== 'undefined' ? __STATIC_CONTENT : undefined,\n    ASSET_MANIFEST: typeof __STATIC_CONTENT_MANIFEST !== 'undefined'\n        ? parseStringAsObject(__STATIC_CONTENT_MANIFEST)\n        : undefined,\n    cacheControl: defaultCacheControl,\n    defaultMimeType: 'text/plain',\n    defaultDocument: 'index.html',\n};\nfunction assignOptions(options) {\n    // Assign any missing options passed in to the default\n    // options.mapRequestToAsset is handled manually later\n    return Object.assign({}, getAssetFromKVDefaultOptions, options);\n}\n/**\n * maps the path of incoming request to the request pathKey to look up\n * in bucket and in cache\n * e.g.  for a path '/' returns '/index.html' which serves\n * the content of bucket/index.html\n * @param {Request} request incoming request\n */\nconst mapRequestToAsset = (request, options) => {\n    options = assignOptions(options);\n    const parsedUrl = new URL(request.url);\n    let pathname = parsedUrl.pathname;\n    if (pathname.endsWith('/')) {\n        // If path looks like a directory append options.defaultDocument\n        // e.g. If path is /about/ -> /about/index.html\n        pathname = pathname.concat(options.defaultDocument);\n    }\n    else if (!mime.getType(pathname)) {\n        // If path doesn't look like valid content\n        //  e.g. /about.me ->  /about.me/index.html\n        pathname = pathname.concat('/' + options.defaultDocument);\n    }\n    parsedUrl.pathname = pathname;\n    return new Request(parsedUrl.toString(), request);\n};\nexports.mapRequestToAsset = mapRequestToAsset;\n/**\n * maps the path of incoming request to /index.html if it evaluates to\n * any HTML file.\n * @param {Request} request incoming request\n */\nfunction serveSinglePageApp(request, options) {\n    options = assignOptions(options);\n    // First apply the default handler, which already has logic to detect\n    // paths that should map to HTML files.\n    request = mapRequestToAsset(request, options);\n    const parsedUrl = new URL(request.url);\n    // Detect if the default handler decided to map to\n    // a HTML file in some specific directory.\n    if (parsedUrl.pathname.endsWith('.html')) {\n        // If expected HTML file was missing, just return the root index.html (or options.defaultDocument)\n        return new Request(`${parsedUrl.origin}/${options.defaultDocument}`, request);\n    }\n    else {\n        // The default handler decided this is not an HTML page. It's probably\n        // an image, CSS, or JS file. Leave it as-is.\n        return request;\n    }\n}\nexports.serveSinglePageApp = serveSinglePageApp;\n/**\n * takes the path of the incoming request, gathers the appropriate content from KV, and returns\n * the response\n *\n * @param {FetchEvent} event the fetch event of the triggered request\n * @param {{mapRequestToAsset: (string: Request) => Request, cacheControl: {bypassCache:boolean, edgeTTL: number, browserTTL:number}, ASSET_NAMESPACE: any, ASSET_MANIFEST:any}} [options] configurable options\n * @param {CacheControl} [options.cacheControl] determine how to cache on Cloudflare and the browser\n * @param {typeof(options.mapRequestToAsset)} [options.mapRequestToAsset]  maps the path of incoming request to the request pathKey to look up\n * @param {Object | string} [options.ASSET_NAMESPACE] the binding to the namespace that script references\n * @param {any} [options.ASSET_MANIFEST] the map of the key to cache and store in KV\n * */\nconst getAssetFromKV = (event, options) => __awaiter(void 0, void 0, void 0, function* () {\n    options = assignOptions(options);\n    const request = event.request;\n    const ASSET_NAMESPACE = options.ASSET_NAMESPACE;\n    const ASSET_MANIFEST = parseStringAsObject(options.ASSET_MANIFEST);\n    if (typeof ASSET_NAMESPACE === 'undefined') {\n        throw new types_1.InternalError(`there is no KV namespace bound to the script`);\n    }\n    const rawPathKey = new URL(request.url).pathname.replace(/^\\/+/, ''); // strip any preceding /'s\n    let pathIsEncoded = false;\n    let requestKey;\n    // if options.mapRequestToAsset is explicitly passed in, always use it and assume user has own intentions\n    // otherwise handle request as normal, with default mapRequestToAsset below\n    if (options.mapRequestToAsset) {\n        requestKey = options.mapRequestToAsset(request);\n    }\n    else if (ASSET_MANIFEST[rawPathKey]) {\n        requestKey = request;\n    }\n    else if (ASSET_MANIFEST[decodeURIComponent(rawPathKey)]) {\n        pathIsEncoded = true;\n        requestKey = request;\n    }\n    else {\n        const mappedRequest = mapRequestToAsset(request);\n        const mappedRawPathKey = new URL(mappedRequest.url).pathname.replace(/^\\/+/, '');\n        if (ASSET_MANIFEST[decodeURIComponent(mappedRawPathKey)]) {\n            pathIsEncoded = true;\n            requestKey = mappedRequest;\n        }\n        else {\n            // use default mapRequestToAsset\n            requestKey = mapRequestToAsset(request, options);\n        }\n    }\n    const SUPPORTED_METHODS = ['GET', 'HEAD'];\n    if (!SUPPORTED_METHODS.includes(requestKey.method)) {\n        throw new types_1.MethodNotAllowedError(`${requestKey.method} is not a valid request method`);\n    }\n    const parsedUrl = new URL(requestKey.url);\n    const pathname = pathIsEncoded ? decodeURIComponent(parsedUrl.pathname) : parsedUrl.pathname; // decode percentage encoded path only when necessary\n    // pathKey is the file path to look up in the manifest\n    let pathKey = pathname.replace(/^\\/+/, ''); // remove prepended /\n    // @ts-ignore\n    const cache = caches.default;\n    let mimeType = mime.getType(pathKey) || options.defaultMimeType;\n    if (mimeType.startsWith('text') || mimeType === 'application/javascript') {\n        mimeType += '; charset=utf-8';\n    }\n    let shouldEdgeCache = false; // false if storing in KV by raw file path i.e. no hash\n    // check manifest for map from file path to hash\n    if (typeof ASSET_MANIFEST !== 'undefined') {\n        if (ASSET_MANIFEST[pathKey]) {\n            pathKey = ASSET_MANIFEST[pathKey];\n            // if path key is in asset manifest, we can assume it contains a content hash and can be cached\n            shouldEdgeCache = true;\n        }\n    }\n    // TODO this excludes search params from cache, investigate ideal behavior\n    let cacheKey = new Request(`${parsedUrl.origin}/${pathKey}`, request);\n    // if argument passed in for cacheControl is a function then\n    // evaluate that function. otherwise return the Object passed in\n    // or default Object\n    const evalCacheOpts = (() => {\n        switch (typeof options.cacheControl) {\n            case 'function':\n                return options.cacheControl(request);\n            case 'object':\n                return options.cacheControl;\n            default:\n                return defaultCacheControl;\n        }\n    })();\n    // formats the etag depending on the response context. if the entityId\n    // is invalid, returns an empty string (instead of null) to prevent the\n    // the potentially disastrous scenario where the value of the Etag resp\n    // header is \"null\". Could be modified in future to base64 encode etc\n    const formatETag = (entityId = pathKey, validatorType = 'strong') => {\n        if (!entityId) {\n            return '';\n        }\n        switch (validatorType) {\n            case 'weak':\n                if (!entityId.startsWith('W/')) {\n                    return `W/${entityId}`;\n                }\n                return entityId;\n            case 'strong':\n                if (entityId.startsWith(`W/\"`)) {\n                    entityId = entityId.replace('W/', '');\n                }\n                if (!entityId.endsWith(`\"`)) {\n                    entityId = `\"${entityId}\"`;\n                }\n                return entityId;\n            default:\n                return '';\n        }\n    };\n    options.cacheControl = Object.assign({}, defaultCacheControl, evalCacheOpts);\n    // override shouldEdgeCache if options say to bypassCache\n    if (options.cacheControl.bypassCache ||\n        options.cacheControl.edgeTTL === null ||\n        request.method == 'HEAD') {\n        shouldEdgeCache = false;\n    }\n    // only set max-age if explicitly passed in a number as an arg\n    const shouldSetBrowserCache = typeof options.cacheControl.browserTTL === 'number';\n    let response = null;\n    if (shouldEdgeCache) {\n        response = yield cache.match(cacheKey);\n    }\n    if (response) {\n        if (response.status > 300 && response.status < 400) {\n            if (response.body && 'cancel' in Object.getPrototypeOf(response.body)) {\n                response.body.cancel();\n                console.log('Body exists and environment supports readable streams. Body cancelled');\n            }\n            else {\n                console.log('Environment doesnt support readable streams');\n            }\n            response = new Response(null, response);\n        }\n        else {\n            // fixes #165\n            let opts = {\n                headers: new Headers(response.headers),\n                status: 0,\n                statusText: '',\n            };\n            opts.headers.set('cf-cache-status', 'HIT');\n            if (response.status) {\n                opts.status = response.status;\n                opts.statusText = response.statusText;\n            }\n            else if (opts.headers.has('Content-Range')) {\n                opts.status = 206;\n                opts.statusText = 'Partial Content';\n            }\n            else {\n                opts.status = 200;\n                opts.statusText = 'OK';\n            }\n            response = new Response(response.body, opts);\n        }\n    }\n    else {\n        const body = yield ASSET_NAMESPACE.get(pathKey, 'arrayBuffer');\n        if (body === null) {\n            throw new types_1.NotFoundError(`could not find ${pathKey} in your content namespace`);\n        }\n        response = new Response(body);\n        if (shouldEdgeCache) {\n            response.headers.set('Accept-Ranges', 'bytes');\n            response.headers.set('Content-Length', body.length);\n            // set etag before cache insertion\n            if (!response.headers.has('etag')) {\n                response.headers.set('etag', formatETag(pathKey, 'strong'));\n            }\n            // determine Cloudflare cache behavior\n            response.headers.set('Cache-Control', `max-age=${options.cacheControl.edgeTTL}`);\n            event.waitUntil(cache.put(cacheKey, response.clone()));\n            response.headers.set('CF-Cache-Status', 'MISS');\n        }\n    }\n    response.headers.set('Content-Type', mimeType);\n    if (response.status === 304) {\n        let etag = formatETag(response.headers.get('etag'), 'strong');\n        let ifNoneMatch = cacheKey.headers.get('if-none-match');\n        let proxyCacheStatus = response.headers.get('CF-Cache-Status');\n        if (etag) {\n            if (ifNoneMatch && ifNoneMatch === etag && proxyCacheStatus === 'MISS') {\n                response.headers.set('CF-Cache-Status', 'EXPIRED');\n            }\n            else {\n                response.headers.set('CF-Cache-Status', 'REVALIDATED');\n            }\n            response.headers.set('etag', formatETag(etag, 'weak'));\n        }\n    }\n    if (shouldSetBrowserCache) {\n        response.headers.set('Cache-Control', `max-age=${options.cacheControl.browserTTL}`);\n    }\n    else {\n        response.headers.delete('Cache-Control');\n    }\n    return response;\n});\nexports.getAssetFromKV = getAssetFromKV;\n", "import { K as BROWSER } from \"./chunks/utils.js\";\nimport { b as base, a as app_dir, c as assets, p as public_env, s as safe_public_env, o as override, r as reset, d as read_implementation, e as options, g as get_hooks, f as set_private_env, h as prerendering, i as set_public_env, j as set_safe_public_env, k as set_read_implementation } from \"./chunks/internal.js\";\nimport { H as HttpError, S as SvelteKitError, j as json, t as text, R as Redirect, A as ActionFailure } from \"./chunks/index3.js\";\nimport * as devalue from \"devalue\";\nimport { m as make_trackable, d as disable_search, a as decode_params, n as normalize_path, r as resolve, b as decode_pathname, v as validate_layout_server_exports, c as validate_layout_exports, e as validate_page_server_exports, f as validate_page_exports, g as validate_server_exports } from \"./chunks/exports.js\";\nimport { r as readable, w as writable } from \"./chunks/index2.js\";\nimport { parse, serialize } from \"cookie\";\nimport * as set_cookie_parser from \"set-cookie-parser\";\nconst SVELTE_KIT_ASSETS = \"/_svelte_kit_assets\";\nconst ENDPOINT_METHODS = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\", \"HEAD\"];\nconst PAGE_METHODS = [\"GET\", \"POST\", \"HEAD\"];\nfunction negotiate(accept, types) {\n  const parts = [];\n  accept.split(\",\").forEach((str, i) => {\n    const match = /([^/ \\t]+)\\/([^; \\t]+)[ \\t]*(?:;[ \\t]*q=([0-9.]+))?/.exec(str);\n    if (match) {\n      const [, type, subtype, q = \"1\"] = match;\n      parts.push({ type, subtype, q: +q, i });\n    }\n  });\n  parts.sort((a, b) => {\n    if (a.q !== b.q) {\n      return b.q - a.q;\n    }\n    if (a.subtype === \"*\" !== (b.subtype === \"*\")) {\n      return a.subtype === \"*\" ? 1 : -1;\n    }\n    if (a.type === \"*\" !== (b.type === \"*\")) {\n      return a.type === \"*\" ? 1 : -1;\n    }\n    return a.i - b.i;\n  });\n  let accepted;\n  let min_priority = Infinity;\n  for (const mimetype of types) {\n    const [type, subtype] = mimetype.split(\"/\");\n    const priority = parts.findIndex(\n      (part) => (part.type === type || part.type === \"*\") && (part.subtype === subtype || part.subtype === \"*\")\n    );\n    if (priority !== -1 && priority < min_priority) {\n      accepted = mimetype;\n      min_priority = priority;\n    }\n  }\n  return accepted;\n}\nfunction is_content_type(request, ...types) {\n  const type = request.headers.get(\"content-type\")?.split(\";\", 1)[0].trim() ?? \"\";\n  return types.includes(type.toLowerCase());\n}\nfunction is_form_content_type(request) {\n  return is_content_type(\n    request,\n    \"application/x-www-form-urlencoded\",\n    \"multipart/form-data\",\n    \"text/plain\"\n  );\n}\nfunction coalesce_to_error(err) {\n  return err instanceof Error || err && /** @type {any} */\n  err.name && /** @type {any} */\n  err.message ? (\n    /** @type {Error} */\n    err\n  ) : new Error(JSON.stringify(err));\n}\nfunction normalize_error(error) {\n  return (\n    /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */\n    error\n  );\n}\nfunction get_status(error) {\n  return error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\nfunction get_message(error) {\n  return error instanceof SvelteKitError ? error.text : \"Internal Error\";\n}\nconst escape_html_attr_dict = {\n  \"&\": \"&amp;\",\n  '\"': \"&quot;\"\n  // Svelte also escapes < because the escape function could be called inside a `noscript` there\n  // https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c\n  // However, that doesn't apply in SvelteKit\n};\nconst escape_html_dict = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\"\n};\nconst surrogates = (\n  // high surrogate without paired low surrogate\n  \"[\\\\ud800-\\\\udbff](?![\\\\udc00-\\\\udfff])|[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]|[\\\\udc00-\\\\udfff]\"\n);\nconst escape_html_attr_regex = new RegExp(\n  `[${Object.keys(escape_html_attr_dict).join(\"\")}]|` + surrogates,\n  \"g\"\n);\nconst escape_html_regex = new RegExp(\n  `[${Object.keys(escape_html_dict).join(\"\")}]|` + surrogates,\n  \"g\"\n);\nfunction escape_html(str, is_attr) {\n  const dict = is_attr ? escape_html_attr_dict : escape_html_dict;\n  const escaped_str = str.replace(is_attr ? escape_html_attr_regex : escape_html_regex, (match) => {\n    if (match.length === 2) {\n      return match;\n    }\n    return dict[match] ?? `&#${match.charCodeAt(0)};`;\n  });\n  return escaped_str;\n}\nfunction method_not_allowed(mod, method) {\n  return text(`${method} method not allowed`, {\n    status: 405,\n    headers: {\n      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405\n      // \"The server must generate an Allow header field in a 405 status code response\"\n      allow: allowed_methods(mod).join(\", \")\n    }\n  });\n}\nfunction allowed_methods(mod) {\n  const allowed = ENDPOINT_METHODS.filter((method) => method in mod);\n  if (\"GET\" in mod || \"HEAD\" in mod) allowed.push(\"HEAD\");\n  return allowed;\n}\nfunction static_error_page(options2, status, message) {\n  let page = options2.templates.error({ status, message: escape_html(message) });\n  return text(page, {\n    headers: { \"content-type\": \"text/html; charset=utf-8\" },\n    status\n  });\n}\nasync function handle_fatal_error(event, options2, error) {\n  error = error instanceof HttpError ? error : coalesce_to_error(error);\n  const status = get_status(error);\n  const body2 = await handle_error_and_jsonify(event, options2, error);\n  const type = negotiate(event.request.headers.get(\"accept\") || \"text/html\", [\n    \"application/json\",\n    \"text/html\"\n  ]);\n  if (event.isDataRequest || type === \"application/json\") {\n    return json(body2, {\n      status\n    });\n  }\n  return static_error_page(options2, status, body2.message);\n}\nasync function handle_error_and_jsonify(event, options2, error) {\n  if (error instanceof HttpError) {\n    return error.body;\n  }\n  const status = get_status(error);\n  const message = get_message(error);\n  return await options2.hooks.handleError({ error, event, status, message }) ?? { message };\n}\nfunction redirect_response(status, location) {\n  const response = new Response(void 0, {\n    status,\n    headers: { location }\n  });\n  return response;\n}\nfunction clarify_devalue_error(event, error) {\n  if (error.path) {\n    return `Data returned from \\`load\\` while rendering ${event.route.id} is not serializable: ${error.message} (data${error.path})`;\n  }\n  if (error.path === \"\") {\n    return `Data returned from \\`load\\` while rendering ${event.route.id} is not a plain object`;\n  }\n  return error.message;\n}\nfunction stringify_uses(node) {\n  const uses = [];\n  if (node.uses && node.uses.dependencies.size > 0) {\n    uses.push(`\"dependencies\":${JSON.stringify(Array.from(node.uses.dependencies))}`);\n  }\n  if (node.uses && node.uses.search_params.size > 0) {\n    uses.push(`\"search_params\":${JSON.stringify(Array.from(node.uses.search_params))}`);\n  }\n  if (node.uses && node.uses.params.size > 0) {\n    uses.push(`\"params\":${JSON.stringify(Array.from(node.uses.params))}`);\n  }\n  if (node.uses?.parent) uses.push('\"parent\":1');\n  if (node.uses?.route) uses.push('\"route\":1');\n  if (node.uses?.url) uses.push('\"url\":1');\n  return `\"uses\":{${uses.join(\",\")}}`;\n}\nasync function render_endpoint(event, mod, state) {\n  const method = (\n    /** @type {import('types').HttpMethod} */\n    event.request.method\n  );\n  let handler = mod[method] || mod.fallback;\n  if (method === \"HEAD\" && mod.GET && !mod.HEAD) {\n    handler = mod.GET;\n  }\n  if (!handler) {\n    return method_not_allowed(mod, method);\n  }\n  const prerender = mod.prerender ?? state.prerender_default;\n  if (prerender && (mod.POST || mod.PATCH || mod.PUT || mod.DELETE)) {\n    throw new Error(\"Cannot prerender endpoints that have mutative methods\");\n  }\n  if (state.prerendering && !prerender) {\n    if (state.depth > 0) {\n      throw new Error(`${event.route.id} is not prerenderable`);\n    } else {\n      return new Response(void 0, { status: 204 });\n    }\n  }\n  try {\n    let response = await handler(\n      /** @type {import('@sveltejs/kit').RequestEvent<Record<string, any>>} */\n      event\n    );\n    if (!(response instanceof Response)) {\n      throw new Error(\n        `Invalid response from route ${event.url.pathname}: handler should return a Response object`\n      );\n    }\n    if (state.prerendering) {\n      response = new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: new Headers(response.headers)\n      });\n      response.headers.set(\"x-sveltekit-prerender\", String(prerender));\n    }\n    return response;\n  } catch (e) {\n    if (e instanceof Redirect) {\n      return new Response(void 0, {\n        status: e.status,\n        headers: { location: e.location }\n      });\n    }\n    throw e;\n  }\n}\nfunction is_endpoint_request(event) {\n  const { method, headers: headers2 } = event.request;\n  if (ENDPOINT_METHODS.includes(method) && !PAGE_METHODS.includes(method)) {\n    return true;\n  }\n  if (method === \"POST\" && headers2.get(\"x-sveltekit-action\") === \"true\") return false;\n  const accept = event.request.headers.get(\"accept\") ?? \"*/*\";\n  return negotiate(accept, [\"*\", \"text/html\"]) !== \"text/html\";\n}\nfunction compact(arr) {\n  return arr.filter(\n    /** @returns {val is NonNullable<T>} */\n    (val) => val != null\n  );\n}\nconst DATA_SUFFIX = \"/__data.json\";\nconst HTML_DATA_SUFFIX = \".html__data.json\";\nfunction has_data_suffix(pathname) {\n  return pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\nfunction add_data_suffix(pathname) {\n  if (pathname.endsWith(\".html\")) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n  return pathname.replace(/\\/$/, \"\") + DATA_SUFFIX;\n}\nfunction strip_data_suffix(pathname) {\n  if (pathname.endsWith(HTML_DATA_SUFFIX)) {\n    return pathname.slice(0, -HTML_DATA_SUFFIX.length) + \".html\";\n  }\n  return pathname.slice(0, -DATA_SUFFIX.length);\n}\nconst ROUTE_PREFIX = `${base}/${app_dir}/route`;\nfunction has_resolution_prefix(pathname) {\n  return pathname === `${ROUTE_PREFIX}.js` || pathname.startsWith(`${ROUTE_PREFIX}/`);\n}\nfunction add_resolution_prefix(pathname) {\n  let normalized = pathname.slice(base.length);\n  if (normalized.endsWith(\"/\")) normalized = normalized.slice(0, -1);\n  return `${ROUTE_PREFIX}${normalized}.js`;\n}\nfunction strip_resolution_prefix(pathname) {\n  return base + (pathname.slice(ROUTE_PREFIX.length, -3) || \"/\");\n}\nfunction is_action_json_request(event) {\n  const accept = negotiate(event.request.headers.get(\"accept\") ?? \"*/*\", [\n    \"application/json\",\n    \"text/html\"\n  ]);\n  return accept === \"application/json\" && event.request.method === \"POST\";\n}\nasync function handle_action_json_request(event, options2, server) {\n  const actions = server?.actions;\n  if (!actions) {\n    const no_actions_error = new SvelteKitError(\n      405,\n      \"Method Not Allowed\",\n      `POST method not allowed. No form actions exist for ${\"this page\"}`\n    );\n    return action_json(\n      {\n        type: \"error\",\n        error: await handle_error_and_jsonify(event, options2, no_actions_error)\n      },\n      {\n        status: no_actions_error.status,\n        headers: {\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405\n          // \"The server must generate an Allow header field in a 405 status code response\"\n          allow: \"GET\"\n        }\n      }\n    );\n  }\n  check_named_default_separate(actions);\n  try {\n    const data = await call_action(event, actions);\n    if (false) ;\n    if (data instanceof ActionFailure) {\n      return action_json({\n        type: \"failure\",\n        status: data.status,\n        // @ts-expect-error we assign a string to what is supposed to be an object. That's ok\n        // because we don't use the object outside, and this way we have better code navigation\n        // through knowing where the related interface is used.\n        data: stringify_action_response(\n          data.data,\n          /** @type {string} */\n          event.route.id,\n          options2.hooks.transport\n        )\n      });\n    } else {\n      return action_json({\n        type: \"success\",\n        status: data ? 200 : 204,\n        // @ts-expect-error see comment above\n        data: stringify_action_response(\n          data,\n          /** @type {string} */\n          event.route.id,\n          options2.hooks.transport\n        )\n      });\n    }\n  } catch (e) {\n    const err = normalize_error(e);\n    if (err instanceof Redirect) {\n      return action_json_redirect(err);\n    }\n    return action_json(\n      {\n        type: \"error\",\n        error: await handle_error_and_jsonify(event, options2, check_incorrect_fail_use(err))\n      },\n      {\n        status: get_status(err)\n      }\n    );\n  }\n}\nfunction check_incorrect_fail_use(error) {\n  return error instanceof ActionFailure ? new Error('Cannot \"throw fail()\". Use \"return fail()\"') : error;\n}\nfunction action_json_redirect(redirect) {\n  return action_json({\n    type: \"redirect\",\n    status: redirect.status,\n    location: redirect.location\n  });\n}\nfunction action_json(data, init2) {\n  return json(data, init2);\n}\nfunction is_action_request(event) {\n  return event.request.method === \"POST\";\n}\nasync function handle_action_request(event, server) {\n  const actions = server?.actions;\n  if (!actions) {\n    event.setHeaders({\n      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405\n      // \"The server must generate an Allow header field in a 405 status code response\"\n      allow: \"GET\"\n    });\n    return {\n      type: \"error\",\n      error: new SvelteKitError(\n        405,\n        \"Method Not Allowed\",\n        `POST method not allowed. No form actions exist for ${\"this page\"}`\n      )\n    };\n  }\n  check_named_default_separate(actions);\n  try {\n    const data = await call_action(event, actions);\n    if (false) ;\n    if (data instanceof ActionFailure) {\n      return {\n        type: \"failure\",\n        status: data.status,\n        data: data.data\n      };\n    } else {\n      return {\n        type: \"success\",\n        status: 200,\n        // @ts-expect-error this will be removed upon serialization, so `undefined` is the same as omission\n        data\n      };\n    }\n  } catch (e) {\n    const err = normalize_error(e);\n    if (err instanceof Redirect) {\n      return {\n        type: \"redirect\",\n        status: err.status,\n        location: err.location\n      };\n    }\n    return {\n      type: \"error\",\n      error: check_incorrect_fail_use(err)\n    };\n  }\n}\nfunction check_named_default_separate(actions) {\n  if (actions.default && Object.keys(actions).length > 1) {\n    throw new Error(\n      \"When using named actions, the default action cannot be used. See the docs for more info: https://svelte.dev/docs/kit/form-actions#named-actions\"\n    );\n  }\n}\nasync function call_action(event, actions) {\n  const url = new URL(event.request.url);\n  let name = \"default\";\n  for (const param of url.searchParams) {\n    if (param[0].startsWith(\"/\")) {\n      name = param[0].slice(1);\n      if (name === \"default\") {\n        throw new Error('Cannot use reserved action name \"default\"');\n      }\n      break;\n    }\n  }\n  const action = actions[name];\n  if (!action) {\n    throw new SvelteKitError(404, \"Not Found\", `No action with name '${name}' found`);\n  }\n  if (!is_form_content_type(event.request)) {\n    throw new SvelteKitError(\n      415,\n      \"Unsupported Media Type\",\n      `Form actions expect form-encoded data \u2014 received ${event.request.headers.get(\n        \"content-type\"\n      )}`\n    );\n  }\n  return action(event);\n}\nfunction validate_action_return(data) {\n  if (data instanceof Redirect) {\n    throw new Error(\"Cannot `return redirect(...)` \u2014 use `redirect(...)` instead\");\n  }\n  if (data instanceof HttpError) {\n    throw new Error(\"Cannot `return error(...)` \u2014 use `error(...)` or `return fail(...)` instead\");\n  }\n}\nfunction uneval_action_response(data, route_id, transport) {\n  const replacer = (thing) => {\n    for (const key2 in transport) {\n      const encoded = transport[key2].encode(thing);\n      if (encoded) {\n        return `app.decode('${key2}', ${devalue.uneval(encoded, replacer)})`;\n      }\n    }\n  };\n  return try_serialize(data, (value) => devalue.uneval(value, replacer), route_id);\n}\nfunction stringify_action_response(data, route_id, transport) {\n  const encoders = Object.fromEntries(\n    Object.entries(transport).map(([key2, value]) => [key2, value.encode])\n  );\n  return try_serialize(data, (value) => devalue.stringify(value, encoders), route_id);\n}\nfunction try_serialize(data, fn, route_id) {\n  try {\n    return fn(data);\n  } catch (e) {\n    const error = (\n      /** @type {any} */\n      e\n    );\n    if (data instanceof Response) {\n      throw new Error(\n        `Data returned from action inside ${route_id} is not serializable. Form actions need to return plain objects or fail(). E.g. return { success: true } or return fail(400, { message: \"invalid\" });`\n      );\n    }\n    if (\"path\" in error) {\n      let message = `Data returned from action inside ${route_id} is not serializable: ${error.message}`;\n      if (error.path !== \"\") message += ` (data.${error.path})`;\n      throw new Error(message);\n    }\n    throw error;\n  }\n}\nconst INVALIDATED_PARAM = \"x-sveltekit-invalidated\";\nconst TRAILING_SLASH_PARAM = \"x-sveltekit-trailing-slash\";\nfunction b64_encode(buffer) {\n  if (globalThis.Buffer) {\n    return Buffer.from(buffer).toString(\"base64\");\n  }\n  const little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;\n  return btoa(\n    new TextDecoder(little_endian ? \"utf-16le\" : \"utf-16be\").decode(\n      new Uint16Array(new Uint8Array(buffer))\n    )\n  );\n}\nfunction get_relative_path(from, to) {\n  const from_parts = from.split(/[/\\\\]/);\n  const to_parts = to.split(/[/\\\\]/);\n  from_parts.pop();\n  while (from_parts[0] === to_parts[0]) {\n    from_parts.shift();\n    to_parts.shift();\n  }\n  let i = from_parts.length;\n  while (i--) from_parts[i] = \"..\";\n  return from_parts.concat(to_parts).join(\"/\");\n}\nasync function load_server_data({ event, state, node, parent }) {\n  if (!node?.server) return null;\n  let is_tracking = true;\n  const uses = {\n    dependencies: /* @__PURE__ */ new Set(),\n    params: /* @__PURE__ */ new Set(),\n    parent: false,\n    route: false,\n    url: false,\n    search_params: /* @__PURE__ */ new Set()\n  };\n  const url = make_trackable(\n    event.url,\n    () => {\n      if (is_tracking) {\n        uses.url = true;\n      }\n    },\n    (param) => {\n      if (is_tracking) {\n        uses.search_params.add(param);\n      }\n    }\n  );\n  if (state.prerendering) {\n    disable_search(url);\n  }\n  const result = await node.server.load?.call(null, {\n    ...event,\n    fetch: (info, init2) => {\n      new URL(info instanceof Request ? info.url : info, event.url);\n      return event.fetch(info, init2);\n    },\n    /** @param {string[]} deps */\n    depends: (...deps) => {\n      for (const dep of deps) {\n        const { href } = new URL(dep, event.url);\n        uses.dependencies.add(href);\n      }\n    },\n    params: new Proxy(event.params, {\n      get: (target, key2) => {\n        if (is_tracking) {\n          uses.params.add(key2);\n        }\n        return target[\n          /** @type {string} */\n          key2\n        ];\n      }\n    }),\n    parent: async () => {\n      if (is_tracking) {\n        uses.parent = true;\n      }\n      return parent();\n    },\n    route: new Proxy(event.route, {\n      get: (target, key2) => {\n        if (is_tracking) {\n          uses.route = true;\n        }\n        return target[\n          /** @type {'id'} */\n          key2\n        ];\n      }\n    }),\n    url,\n    untrack(fn) {\n      is_tracking = false;\n      try {\n        return fn();\n      } finally {\n        is_tracking = true;\n      }\n    }\n  });\n  return {\n    type: \"data\",\n    data: result ?? null,\n    uses,\n    slash: node.server.trailingSlash\n  };\n}\nasync function load_data({\n  event,\n  fetched,\n  node,\n  parent,\n  server_data_promise,\n  state,\n  resolve_opts,\n  csr\n}) {\n  const server_data_node = await server_data_promise;\n  if (!node?.universal?.load) {\n    return server_data_node?.data ?? null;\n  }\n  const result = await node.universal.load.call(null, {\n    url: event.url,\n    params: event.params,\n    data: server_data_node?.data ?? null,\n    route: event.route,\n    fetch: create_universal_fetch(event, state, fetched, csr, resolve_opts),\n    setHeaders: event.setHeaders,\n    depends: () => {\n    },\n    parent,\n    untrack: (fn) => fn()\n  });\n  return result ?? null;\n}\nfunction create_universal_fetch(event, state, fetched, csr, resolve_opts) {\n  const universal_fetch = async (input, init2) => {\n    const cloned_body = input instanceof Request && input.body ? input.clone().body : null;\n    const cloned_headers = input instanceof Request && [...input.headers].length ? new Headers(input.headers) : init2?.headers;\n    let response = await event.fetch(input, init2);\n    const url = new URL(input instanceof Request ? input.url : input, event.url);\n    const same_origin = url.origin === event.url.origin;\n    let dependency;\n    if (same_origin) {\n      if (state.prerendering) {\n        dependency = { response, body: null };\n        state.prerendering.dependencies.set(url.pathname, dependency);\n      }\n    } else {\n      const mode = input instanceof Request ? input.mode : init2?.mode ?? \"cors\";\n      if (mode === \"no-cors\") {\n        response = new Response(\"\", {\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers\n        });\n      } else {\n        const acao = response.headers.get(\"access-control-allow-origin\");\n        if (!acao || acao !== event.url.origin && acao !== \"*\") {\n          throw new Error(\n            `CORS error: ${acao ? \"Incorrect\" : \"No\"} 'Access-Control-Allow-Origin' header is present on the requested resource`\n          );\n        }\n      }\n    }\n    const proxy = new Proxy(response, {\n      get(response2, key2, _receiver) {\n        async function push_fetched(body2, is_b64) {\n          const status_number = Number(response2.status);\n          if (isNaN(status_number)) {\n            throw new Error(\n              `response.status is not a number. value: \"${response2.status}\" type: ${typeof response2.status}`\n            );\n          }\n          fetched.push({\n            url: same_origin ? url.href.slice(event.url.origin.length) : url.href,\n            method: event.request.method,\n            request_body: (\n              /** @type {string | ArrayBufferView | undefined} */\n              input instanceof Request && cloned_body ? await stream_to_string(cloned_body) : init2?.body\n            ),\n            request_headers: cloned_headers,\n            response_body: body2,\n            response: response2,\n            is_b64\n          });\n        }\n        if (key2 === \"arrayBuffer\") {\n          return async () => {\n            const buffer = await response2.arrayBuffer();\n            if (dependency) {\n              dependency.body = new Uint8Array(buffer);\n            }\n            if (buffer instanceof ArrayBuffer) {\n              await push_fetched(b64_encode(buffer), true);\n            }\n            return buffer;\n          };\n        }\n        async function text2() {\n          const body2 = await response2.text();\n          if (!body2 || typeof body2 === \"string\") {\n            await push_fetched(body2, false);\n          }\n          if (dependency) {\n            dependency.body = body2;\n          }\n          return body2;\n        }\n        if (key2 === \"text\") {\n          return text2;\n        }\n        if (key2 === \"json\") {\n          return async () => {\n            return JSON.parse(await text2());\n          };\n        }\n        return Reflect.get(response2, key2, response2);\n      }\n    });\n    if (csr) {\n      const get = response.headers.get;\n      response.headers.get = (key2) => {\n        const lower = key2.toLowerCase();\n        const value = get.call(response.headers, lower);\n        if (value && !lower.startsWith(\"x-sveltekit-\")) {\n          const included = resolve_opts.filterSerializedResponseHeaders(lower, value);\n          if (!included) {\n            throw new Error(\n              `Failed to get response header \"${lower}\" \u2014 it must be included by the \\`filterSerializedResponseHeaders\\` option: https://svelte.dev/docs/kit/hooks#Server-hooks-handle (at ${event.route.id})`\n            );\n          }\n        }\n        return value;\n      };\n    }\n    return proxy;\n  };\n  return (input, init2) => {\n    const response = universal_fetch(input, init2);\n    response.catch(() => {\n    });\n    return response;\n  };\n}\nasync function stream_to_string(stream) {\n  let result = \"\";\n  const reader = stream.getReader();\n  const decoder = new TextDecoder();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    result += decoder.decode(value);\n  }\n  return result;\n}\nfunction hash(...values) {\n  let hash2 = 5381;\n  for (const value of values) {\n    if (typeof value === \"string\") {\n      let i = value.length;\n      while (i) hash2 = hash2 * 33 ^ value.charCodeAt(--i);\n    } else if (ArrayBuffer.isView(value)) {\n      const buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n      let i = buffer.length;\n      while (i) hash2 = hash2 * 33 ^ buffer[--i];\n    } else {\n      throw new TypeError(\"value must be a string or TypedArray\");\n    }\n  }\n  return (hash2 >>> 0).toString(36);\n}\nconst replacements = {\n  \"<\": \"\\\\u003C\",\n  \"\\u2028\": \"\\\\u2028\",\n  \"\\u2029\": \"\\\\u2029\"\n};\nconst pattern = new RegExp(`[${Object.keys(replacements).join(\"\")}]`, \"g\");\nfunction serialize_data(fetched, filter, prerendering2 = false) {\n  const headers2 = {};\n  let cache_control = null;\n  let age = null;\n  let varyAny = false;\n  for (const [key2, value] of fetched.response.headers) {\n    if (filter(key2, value)) {\n      headers2[key2] = value;\n    }\n    if (key2 === \"cache-control\") cache_control = value;\n    else if (key2 === \"age\") age = value;\n    else if (key2 === \"vary\" && value.trim() === \"*\") varyAny = true;\n  }\n  const payload = {\n    status: fetched.response.status,\n    statusText: fetched.response.statusText,\n    headers: headers2,\n    body: fetched.response_body\n  };\n  const safe_payload = JSON.stringify(payload).replace(pattern, (match) => replacements[match]);\n  const attrs = [\n    'type=\"application/json\"',\n    \"data-sveltekit-fetched\",\n    `data-url=\"${escape_html(fetched.url, true)}\"`\n  ];\n  if (fetched.is_b64) {\n    attrs.push(\"data-b64\");\n  }\n  if (fetched.request_headers || fetched.request_body) {\n    const values = [];\n    if (fetched.request_headers) {\n      values.push([...new Headers(fetched.request_headers)].join(\",\"));\n    }\n    if (fetched.request_body) {\n      values.push(fetched.request_body);\n    }\n    attrs.push(`data-hash=\"${hash(...values)}\"`);\n  }\n  if (!prerendering2 && fetched.method === \"GET\" && cache_control && !varyAny) {\n    const match = /s-maxage=(\\d+)/g.exec(cache_control) ?? /max-age=(\\d+)/g.exec(cache_control);\n    if (match) {\n      const ttl = +match[1] - +(age ?? \"0\");\n      attrs.push(`data-ttl=\"${ttl}\"`);\n    }\n  }\n  return `<script ${attrs.join(\" \")}>${safe_payload}<\\/script>`;\n}\nconst s = JSON.stringify;\nconst encoder$2 = new TextEncoder();\nfunction sha256(data) {\n  if (!key[0]) precompute();\n  const out = init.slice(0);\n  const array2 = encode(data);\n  for (let i = 0; i < array2.length; i += 16) {\n    const w = array2.subarray(i, i + 16);\n    let tmp;\n    let a;\n    let b;\n    let out0 = out[0];\n    let out1 = out[1];\n    let out2 = out[2];\n    let out3 = out[3];\n    let out4 = out[4];\n    let out5 = out[5];\n    let out6 = out[6];\n    let out7 = out[7];\n    for (let i2 = 0; i2 < 64; i2++) {\n      if (i2 < 16) {\n        tmp = w[i2];\n      } else {\n        a = w[i2 + 1 & 15];\n        b = w[i2 + 14 & 15];\n        tmp = w[i2 & 15] = (a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i2 & 15] + w[i2 + 9 & 15] | 0;\n      }\n      tmp = tmp + out7 + (out4 >>> 6 ^ out4 >>> 11 ^ out4 >>> 25 ^ out4 << 26 ^ out4 << 21 ^ out4 << 7) + (out6 ^ out4 & (out5 ^ out6)) + key[i2];\n      out7 = out6;\n      out6 = out5;\n      out5 = out4;\n      out4 = out3 + tmp | 0;\n      out3 = out2;\n      out2 = out1;\n      out1 = out0;\n      out0 = tmp + (out1 & out2 ^ out3 & (out1 ^ out2)) + (out1 >>> 2 ^ out1 >>> 13 ^ out1 >>> 22 ^ out1 << 30 ^ out1 << 19 ^ out1 << 10) | 0;\n    }\n    out[0] = out[0] + out0 | 0;\n    out[1] = out[1] + out1 | 0;\n    out[2] = out[2] + out2 | 0;\n    out[3] = out[3] + out3 | 0;\n    out[4] = out[4] + out4 | 0;\n    out[5] = out[5] + out5 | 0;\n    out[6] = out[6] + out6 | 0;\n    out[7] = out[7] + out7 | 0;\n  }\n  const bytes = new Uint8Array(out.buffer);\n  reverse_endianness(bytes);\n  return base64(bytes);\n}\nconst init = new Uint32Array(8);\nconst key = new Uint32Array(64);\nfunction precompute() {\n  function frac(x) {\n    return (x - Math.floor(x)) * 4294967296;\n  }\n  let prime = 2;\n  for (let i = 0; i < 64; prime++) {\n    let is_prime = true;\n    for (let factor = 2; factor * factor <= prime; factor++) {\n      if (prime % factor === 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      if (i < 8) {\n        init[i] = frac(prime ** (1 / 2));\n      }\n      key[i] = frac(prime ** (1 / 3));\n      i++;\n    }\n  }\n}\nfunction reverse_endianness(bytes) {\n  for (let i = 0; i < bytes.length; i += 4) {\n    const a = bytes[i + 0];\n    const b = bytes[i + 1];\n    const c = bytes[i + 2];\n    const d = bytes[i + 3];\n    bytes[i + 0] = d;\n    bytes[i + 1] = c;\n    bytes[i + 2] = b;\n    bytes[i + 3] = a;\n  }\n}\nfunction encode(str) {\n  const encoded = encoder$2.encode(str);\n  const length = encoded.length * 8;\n  const size = 512 * Math.ceil((length + 65) / 512);\n  const bytes = new Uint8Array(size / 8);\n  bytes.set(encoded);\n  bytes[encoded.length] = 128;\n  reverse_endianness(bytes);\n  const words = new Uint32Array(bytes.buffer);\n  words[words.length - 2] = Math.floor(length / 4294967296);\n  words[words.length - 1] = length;\n  return words;\n}\nconst chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\nfunction base64(bytes) {\n  const l = bytes.length;\n  let result = \"\";\n  let i;\n  for (i = 2; i < l; i += 3) {\n    result += chars[bytes[i - 2] >> 2];\n    result += chars[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];\n    result += chars[(bytes[i - 1] & 15) << 2 | bytes[i] >> 6];\n    result += chars[bytes[i] & 63];\n  }\n  if (i === l + 1) {\n    result += chars[bytes[i - 2] >> 2];\n    result += chars[(bytes[i - 2] & 3) << 4];\n    result += \"==\";\n  }\n  if (i === l) {\n    result += chars[bytes[i - 2] >> 2];\n    result += chars[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];\n    result += chars[(bytes[i - 1] & 15) << 2];\n    result += \"=\";\n  }\n  return result;\n}\nconst array = new Uint8Array(16);\nfunction generate_nonce() {\n  crypto.getRandomValues(array);\n  return base64(array);\n}\nconst quoted = /* @__PURE__ */ new Set([\n  \"self\",\n  \"unsafe-eval\",\n  \"unsafe-hashes\",\n  \"unsafe-inline\",\n  \"none\",\n  \"strict-dynamic\",\n  \"report-sample\",\n  \"wasm-unsafe-eval\",\n  \"script\"\n]);\nconst crypto_pattern = /^(nonce|sha\\d\\d\\d)-/;\nclass BaseProvider {\n  /** @type {boolean} */\n  #use_hashes;\n  /** @type {boolean} */\n  #script_needs_csp;\n  /** @type {boolean} */\n  #script_src_needs_csp;\n  /** @type {boolean} */\n  #script_src_elem_needs_csp;\n  /** @type {boolean} */\n  #style_needs_csp;\n  /** @type {boolean} */\n  #style_src_needs_csp;\n  /** @type {boolean} */\n  #style_src_attr_needs_csp;\n  /** @type {boolean} */\n  #style_src_elem_needs_csp;\n  /** @type {import('types').CspDirectives} */\n  #directives;\n  /** @type {import('types').Csp.Source[]} */\n  #script_src;\n  /** @type {import('types').Csp.Source[]} */\n  #script_src_elem;\n  /** @type {import('types').Csp.Source[]} */\n  #style_src;\n  /** @type {import('types').Csp.Source[]} */\n  #style_src_attr;\n  /** @type {import('types').Csp.Source[]} */\n  #style_src_elem;\n  /** @type {string} */\n  #nonce;\n  /**\n   * @param {boolean} use_hashes\n   * @param {import('types').CspDirectives} directives\n   * @param {string} nonce\n   */\n  constructor(use_hashes, directives, nonce) {\n    this.#use_hashes = use_hashes;\n    this.#directives = directives;\n    const d = this.#directives;\n    this.#script_src = [];\n    this.#script_src_elem = [];\n    this.#style_src = [];\n    this.#style_src_attr = [];\n    this.#style_src_elem = [];\n    const effective_script_src = d[\"script-src\"] || d[\"default-src\"];\n    const script_src_elem = d[\"script-src-elem\"];\n    const effective_style_src = d[\"style-src\"] || d[\"default-src\"];\n    const style_src_attr = d[\"style-src-attr\"];\n    const style_src_elem = d[\"style-src-elem\"];\n    const needs_csp = (directive) => !!directive && !directive.some((value) => value === \"unsafe-inline\");\n    this.#script_src_needs_csp = needs_csp(effective_script_src);\n    this.#script_src_elem_needs_csp = needs_csp(script_src_elem);\n    this.#style_src_needs_csp = needs_csp(effective_style_src);\n    this.#style_src_attr_needs_csp = needs_csp(style_src_attr);\n    this.#style_src_elem_needs_csp = needs_csp(style_src_elem);\n    this.#script_needs_csp = this.#script_src_needs_csp || this.#script_src_elem_needs_csp;\n    this.#style_needs_csp = this.#style_src_needs_csp || this.#style_src_attr_needs_csp || this.#style_src_elem_needs_csp;\n    this.script_needs_nonce = this.#script_needs_csp && !this.#use_hashes;\n    this.style_needs_nonce = this.#style_needs_csp && !this.#use_hashes;\n    this.#nonce = nonce;\n  }\n  /** @param {string} content */\n  add_script(content) {\n    if (!this.#script_needs_csp) return;\n    const source = this.#use_hashes ? `sha256-${sha256(content)}` : `nonce-${this.#nonce}`;\n    if (this.#script_src_needs_csp) {\n      this.#script_src.push(source);\n    }\n    if (this.#script_src_elem_needs_csp) {\n      this.#script_src_elem.push(source);\n    }\n  }\n  /** @param {string} content */\n  add_style(content) {\n    if (!this.#style_needs_csp) return;\n    const source = this.#use_hashes ? `sha256-${sha256(content)}` : `nonce-${this.#nonce}`;\n    if (this.#style_src_needs_csp) {\n      this.#style_src.push(source);\n    }\n    if (this.#style_src_attr_needs_csp) {\n      this.#style_src_attr.push(source);\n    }\n    if (this.#style_src_elem_needs_csp) {\n      const sha256_empty_comment_hash = \"sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=\";\n      const d = this.#directives;\n      if (d[\"style-src-elem\"] && !d[\"style-src-elem\"].includes(sha256_empty_comment_hash) && !this.#style_src_elem.includes(sha256_empty_comment_hash)) {\n        this.#style_src_elem.push(sha256_empty_comment_hash);\n      }\n      if (source !== sha256_empty_comment_hash) {\n        this.#style_src_elem.push(source);\n      }\n    }\n  }\n  /**\n   * @param {boolean} [is_meta]\n   */\n  get_header(is_meta = false) {\n    const header = [];\n    const directives = { ...this.#directives };\n    if (this.#style_src.length > 0) {\n      directives[\"style-src\"] = [\n        ...directives[\"style-src\"] || directives[\"default-src\"] || [],\n        ...this.#style_src\n      ];\n    }\n    if (this.#style_src_attr.length > 0) {\n      directives[\"style-src-attr\"] = [\n        ...directives[\"style-src-attr\"] || [],\n        ...this.#style_src_attr\n      ];\n    }\n    if (this.#style_src_elem.length > 0) {\n      directives[\"style-src-elem\"] = [\n        ...directives[\"style-src-elem\"] || [],\n        ...this.#style_src_elem\n      ];\n    }\n    if (this.#script_src.length > 0) {\n      directives[\"script-src\"] = [\n        ...directives[\"script-src\"] || directives[\"default-src\"] || [],\n        ...this.#script_src\n      ];\n    }\n    if (this.#script_src_elem.length > 0) {\n      directives[\"script-src-elem\"] = [\n        ...directives[\"script-src-elem\"] || [],\n        ...this.#script_src_elem\n      ];\n    }\n    for (const key2 in directives) {\n      if (is_meta && (key2 === \"frame-ancestors\" || key2 === \"report-uri\" || key2 === \"sandbox\")) {\n        continue;\n      }\n      const value = (\n        /** @type {string[] | true} */\n        directives[key2]\n      );\n      if (!value) continue;\n      const directive = [key2];\n      if (Array.isArray(value)) {\n        value.forEach((value2) => {\n          if (quoted.has(value2) || crypto_pattern.test(value2)) {\n            directive.push(`'${value2}'`);\n          } else {\n            directive.push(value2);\n          }\n        });\n      }\n      header.push(directive.join(\" \"));\n    }\n    return header.join(\"; \");\n  }\n}\nclass CspProvider extends BaseProvider {\n  get_meta() {\n    const content = this.get_header(true);\n    if (!content) {\n      return;\n    }\n    return `<meta http-equiv=\"content-security-policy\" content=\"${escape_html(content, true)}\">`;\n  }\n}\nclass CspReportOnlyProvider extends BaseProvider {\n  /**\n   * @param {boolean} use_hashes\n   * @param {import('types').CspDirectives} directives\n   * @param {string} nonce\n   */\n  constructor(use_hashes, directives, nonce) {\n    super(use_hashes, directives, nonce);\n    if (Object.values(directives).filter((v) => !!v).length > 0) {\n      const has_report_to = directives[\"report-to\"]?.length ?? 0 > 0;\n      const has_report_uri = directives[\"report-uri\"]?.length ?? 0 > 0;\n      if (!has_report_to && !has_report_uri) {\n        throw Error(\n          \"`content-security-policy-report-only` must be specified with either the `report-to` or `report-uri` directives, or both\"\n        );\n      }\n    }\n  }\n}\nclass Csp {\n  /** @readonly */\n  nonce = generate_nonce();\n  /** @type {CspProvider} */\n  csp_provider;\n  /** @type {CspReportOnlyProvider} */\n  report_only_provider;\n  /**\n   * @param {import('./types.js').CspConfig} config\n   * @param {import('./types.js').CspOpts} opts\n   */\n  constructor({ mode, directives, reportOnly }, { prerender }) {\n    const use_hashes = mode === \"hash\" || mode === \"auto\" && prerender;\n    this.csp_provider = new CspProvider(use_hashes, directives, this.nonce);\n    this.report_only_provider = new CspReportOnlyProvider(use_hashes, reportOnly, this.nonce);\n  }\n  get script_needs_nonce() {\n    return this.csp_provider.script_needs_nonce || this.report_only_provider.script_needs_nonce;\n  }\n  get style_needs_nonce() {\n    return this.csp_provider.style_needs_nonce || this.report_only_provider.style_needs_nonce;\n  }\n  /** @param {string} content */\n  add_script(content) {\n    this.csp_provider.add_script(content);\n    this.report_only_provider.add_script(content);\n  }\n  /** @param {string} content */\n  add_style(content) {\n    this.csp_provider.add_style(content);\n    this.report_only_provider.add_style(content);\n  }\n}\nfunction defer() {\n  let fulfil;\n  let reject;\n  const promise = new Promise((f, r) => {\n    fulfil = f;\n    reject = r;\n  });\n  return { promise, fulfil, reject };\n}\nfunction create_async_iterator() {\n  const deferred = [defer()];\n  return {\n    iterator: {\n      [Symbol.asyncIterator]() {\n        return {\n          next: async () => {\n            const next = await deferred[0].promise;\n            if (!next.done) deferred.shift();\n            return next;\n          }\n        };\n      }\n    },\n    push: (value) => {\n      deferred[deferred.length - 1].fulfil({\n        value,\n        done: false\n      });\n      deferred.push(defer());\n    },\n    done: () => {\n      deferred[deferred.length - 1].fulfil({ done: true });\n    }\n  };\n}\nfunction exec(match, params, matchers) {\n  const result = {};\n  const values = match.slice(1);\n  const values_needing_match = values.filter((value) => value !== void 0);\n  let buffered = 0;\n  for (let i = 0; i < params.length; i += 1) {\n    const param = params[i];\n    let value = values[i - buffered];\n    if (param.chained && param.rest && buffered) {\n      value = values.slice(i - buffered, i + 1).filter((s2) => s2).join(\"/\");\n      buffered = 0;\n    }\n    if (value === void 0) {\n      if (param.rest) result[param.name] = \"\";\n      continue;\n    }\n    if (!param.matcher || matchers[param.matcher](value)) {\n      result[param.name] = value;\n      const next_param = params[i + 1];\n      const next_value = values[i + 1];\n      if (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n        buffered = 0;\n      }\n      if (!next_param && !next_value && Object.keys(result).length === values_needing_match.length) {\n        buffered = 0;\n      }\n      continue;\n    }\n    if (param.optional && param.chained) {\n      buffered++;\n      continue;\n    }\n    return;\n  }\n  if (buffered) return;\n  return result;\n}\nfunction generate_route_object(route, url, manifest) {\n  const { errors, layouts, leaf } = route;\n  const nodes = [...errors, ...layouts.map((l) => l?.[1]), leaf[1]].filter((n) => typeof n === \"number\").map((n) => `'${n}': () => ${create_client_import(manifest._.client.nodes?.[n], url)}`).join(\",\\n\t\t\");\n  return [\n    `{\n\tid: ${s(route.id)}`,\n    `errors: ${s(route.errors)}`,\n    `layouts: ${s(route.layouts)}`,\n    `leaf: ${s(route.leaf)}`,\n    `nodes: {\n\t\t${nodes}\n\t}\n}`\n  ].join(\",\\n\t\");\n}\nfunction create_client_import(import_path, url) {\n  if (!import_path) return \"Promise.resolve({})\";\n  if (import_path[0] === \"/\") {\n    return `import('${import_path}')`;\n  }\n  if (assets !== \"\") {\n    return `import('${assets}/${import_path}')`;\n  }\n  let path = get_relative_path(url.pathname, `${base}/${import_path}`);\n  if (path[0] !== \".\") path = `./${path}`;\n  return `import('${path}')`;\n}\nasync function resolve_route(resolved_path, url, manifest) {\n  if (!manifest._.client.routes) {\n    return text(\"Server-side route resolution disabled\", { status: 400 });\n  }\n  let route = null;\n  let params = {};\n  const matchers = await manifest._.matchers();\n  for (const candidate of manifest._.client.routes) {\n    const match = candidate.pattern.exec(resolved_path);\n    if (!match) continue;\n    const matched = exec(match, candidate.params, matchers);\n    if (matched) {\n      route = candidate;\n      params = decode_params(matched);\n      break;\n    }\n  }\n  return create_server_routing_response(route, params, url, manifest).response;\n}\nfunction create_server_routing_response(route, params, url, manifest) {\n  const headers2 = new Headers({\n    \"content-type\": \"application/javascript; charset=utf-8\"\n  });\n  if (route) {\n    const csr_route = generate_route_object(route, url, manifest);\n    const body2 = `export const route = ${csr_route}; export const params = ${JSON.stringify(params)};`;\n    return { response: text(body2, { headers: headers2 }), body: body2 };\n  } else {\n    return { response: text(\"\", { headers: headers2 }), body: \"\" };\n  }\n}\nconst updated = {\n  ...readable(false),\n  check: () => false\n};\nconst encoder$1 = new TextEncoder();\nasync function render_response({\n  branch,\n  fetched,\n  options: options2,\n  manifest,\n  state,\n  page_config,\n  status,\n  error = null,\n  event,\n  resolve_opts,\n  action_result\n}) {\n  if (state.prerendering) {\n    if (options2.csp.mode === \"nonce\") {\n      throw new Error('Cannot use prerendering if config.kit.csp.mode === \"nonce\"');\n    }\n    if (options2.app_template_contains_nonce) {\n      throw new Error(\"Cannot use prerendering if page template contains %sveltekit.nonce%\");\n    }\n  }\n  const { client } = manifest._;\n  const modulepreloads = new Set(client.imports);\n  const stylesheets = new Set(client.stylesheets);\n  const fonts = new Set(client.fonts);\n  const link_header_preloads = /* @__PURE__ */ new Set();\n  const inline_styles = /* @__PURE__ */ new Map();\n  let rendered;\n  const form_value = action_result?.type === \"success\" || action_result?.type === \"failure\" ? action_result.data ?? null : null;\n  let base$1 = base;\n  let assets$1 = assets;\n  let base_expression = s(base);\n  {\n    if (!state.prerendering?.fallback) {\n      const segments = event.url.pathname.slice(base.length).split(\"/\").slice(2);\n      base$1 = segments.map(() => \"..\").join(\"/\") || \".\";\n      base_expression = `new URL(${s(base$1)}, location).pathname.slice(0, -1)`;\n      if (!assets || assets[0] === \"/\" && assets !== SVELTE_KIT_ASSETS) {\n        assets$1 = base$1;\n      }\n    } else if (options2.hash_routing) {\n      base_expression = \"new URL('.', location).pathname.slice(0, -1)\";\n    }\n  }\n  if (page_config.ssr) {\n    const props = {\n      stores: {\n        page: writable(null),\n        navigating: writable(null),\n        updated\n      },\n      constructors: await Promise.all(branch.map(({ node }) => node.component())),\n      form: form_value\n    };\n    let data2 = {};\n    for (let i = 0; i < branch.length; i += 1) {\n      data2 = { ...data2, ...branch[i].data };\n      props[`data_${i}`] = data2;\n    }\n    props.page = {\n      error,\n      params: (\n        /** @type {Record<string, any>} */\n        event.params\n      ),\n      route: event.route,\n      status,\n      url: event.url,\n      data: data2,\n      form: form_value,\n      state: {}\n    };\n    override({ base: base$1, assets: assets$1 });\n    const render_opts = {\n      context: /* @__PURE__ */ new Map([\n        [\n          \"__request__\",\n          {\n            page: props.page\n          }\n        ]\n      ])\n    };\n    {\n      try {\n        rendered = options2.root.render(props, render_opts);\n      } finally {\n        reset();\n      }\n    }\n    for (const { node } of branch) {\n      for (const url of node.imports) modulepreloads.add(url);\n      for (const url of node.stylesheets) stylesheets.add(url);\n      for (const url of node.fonts) fonts.add(url);\n      if (node.inline_styles && !client.inline) {\n        Object.entries(await node.inline_styles()).forEach(([k, v]) => inline_styles.set(k, v));\n      }\n    }\n  } else {\n    rendered = { head: \"\", html: \"\", css: { code: \"\", map: null } };\n  }\n  let head = \"\";\n  let body2 = rendered.html;\n  const csp = new Csp(options2.csp, {\n    prerender: !!state.prerendering\n  });\n  const prefixed = (path) => {\n    if (path.startsWith(\"/\")) {\n      return base + path;\n    }\n    return `${assets$1}/${path}`;\n  };\n  const style = client.inline ? client.inline?.style : Array.from(inline_styles.values()).join(\"\\n\");\n  if (style) {\n    const attributes = [];\n    if (csp.style_needs_nonce) attributes.push(` nonce=\"${csp.nonce}\"`);\n    csp.add_style(style);\n    head += `\n\t<style${attributes.join(\"\")}>${style}</style>`;\n  }\n  for (const dep of stylesheets) {\n    const path = prefixed(dep);\n    const attributes = ['rel=\"stylesheet\"'];\n    if (inline_styles.has(dep)) {\n      attributes.push(\"disabled\", 'media=\"(max-width: 0)\"');\n    } else {\n      if (resolve_opts.preload({ type: \"css\", path })) {\n        const preload_atts = ['rel=\"preload\"', 'as=\"style\"'];\n        link_header_preloads.add(`<${encodeURI(path)}>; ${preload_atts.join(\";\")}; nopush`);\n      }\n    }\n    head += `\n\t\t<link href=\"${path}\" ${attributes.join(\" \")}>`;\n  }\n  for (const dep of fonts) {\n    const path = prefixed(dep);\n    if (resolve_opts.preload({ type: \"font\", path })) {\n      const ext = dep.slice(dep.lastIndexOf(\".\") + 1);\n      const attributes = [\n        'rel=\"preload\"',\n        'as=\"font\"',\n        `type=\"font/${ext}\"`,\n        `href=\"${path}\"`,\n        \"crossorigin\"\n      ];\n      head += `\n\t\t<link ${attributes.join(\" \")}>`;\n    }\n  }\n  const global = `__sveltekit_${options2.version_hash}`;\n  const { data, chunks } = get_data(\n    event,\n    options2,\n    branch.map((b) => b.server_data),\n    csp,\n    global\n  );\n  if (page_config.ssr && page_config.csr) {\n    body2 += `\n\t\t\t${fetched.map(\n      (item) => serialize_data(item, resolve_opts.filterSerializedResponseHeaders, !!state.prerendering)\n    ).join(\"\\n\t\t\t\")}`;\n  }\n  if (page_config.csr) {\n    const route = manifest._.client.routes?.find((r) => r.id === event.route.id) ?? null;\n    if (client.uses_env_dynamic_public && state.prerendering) {\n      modulepreloads.add(`${app_dir}/env.js`);\n    }\n    if (!client.inline) {\n      const included_modulepreloads = Array.from(modulepreloads, (dep) => prefixed(dep)).filter(\n        (path) => resolve_opts.preload({ type: \"js\", path })\n      );\n      for (const path of included_modulepreloads) {\n        link_header_preloads.add(`<${encodeURI(path)}>; rel=\"modulepreload\"; nopush`);\n        if (options2.preload_strategy !== \"modulepreload\") {\n          head += `\n\t\t<link rel=\"preload\" as=\"script\" crossorigin=\"anonymous\" href=\"${path}\">`;\n        } else if (state.prerendering) {\n          head += `\n\t\t<link rel=\"modulepreload\" href=\"${path}\">`;\n        }\n      }\n    }\n    if (manifest._.client.routes && state.prerendering && !state.prerendering.fallback) {\n      const pathname = add_resolution_prefix(event.url.pathname);\n      state.prerendering.dependencies.set(\n        pathname,\n        create_server_routing_response(route, event.params, new URL(pathname, event.url), manifest)\n      );\n    }\n    const blocks = [];\n    const load_env_eagerly = client.uses_env_dynamic_public && state.prerendering;\n    const properties = [`base: ${base_expression}`];\n    if (assets) {\n      properties.push(`assets: ${s(assets)}`);\n    }\n    if (client.uses_env_dynamic_public) {\n      properties.push(`env: ${load_env_eagerly ? \"null\" : s(public_env)}`);\n    }\n    if (chunks) {\n      blocks.push(\"const deferred = new Map();\");\n      properties.push(`defer: (id) => new Promise((fulfil, reject) => {\n\t\t\t\t\t\t\tdeferred.set(id, { fulfil, reject });\n\t\t\t\t\t\t})`);\n      properties.push(`resolve: ({ id, data, error }) => {\n\t\t\t\t\t\t\tconst try_to_resolve = () => {\n\t\t\t\t\t\t\t\tif (!deferred.has(id)) {\n\t\t\t\t\t\t\t\t\tsetTimeout(try_to_resolve, 0);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst { fulfil, reject } = deferred.get(id);\n\t\t\t\t\t\t\t\tdeferred.delete(id);\n\t\t\t\t\t\t\t\tif (error) reject(error);\n\t\t\t\t\t\t\t\telse fulfil(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry_to_resolve();\n\t\t\t\t\t\t}`);\n    }\n    blocks.push(`${global} = {\n\t\t\t\t\t\t${properties.join(\",\\n\t\t\t\t\t\t\")}\n\t\t\t\t\t};`);\n    const args = [\"element\"];\n    blocks.push(\"const element = document.currentScript.parentElement;\");\n    if (page_config.ssr) {\n      const serialized = { form: \"null\", error: \"null\" };\n      if (form_value) {\n        serialized.form = uneval_action_response(\n          form_value,\n          /** @type {string} */\n          event.route.id,\n          options2.hooks.transport\n        );\n      }\n      if (error) {\n        serialized.error = devalue.uneval(error);\n      }\n      const hydrate = [\n        `node_ids: [${branch.map(({ node }) => node.index).join(\", \")}]`,\n        `data: ${data}`,\n        `form: ${serialized.form}`,\n        `error: ${serialized.error}`\n      ];\n      if (status !== 200) {\n        hydrate.push(`status: ${status}`);\n      }\n      if (manifest._.client.routes) {\n        if (route) {\n          const stringified = generate_route_object(route, event.url, manifest).replaceAll(\n            \"\\n\",\n            \"\\n\t\t\t\t\t\t\t\"\n          );\n          hydrate.push(`params: ${devalue.uneval(event.params)}`, `server_route: ${stringified}`);\n        }\n      } else if (options2.embedded) {\n        hydrate.push(`params: ${devalue.uneval(event.params)}`, `route: ${s(event.route)}`);\n      }\n      const indent = \"\t\".repeat(load_env_eagerly ? 7 : 6);\n      args.push(`{\n${indent}\t${hydrate.join(`,\n${indent}\t`)}\n${indent}}`);\n    }\n    const boot = client.inline ? `${client.inline.script}\n\n\t\t\t\t\t__sveltekit_${options2.version_hash}.app.start(${args.join(\", \")});` : client.app ? `Promise.all([\n\t\t\t\t\t\timport(${s(prefixed(client.start))}),\n\t\t\t\t\t\timport(${s(prefixed(client.app))})\n\t\t\t\t\t]).then(([kit, app]) => {\n\t\t\t\t\t\tkit.start(app, ${args.join(\", \")});\n\t\t\t\t\t});` : `import(${s(prefixed(client.start))}).then((app) => {\n\t\t\t\t\t\tapp.start(${args.join(\", \")})\n\t\t\t\t\t});`;\n    if (load_env_eagerly) {\n      blocks.push(`import(${s(`${base$1}/${app_dir}/env.js`)}).then(({ env }) => {\n\t\t\t\t\t\t${global}.env = env;\n\n\t\t\t\t\t\t${boot.replace(/\\n/g, \"\\n\t\")}\n\t\t\t\t\t});`);\n    } else {\n      blocks.push(boot);\n    }\n    if (options2.service_worker) {\n      const opts = \"\";\n      blocks.push(`if ('serviceWorker' in navigator) {\n\t\t\t\t\t\taddEventListener('load', function () {\n\t\t\t\t\t\t\tnavigator.serviceWorker.register('${prefixed(\"service-worker.js\")}'${opts});\n\t\t\t\t\t\t});\n\t\t\t\t\t}`);\n    }\n    const init_app = `\n\t\t\t\t{\n\t\t\t\t\t${blocks.join(\"\\n\\n\t\t\t\t\t\")}\n\t\t\t\t}\n\t\t\t`;\n    csp.add_script(init_app);\n    body2 += `\n\t\t\t<script${csp.script_needs_nonce ? ` nonce=\"${csp.nonce}\"` : \"\"}>${init_app}<\\/script>\n\t\t`;\n  }\n  const headers2 = new Headers({\n    \"x-sveltekit-page\": \"true\",\n    \"content-type\": \"text/html\"\n  });\n  if (state.prerendering) {\n    const http_equiv = [];\n    const csp_headers = csp.csp_provider.get_meta();\n    if (csp_headers) {\n      http_equiv.push(csp_headers);\n    }\n    if (state.prerendering.cache) {\n      http_equiv.push(`<meta http-equiv=\"cache-control\" content=\"${state.prerendering.cache}\">`);\n    }\n    if (http_equiv.length > 0) {\n      head = http_equiv.join(\"\\n\") + head;\n    }\n  } else {\n    const csp_header = csp.csp_provider.get_header();\n    if (csp_header) {\n      headers2.set(\"content-security-policy\", csp_header);\n    }\n    const report_only_header = csp.report_only_provider.get_header();\n    if (report_only_header) {\n      headers2.set(\"content-security-policy-report-only\", report_only_header);\n    }\n    if (link_header_preloads.size) {\n      headers2.set(\"link\", Array.from(link_header_preloads).join(\", \"));\n    }\n  }\n  head += rendered.head;\n  const html = options2.templates.app({\n    head,\n    body: body2,\n    assets: assets$1,\n    nonce: (\n      /** @type {string} */\n      csp.nonce\n    ),\n    env: safe_public_env\n  });\n  const transformed = await resolve_opts.transformPageChunk({\n    html,\n    done: true\n  }) || \"\";\n  if (!chunks) {\n    headers2.set(\"etag\", `\"${hash(transformed)}\"`);\n  }\n  return !chunks ? text(transformed, {\n    status,\n    headers: headers2\n  }) : new Response(\n    new ReadableStream({\n      async start(controller) {\n        controller.enqueue(encoder$1.encode(transformed + \"\\n\"));\n        for await (const chunk of chunks) {\n          controller.enqueue(encoder$1.encode(chunk));\n        }\n        controller.close();\n      },\n      type: \"bytes\"\n    }),\n    {\n      headers: headers2\n    }\n  );\n}\nfunction get_data(event, options2, nodes, csp, global) {\n  let promise_id = 1;\n  let count = 0;\n  const { iterator, push, done } = create_async_iterator();\n  function replacer(thing) {\n    if (typeof thing?.then === \"function\") {\n      const id = promise_id++;\n      count += 1;\n      thing.then(\n        /** @param {any} data */\n        (data) => ({ data })\n      ).catch(\n        /** @param {any} error */\n        async (error) => ({\n          error: await handle_error_and_jsonify(event, options2, error)\n        })\n      ).then(\n        /**\n         * @param {{data: any; error: any}} result\n         */\n        async ({ data, error }) => {\n          count -= 1;\n          let str;\n          try {\n            str = devalue.uneval({ id, data, error }, replacer);\n          } catch {\n            error = await handle_error_and_jsonify(\n              event,\n              options2,\n              new Error(`Failed to serialize promise while rendering ${event.route.id}`)\n            );\n            data = void 0;\n            str = devalue.uneval({ id, data, error }, replacer);\n          }\n          const nonce = csp.script_needs_nonce ? ` nonce=\"${csp.nonce}\"` : \"\";\n          push(`<script${nonce}>${global}.resolve(${str})<\\/script>\n`);\n          if (count === 0) done();\n        }\n      );\n      return `${global}.defer(${id})`;\n    } else {\n      for (const key2 in options2.hooks.transport) {\n        const encoded = options2.hooks.transport[key2].encode(thing);\n        if (encoded) {\n          return `app.decode('${key2}', ${devalue.uneval(encoded, replacer)})`;\n        }\n      }\n    }\n  }\n  try {\n    const strings = nodes.map((node) => {\n      if (!node) return \"null\";\n      return `{\"type\":\"data\",\"data\":${devalue.uneval(node.data, replacer)},${stringify_uses(node)}${node.slash ? `,\"slash\":${JSON.stringify(node.slash)}` : \"\"}}`;\n    });\n    return {\n      data: `[${strings.join(\",\")}]`,\n      chunks: count > 0 ? iterator : null\n    };\n  } catch (e) {\n    throw new Error(clarify_devalue_error(\n      event,\n      /** @type {any} */\n      e\n    ));\n  }\n}\nfunction get_option(nodes, option) {\n  return nodes.reduce(\n    (value, node) => {\n      return (\n        /** @type {Value} TypeScript's too dumb to understand this */\n        node?.universal?.[option] ?? node?.server?.[option] ?? value\n      );\n    },\n    /** @type {Value | undefined} */\n    void 0\n  );\n}\nasync function respond_with_error({\n  event,\n  options: options2,\n  manifest,\n  state,\n  status,\n  error,\n  resolve_opts\n}) {\n  if (event.request.headers.get(\"x-sveltekit-error\")) {\n    return static_error_page(\n      options2,\n      status,\n      /** @type {Error} */\n      error.message\n    );\n  }\n  const fetched = [];\n  try {\n    const branch = [];\n    const default_layout = await manifest._.nodes[0]();\n    const ssr = get_option([default_layout], \"ssr\") ?? true;\n    const csr = get_option([default_layout], \"csr\") ?? true;\n    if (ssr) {\n      state.error = true;\n      const server_data_promise = load_server_data({\n        event,\n        state,\n        node: default_layout,\n        // eslint-disable-next-line @typescript-eslint/require-await\n        parent: async () => ({})\n      });\n      const server_data = await server_data_promise;\n      const data = await load_data({\n        event,\n        fetched,\n        node: default_layout,\n        // eslint-disable-next-line @typescript-eslint/require-await\n        parent: async () => ({}),\n        resolve_opts,\n        server_data_promise,\n        state,\n        csr\n      });\n      branch.push(\n        {\n          node: default_layout,\n          server_data,\n          data\n        },\n        {\n          node: await manifest._.nodes[1](),\n          // 1 is always the root error\n          data: null,\n          server_data: null\n        }\n      );\n    }\n    return await render_response({\n      options: options2,\n      manifest,\n      state,\n      page_config: {\n        ssr,\n        csr\n      },\n      status,\n      error: await handle_error_and_jsonify(event, options2, error),\n      branch,\n      fetched,\n      event,\n      resolve_opts\n    });\n  } catch (e) {\n    if (e instanceof Redirect) {\n      return redirect_response(e.status, e.location);\n    }\n    return static_error_page(\n      options2,\n      get_status(e),\n      (await handle_error_and_jsonify(event, options2, e)).message\n    );\n  }\n}\nfunction once(fn) {\n  let done = false;\n  let result;\n  return () => {\n    if (done) return result;\n    done = true;\n    return result = fn();\n  };\n}\nconst encoder = new TextEncoder();\nasync function render_data(event, route, options2, manifest, state, invalidated_data_nodes, trailing_slash) {\n  if (!route.page) {\n    return new Response(void 0, {\n      status: 404\n    });\n  }\n  try {\n    const node_ids = [...route.page.layouts, route.page.leaf];\n    const invalidated = invalidated_data_nodes ?? node_ids.map(() => true);\n    let aborted = false;\n    const url = new URL(event.url);\n    url.pathname = normalize_path(url.pathname, trailing_slash);\n    const new_event = { ...event, url };\n    const functions = node_ids.map((n, i) => {\n      return once(async () => {\n        try {\n          if (aborted) {\n            return (\n              /** @type {import('types').ServerDataSkippedNode} */\n              {\n                type: \"skip\"\n              }\n            );\n          }\n          const node = n == void 0 ? n : await manifest._.nodes[n]();\n          return load_server_data({\n            event: new_event,\n            state,\n            node,\n            parent: async () => {\n              const data2 = {};\n              for (let j = 0; j < i; j += 1) {\n                const parent = (\n                  /** @type {import('types').ServerDataNode | null} */\n                  await functions[j]()\n                );\n                if (parent) {\n                  Object.assign(data2, parent.data);\n                }\n              }\n              return data2;\n            }\n          });\n        } catch (e) {\n          aborted = true;\n          throw e;\n        }\n      });\n    });\n    const promises = functions.map(async (fn, i) => {\n      if (!invalidated[i]) {\n        return (\n          /** @type {import('types').ServerDataSkippedNode} */\n          {\n            type: \"skip\"\n          }\n        );\n      }\n      return fn();\n    });\n    let length = promises.length;\n    const nodes = await Promise.all(\n      promises.map(\n        (p, i) => p.catch(async (error) => {\n          if (error instanceof Redirect) {\n            throw error;\n          }\n          length = Math.min(length, i + 1);\n          return (\n            /** @type {import('types').ServerErrorNode} */\n            {\n              type: \"error\",\n              error: await handle_error_and_jsonify(event, options2, error),\n              status: error instanceof HttpError || error instanceof SvelteKitError ? error.status : void 0\n            }\n          );\n        })\n      )\n    );\n    const { data, chunks } = get_data_json(event, options2, nodes);\n    if (!chunks) {\n      return json_response(data);\n    }\n    return new Response(\n      new ReadableStream({\n        async start(controller) {\n          controller.enqueue(encoder.encode(data));\n          for await (const chunk of chunks) {\n            controller.enqueue(encoder.encode(chunk));\n          }\n          controller.close();\n        },\n        type: \"bytes\"\n      }),\n      {\n        headers: {\n          // we use a proprietary content type to prevent buffering.\n          // the `text` prefix makes it inspectable\n          \"content-type\": \"text/sveltekit-data\",\n          \"cache-control\": \"private, no-store\"\n        }\n      }\n    );\n  } catch (e) {\n    const error = normalize_error(e);\n    if (error instanceof Redirect) {\n      return redirect_json_response(error);\n    } else {\n      return json_response(await handle_error_and_jsonify(event, options2, error), 500);\n    }\n  }\n}\nfunction json_response(json2, status = 200) {\n  return text(typeof json2 === \"string\" ? json2 : JSON.stringify(json2), {\n    status,\n    headers: {\n      \"content-type\": \"application/json\",\n      \"cache-control\": \"private, no-store\"\n    }\n  });\n}\nfunction redirect_json_response(redirect) {\n  return json_response({\n    type: \"redirect\",\n    location: redirect.location\n  });\n}\nfunction get_data_json(event, options2, nodes) {\n  let promise_id = 1;\n  let count = 0;\n  const { iterator, push, done } = create_async_iterator();\n  const reducers = {\n    ...Object.fromEntries(\n      Object.entries(options2.hooks.transport).map(([key2, value]) => [key2, value.encode])\n    ),\n    /** @param {any} thing */\n    Promise: (thing) => {\n      if (typeof thing?.then === \"function\") {\n        const id = promise_id++;\n        count += 1;\n        let key2 = \"data\";\n        thing.catch(\n          /** @param {any} e */\n          async (e) => {\n            key2 = \"error\";\n            return handle_error_and_jsonify(\n              event,\n              options2,\n              /** @type {any} */\n              e\n            );\n          }\n        ).then(\n          /** @param {any} value */\n          async (value) => {\n            let str;\n            try {\n              str = devalue.stringify(value, reducers);\n            } catch {\n              const error = await handle_error_and_jsonify(\n                event,\n                options2,\n                new Error(`Failed to serialize promise while rendering ${event.route.id}`)\n              );\n              key2 = \"error\";\n              str = devalue.stringify(error, reducers);\n            }\n            count -= 1;\n            push(`{\"type\":\"chunk\",\"id\":${id},\"${key2}\":${str}}\n`);\n            if (count === 0) done();\n          }\n        );\n        return id;\n      }\n    }\n  };\n  try {\n    const strings = nodes.map((node) => {\n      if (!node) return \"null\";\n      if (node.type === \"error\" || node.type === \"skip\") {\n        return JSON.stringify(node);\n      }\n      return `{\"type\":\"data\",\"data\":${devalue.stringify(node.data, reducers)},${stringify_uses(\n        node\n      )}${node.slash ? `,\"slash\":${JSON.stringify(node.slash)}` : \"\"}}`;\n    });\n    return {\n      data: `{\"type\":\"data\",\"nodes\":[${strings.join(\",\")}]}\n`,\n      chunks: count > 0 ? iterator : null\n    };\n  } catch (e) {\n    throw new Error(clarify_devalue_error(\n      event,\n      /** @type {any} */\n      e\n    ));\n  }\n}\nfunction load_page_nodes(page, manifest) {\n  return Promise.all([\n    // we use == here rather than === because [undefined] serializes as \"[null]\"\n    ...page.layouts.map((n) => n == void 0 ? n : manifest._.nodes[n]()),\n    manifest._.nodes[page.leaf]()\n  ]);\n}\nconst MAX_DEPTH = 10;\nasync function render_page(event, page, options2, manifest, state, resolve_opts) {\n  if (state.depth > MAX_DEPTH) {\n    return text(`Not found: ${event.url.pathname}`, {\n      status: 404\n      // TODO in some cases this should be 500. not sure how to differentiate\n    });\n  }\n  if (is_action_json_request(event)) {\n    const node = await manifest._.nodes[page.leaf]();\n    return handle_action_json_request(event, options2, node?.server);\n  }\n  try {\n    const nodes = await load_page_nodes(page, manifest);\n    const leaf_node = (\n      /** @type {import('types').SSRNode} */\n      nodes.at(-1)\n    );\n    let status = 200;\n    let action_result = void 0;\n    if (is_action_request(event)) {\n      action_result = await handle_action_request(event, leaf_node.server);\n      if (action_result?.type === \"redirect\") {\n        return redirect_response(action_result.status, action_result.location);\n      }\n      if (action_result?.type === \"error\") {\n        status = get_status(action_result.error);\n      }\n      if (action_result?.type === \"failure\") {\n        status = action_result.status;\n      }\n    }\n    const should_prerender_data = nodes.some(\n      // prerender in case of trailingSlash because the client retrieves that value from the server\n      (node) => node?.server?.load || node?.server?.trailingSlash !== void 0\n    );\n    const data_pathname = add_data_suffix(event.url.pathname);\n    const should_prerender = get_option(nodes, \"prerender\") ?? false;\n    if (should_prerender) {\n      const mod = leaf_node.server;\n      if (mod?.actions) {\n        throw new Error(\"Cannot prerender pages with actions\");\n      }\n    } else if (state.prerendering) {\n      return new Response(void 0, {\n        status: 204\n      });\n    }\n    state.prerender_default = should_prerender;\n    const fetched = [];\n    if (get_option(nodes, \"ssr\") === false && !(state.prerendering && should_prerender_data)) {\n      if (BROWSER && action_result && !event.request.headers.has(\"x-sveltekit-action\")) ;\n      return await render_response({\n        branch: [],\n        fetched,\n        page_config: {\n          ssr: false,\n          csr: get_option(nodes, \"csr\") ?? true\n        },\n        status,\n        error: null,\n        event,\n        options: options2,\n        manifest,\n        state,\n        resolve_opts\n      });\n    }\n    const branch = [];\n    let load_error = null;\n    const server_promises = nodes.map((node, i) => {\n      if (load_error) {\n        throw load_error;\n      }\n      return Promise.resolve().then(async () => {\n        try {\n          if (node === leaf_node && action_result?.type === \"error\") {\n            throw action_result.error;\n          }\n          return await load_server_data({\n            event,\n            state,\n            node,\n            parent: async () => {\n              const data = {};\n              for (let j = 0; j < i; j += 1) {\n                const parent = await server_promises[j];\n                if (parent) Object.assign(data, parent.data);\n              }\n              return data;\n            }\n          });\n        } catch (e) {\n          load_error = /** @type {Error} */\n          e;\n          throw load_error;\n        }\n      });\n    });\n    const csr = get_option(nodes, \"csr\") ?? true;\n    const load_promises = nodes.map((node, i) => {\n      if (load_error) throw load_error;\n      return Promise.resolve().then(async () => {\n        try {\n          return await load_data({\n            event,\n            fetched,\n            node,\n            parent: async () => {\n              const data = {};\n              for (let j = 0; j < i; j += 1) {\n                Object.assign(data, await load_promises[j]);\n              }\n              return data;\n            },\n            resolve_opts,\n            server_data_promise: server_promises[i],\n            state,\n            csr\n          });\n        } catch (e) {\n          load_error = /** @type {Error} */\n          e;\n          throw load_error;\n        }\n      });\n    });\n    for (const p of server_promises) p.catch(() => {\n    });\n    for (const p of load_promises) p.catch(() => {\n    });\n    for (let i = 0; i < nodes.length; i += 1) {\n      const node = nodes[i];\n      if (node) {\n        try {\n          const server_data = await server_promises[i];\n          const data = await load_promises[i];\n          branch.push({ node, server_data, data });\n        } catch (e) {\n          const err = normalize_error(e);\n          if (err instanceof Redirect) {\n            if (state.prerendering && should_prerender_data) {\n              const body2 = JSON.stringify({\n                type: \"redirect\",\n                location: err.location\n              });\n              state.prerendering.dependencies.set(data_pathname, {\n                response: text(body2),\n                body: body2\n              });\n            }\n            return redirect_response(err.status, err.location);\n          }\n          const status2 = get_status(err);\n          const error = await handle_error_and_jsonify(event, options2, err);\n          while (i--) {\n            if (page.errors[i]) {\n              const index = (\n                /** @type {number} */\n                page.errors[i]\n              );\n              const node2 = await manifest._.nodes[index]();\n              let j = i;\n              while (!branch[j]) j -= 1;\n              return await render_response({\n                event,\n                options: options2,\n                manifest,\n                state,\n                resolve_opts,\n                page_config: { ssr: true, csr: true },\n                status: status2,\n                error,\n                branch: compact(branch.slice(0, j + 1)).concat({\n                  node: node2,\n                  data: null,\n                  server_data: null\n                }),\n                fetched\n              });\n            }\n          }\n          return static_error_page(options2, status2, error.message);\n        }\n      } else {\n        branch.push(null);\n      }\n    }\n    if (state.prerendering && should_prerender_data) {\n      let { data, chunks } = get_data_json(\n        event,\n        options2,\n        branch.map((node) => node?.server_data)\n      );\n      if (chunks) {\n        for await (const chunk of chunks) {\n          data += chunk;\n        }\n      }\n      state.prerendering.dependencies.set(data_pathname, {\n        response: text(data),\n        body: data\n      });\n    }\n    const ssr = get_option(nodes, \"ssr\") ?? true;\n    return await render_response({\n      event,\n      options: options2,\n      manifest,\n      state,\n      resolve_opts,\n      page_config: {\n        csr: get_option(nodes, \"csr\") ?? true,\n        ssr\n      },\n      status,\n      error: null,\n      branch: ssr === false ? [] : compact(branch),\n      action_result,\n      fetched\n    });\n  } catch (e) {\n    return await respond_with_error({\n      event,\n      options: options2,\n      manifest,\n      state,\n      status: 500,\n      error: e,\n      resolve_opts\n    });\n  }\n}\nconst INVALID_COOKIE_CHARACTER_REGEX = /[\\x00-\\x1F\\x7F()<>@,;:\"/[\\]?={} \\t]/;\nfunction validate_options(options2) {\n  if (options2?.path === void 0) {\n    throw new Error(\"You must specify a `path` when setting, deleting or serializing cookies\");\n  }\n}\nfunction get_cookies(request, url, trailing_slash) {\n  const header = request.headers.get(\"cookie\") ?? \"\";\n  const initial_cookies = parse(header, { decode: (value) => value });\n  const normalized_url = normalize_path(url.pathname, trailing_slash);\n  const new_cookies = {};\n  const defaults = {\n    httpOnly: true,\n    sameSite: \"lax\",\n    secure: url.hostname === \"localhost\" && url.protocol === \"http:\" ? false : true\n  };\n  const cookies = {\n    // The JSDoc param annotations appearing below for get, set and delete\n    // are necessary to expose the `cookie` library types to\n    // typescript users. `@type {import('@sveltejs/kit').Cookies}` above is not\n    // sufficient to do so.\n    /**\n     * @param {string} name\n     * @param {import('cookie').CookieParseOptions} [opts]\n     */\n    get(name, opts) {\n      const c = new_cookies[name];\n      if (c && domain_matches(url.hostname, c.options.domain) && path_matches(url.pathname, c.options.path)) {\n        return c.value;\n      }\n      const req_cookies = parse(header, { decode: opts?.decode });\n      const cookie = req_cookies[name];\n      return cookie;\n    },\n    /**\n     * @param {import('cookie').CookieParseOptions} [opts]\n     */\n    getAll(opts) {\n      const cookies2 = parse(header, { decode: opts?.decode });\n      for (const c of Object.values(new_cookies)) {\n        if (domain_matches(url.hostname, c.options.domain) && path_matches(url.pathname, c.options.path)) {\n          cookies2[c.name] = c.value;\n        }\n      }\n      return Object.entries(cookies2).map(([name, value]) => ({ name, value }));\n    },\n    /**\n     * @param {string} name\n     * @param {string} value\n     * @param {import('./page/types.js').Cookie['options']} options\n     */\n    set(name, value, options2) {\n      const illegal_characters = name.match(INVALID_COOKIE_CHARACTER_REGEX);\n      if (illegal_characters) {\n        console.warn(\n          `The cookie name \"${name}\" will be invalid in SvelteKit 3.0 as it contains ${illegal_characters.join(\n            \" and \"\n          )}. See RFC 2616 for more details https://datatracker.ietf.org/doc/html/rfc2616#section-2.2`\n        );\n      }\n      validate_options(options2);\n      set_internal(name, value, { ...defaults, ...options2 });\n    },\n    /**\n     * @param {string} name\n     *  @param {import('./page/types.js').Cookie['options']} options\n     */\n    delete(name, options2) {\n      validate_options(options2);\n      cookies.set(name, \"\", { ...options2, maxAge: 0 });\n    },\n    /**\n     * @param {string} name\n     * @param {string} value\n     *  @param {import('./page/types.js').Cookie['options']} options\n     */\n    serialize(name, value, options2) {\n      validate_options(options2);\n      let path = options2.path;\n      if (!options2.domain || options2.domain === url.hostname) {\n        path = resolve(normalized_url, path);\n      }\n      return serialize(name, value, { ...defaults, ...options2, path });\n    }\n  };\n  function get_cookie_header(destination, header2) {\n    const combined_cookies = {\n      // cookies sent by the user agent have lowest precedence\n      ...initial_cookies\n    };\n    for (const key2 in new_cookies) {\n      const cookie = new_cookies[key2];\n      if (!domain_matches(destination.hostname, cookie.options.domain)) continue;\n      if (!path_matches(destination.pathname, cookie.options.path)) continue;\n      const encoder2 = cookie.options.encode || encodeURIComponent;\n      combined_cookies[cookie.name] = encoder2(cookie.value);\n    }\n    if (header2) {\n      const parsed = parse(header2, { decode: (value) => value });\n      for (const name in parsed) {\n        combined_cookies[name] = parsed[name];\n      }\n    }\n    return Object.entries(combined_cookies).map(([name, value]) => `${name}=${value}`).join(\"; \");\n  }\n  function set_internal(name, value, options2) {\n    let path = options2.path;\n    if (!options2.domain || options2.domain === url.hostname) {\n      path = resolve(normalized_url, path);\n    }\n    new_cookies[name] = { name, value, options: { ...options2, path } };\n  }\n  return { cookies, new_cookies, get_cookie_header, set_internal };\n}\nfunction domain_matches(hostname, constraint) {\n  if (!constraint) return true;\n  const normalized = constraint[0] === \".\" ? constraint.slice(1) : constraint;\n  if (hostname === normalized) return true;\n  return hostname.endsWith(\".\" + normalized);\n}\nfunction path_matches(path, constraint) {\n  if (!constraint) return true;\n  const normalized = constraint.endsWith(\"/\") ? constraint.slice(0, -1) : constraint;\n  if (path === normalized) return true;\n  return path.startsWith(normalized + \"/\");\n}\nfunction add_cookies_to_headers(headers2, cookies) {\n  for (const new_cookie of cookies) {\n    const { name, value, options: options2 } = new_cookie;\n    headers2.append(\"set-cookie\", serialize(name, value, options2));\n    if (options2.path.endsWith(\".html\")) {\n      const path = add_data_suffix(options2.path);\n      headers2.append(\"set-cookie\", serialize(name, value, { ...options2, path }));\n    }\n  }\n}\nfunction create_fetch({ event, options: options2, manifest, state, get_cookie_header, set_internal }) {\n  const server_fetch = async (info, init2) => {\n    const original_request = normalize_fetch_input(info, init2, event.url);\n    let mode = (info instanceof Request ? info.mode : init2?.mode) ?? \"cors\";\n    let credentials = (info instanceof Request ? info.credentials : init2?.credentials) ?? \"same-origin\";\n    return options2.hooks.handleFetch({\n      event,\n      request: original_request,\n      fetch: async (info2, init3) => {\n        const request = normalize_fetch_input(info2, init3, event.url);\n        const url = new URL(request.url);\n        if (!request.headers.has(\"origin\")) {\n          request.headers.set(\"origin\", event.url.origin);\n        }\n        if (info2 !== original_request) {\n          mode = (info2 instanceof Request ? info2.mode : init3?.mode) ?? \"cors\";\n          credentials = (info2 instanceof Request ? info2.credentials : init3?.credentials) ?? \"same-origin\";\n        }\n        if ((request.method === \"GET\" || request.method === \"HEAD\") && (mode === \"no-cors\" && url.origin !== event.url.origin || url.origin === event.url.origin)) {\n          request.headers.delete(\"origin\");\n        }\n        if (url.origin !== event.url.origin) {\n          if (`.${url.hostname}`.endsWith(`.${event.url.hostname}`) && credentials !== \"omit\") {\n            const cookie = get_cookie_header(url, request.headers.get(\"cookie\"));\n            if (cookie) request.headers.set(\"cookie\", cookie);\n          }\n          return fetch(request);\n        }\n        const prefix = assets || base;\n        const decoded = decodeURIComponent(url.pathname);\n        const filename = (decoded.startsWith(prefix) ? decoded.slice(prefix.length) : decoded).slice(1);\n        const filename_html = `${filename}/index.html`;\n        const is_asset = manifest.assets.has(filename) || filename in manifest._.server_assets;\n        const is_asset_html = manifest.assets.has(filename_html) || filename_html in manifest._.server_assets;\n        if (is_asset || is_asset_html) {\n          const file = is_asset ? filename : filename_html;\n          if (state.read) {\n            const type = is_asset ? manifest.mimeTypes[filename.slice(filename.lastIndexOf(\".\"))] : \"text/html\";\n            return new Response(state.read(file), {\n              headers: type ? { \"content-type\": type } : {}\n            });\n          } else if (read_implementation && file in manifest._.server_assets) {\n            const length = manifest._.server_assets[file];\n            const type = manifest.mimeTypes[file.slice(file.lastIndexOf(\".\"))];\n            return new Response(read_implementation(file), {\n              headers: {\n                \"Content-Length\": \"\" + length,\n                \"Content-Type\": type\n              }\n            });\n          }\n          return await fetch(request);\n        }\n        if (manifest._.prerendered_routes.has(decoded) || decoded.at(-1) === \"/\" && manifest._.prerendered_routes.has(decoded.slice(0, -1))) {\n          return await fetch(request);\n        }\n        if (credentials !== \"omit\") {\n          const cookie = get_cookie_header(url, request.headers.get(\"cookie\"));\n          if (cookie) {\n            request.headers.set(\"cookie\", cookie);\n          }\n          const authorization = event.request.headers.get(\"authorization\");\n          if (authorization && !request.headers.has(\"authorization\")) {\n            request.headers.set(\"authorization\", authorization);\n          }\n        }\n        if (!request.headers.has(\"accept\")) {\n          request.headers.set(\"accept\", \"*/*\");\n        }\n        if (!request.headers.has(\"accept-language\")) {\n          request.headers.set(\n            \"accept-language\",\n            /** @type {string} */\n            event.request.headers.get(\"accept-language\")\n          );\n        }\n        const response = await respond(request, options2, manifest, {\n          ...state,\n          depth: state.depth + 1\n        });\n        const set_cookie = response.headers.get(\"set-cookie\");\n        if (set_cookie) {\n          for (const str of set_cookie_parser.splitCookiesString(set_cookie)) {\n            const { name, value, ...options3 } = set_cookie_parser.parseString(str, {\n              decodeValues: false\n            });\n            const path = options3.path ?? (url.pathname.split(\"/\").slice(0, -1).join(\"/\") || \"/\");\n            set_internal(name, value, {\n              path,\n              encode: (value2) => value2,\n              .../** @type {import('cookie').CookieSerializeOptions} */\n              options3\n            });\n          }\n        }\n        return response;\n      }\n    });\n  };\n  return (input, init2) => {\n    const response = server_fetch(input, init2);\n    response.catch(() => {\n    });\n    return response;\n  };\n}\nfunction normalize_fetch_input(info, init2, url) {\n  if (info instanceof Request) {\n    return info;\n  }\n  return new Request(typeof info === \"string\" ? new URL(info, url) : info, init2);\n}\nlet body;\nlet etag;\nlet headers;\nfunction get_public_env(request) {\n  body ??= `export const env=${JSON.stringify(public_env)}`;\n  etag ??= `W/${Date.now()}`;\n  headers ??= new Headers({\n    \"content-type\": \"application/javascript; charset=utf-8\",\n    etag\n  });\n  if (request.headers.get(\"if-none-match\") === etag) {\n    return new Response(void 0, { status: 304, headers });\n  }\n  return new Response(body, { headers });\n}\nfunction get_page_config(nodes) {\n  let current = {};\n  for (const node of nodes) {\n    if (!node?.universal?.config && !node?.server?.config) continue;\n    current = {\n      ...current,\n      ...node?.universal?.config,\n      ...node?.server?.config\n    };\n  }\n  return Object.keys(current).length ? current : void 0;\n}\nconst default_transform = ({ html }) => html;\nconst default_filter = () => false;\nconst default_preload = ({ type }) => type === \"js\" || type === \"css\";\nconst page_methods = /* @__PURE__ */ new Set([\"GET\", \"HEAD\", \"POST\"]);\nconst allowed_page_methods = /* @__PURE__ */ new Set([\"GET\", \"HEAD\", \"OPTIONS\"]);\nasync function respond(request, options2, manifest, state) {\n  const url = new URL(request.url);\n  if (options2.csrf_check_origin) {\n    const forbidden = is_form_content_type(request) && (request.method === \"POST\" || request.method === \"PUT\" || request.method === \"PATCH\" || request.method === \"DELETE\") && request.headers.get(\"origin\") !== url.origin;\n    if (forbidden) {\n      const csrf_error = new HttpError(\n        403,\n        `Cross-site ${request.method} form submissions are forbidden`\n      );\n      if (request.headers.get(\"accept\") === \"application/json\") {\n        return json(csrf_error.body, { status: csrf_error.status });\n      }\n      return text(csrf_error.body.message, { status: csrf_error.status });\n    }\n  }\n  if (options2.hash_routing && url.pathname !== base + \"/\" && url.pathname !== \"/[fallback]\") {\n    return text(\"Not found\", { status: 404 });\n  }\n  let invalidated_data_nodes;\n  const is_route_resolution_request = has_resolution_prefix(url.pathname);\n  const is_data_request = has_data_suffix(url.pathname);\n  if (is_route_resolution_request) {\n    url.pathname = strip_resolution_prefix(url.pathname);\n  } else if (is_data_request) {\n    url.pathname = strip_data_suffix(url.pathname) + (url.searchParams.get(TRAILING_SLASH_PARAM) === \"1\" ? \"/\" : \"\") || \"/\";\n    url.searchParams.delete(TRAILING_SLASH_PARAM);\n    invalidated_data_nodes = url.searchParams.get(INVALIDATED_PARAM)?.split(\"\").map((node) => node === \"1\");\n    url.searchParams.delete(INVALIDATED_PARAM);\n  }\n  let resolved_path;\n  try {\n    resolved_path = options2.hooks.reroute({ url: new URL(url) }) ?? url.pathname;\n  } catch {\n    return text(\"Internal Server Error\", {\n      status: 500\n    });\n  }\n  try {\n    resolved_path = decode_pathname(resolved_path);\n  } catch {\n    return text(\"Malformed URI\", { status: 400 });\n  }\n  let route = null;\n  let params = {};\n  if (base && !state.prerendering?.fallback) {\n    if (!resolved_path.startsWith(base)) {\n      return text(\"Not found\", { status: 404 });\n    }\n    resolved_path = resolved_path.slice(base.length) || \"/\";\n  }\n  if (is_route_resolution_request) {\n    return resolve_route(resolved_path, new URL(request.url), manifest);\n  }\n  if (resolved_path === `/${app_dir}/env.js`) {\n    return get_public_env(request);\n  }\n  if (resolved_path.startsWith(`/${app_dir}`)) {\n    const headers22 = new Headers();\n    headers22.set(\"cache-control\", \"public, max-age=0, must-revalidate\");\n    return text(\"Not found\", { status: 404, headers: headers22 });\n  }\n  if (!state.prerendering?.fallback) {\n    const matchers = await manifest._.matchers();\n    for (const candidate of manifest._.routes) {\n      const match = candidate.pattern.exec(resolved_path);\n      if (!match) continue;\n      const matched = exec(match, candidate.params, matchers);\n      if (matched) {\n        route = candidate;\n        params = decode_params(matched);\n        break;\n      }\n    }\n  }\n  let trailing_slash = void 0;\n  const headers2 = {};\n  let cookies_to_add = {};\n  const event = {\n    // @ts-expect-error `cookies` and `fetch` need to be created after the `event` itself\n    cookies: null,\n    // @ts-expect-error\n    fetch: null,\n    getClientAddress: state.getClientAddress || (() => {\n      throw new Error(\n        `${\"@sveltejs/adapter-cloudflare-workers\"} does not specify getClientAddress. Please raise an issue`\n      );\n    }),\n    locals: {},\n    params,\n    platform: state.platform,\n    request,\n    route: { id: route?.id ?? null },\n    setHeaders: (new_headers) => {\n      for (const key2 in new_headers) {\n        const lower = key2.toLowerCase();\n        const value = new_headers[key2];\n        if (lower === \"set-cookie\") {\n          throw new Error(\n            \"Use `event.cookies.set(name, value, options)` instead of `event.setHeaders` to set cookies\"\n          );\n        } else if (lower in headers2) {\n          throw new Error(`\"${key2}\" header is already set`);\n        } else {\n          headers2[lower] = value;\n          if (state.prerendering && lower === \"cache-control\") {\n            state.prerendering.cache = /** @type {string} */\n            value;\n          }\n        }\n      }\n    },\n    url,\n    isDataRequest: is_data_request,\n    isSubRequest: state.depth > 0\n  };\n  let resolve_opts = {\n    transformPageChunk: default_transform,\n    filterSerializedResponseHeaders: default_filter,\n    preload: default_preload\n  };\n  try {\n    if (route) {\n      if (url.pathname === base || url.pathname === base + \"/\") {\n        trailing_slash = \"always\";\n      } else if (route.page) {\n        const nodes = await load_page_nodes(route.page, manifest);\n        if (BROWSER) ;\n        trailing_slash = get_option(nodes, \"trailingSlash\");\n      } else if (route.endpoint) {\n        const node = await route.endpoint();\n        trailing_slash = node.trailingSlash;\n        if (BROWSER) ;\n      }\n      if (!is_data_request) {\n        const normalized = normalize_path(url.pathname, trailing_slash ?? \"never\");\n        if (normalized !== url.pathname && !state.prerendering?.fallback) {\n          return new Response(void 0, {\n            status: 308,\n            headers: {\n              \"x-sveltekit-normalize\": \"1\",\n              location: (\n                // ensure paths starting with '//' are not treated as protocol-relative\n                (normalized.startsWith(\"//\") ? url.origin + normalized : normalized) + (url.search === \"?\" ? \"\" : url.search)\n              )\n            }\n          });\n        }\n      }\n      if (state.before_handle || state.emulator?.platform) {\n        let config = {};\n        let prerender = false;\n        if (route.endpoint) {\n          const node = await route.endpoint();\n          config = node.config ?? config;\n          prerender = node.prerender ?? prerender;\n        } else if (route.page) {\n          const nodes = await load_page_nodes(route.page, manifest);\n          config = get_page_config(nodes) ?? config;\n          prerender = get_option(nodes, \"prerender\") ?? false;\n        }\n        if (state.before_handle) {\n          state.before_handle(event, config, prerender);\n        }\n        if (state.emulator?.platform) {\n          event.platform = await state.emulator.platform({ config, prerender });\n        }\n      }\n    } else if (state.emulator?.platform) {\n      event.platform = await state.emulator.platform({\n        config: {},\n        prerender: !!state.prerendering?.fallback\n      });\n    }\n    const { cookies, new_cookies, get_cookie_header, set_internal } = get_cookies(\n      request,\n      url,\n      trailing_slash ?? \"never\"\n    );\n    cookies_to_add = new_cookies;\n    event.cookies = cookies;\n    event.fetch = create_fetch({\n      event,\n      options: options2,\n      manifest,\n      state,\n      get_cookie_header,\n      set_internal\n    });\n    if (state.prerendering && !state.prerendering.fallback) disable_search(url);\n    const response = await options2.hooks.handle({\n      event,\n      resolve: (event2, opts) => resolve2(event2, opts).then((response2) => {\n        for (const key2 in headers2) {\n          const value = headers2[key2];\n          response2.headers.set(\n            key2,\n            /** @type {string} */\n            value\n          );\n        }\n        add_cookies_to_headers(response2.headers, Object.values(cookies_to_add));\n        if (state.prerendering && event2.route.id !== null) {\n          response2.headers.set(\"x-sveltekit-routeid\", encodeURI(event2.route.id));\n        }\n        return response2;\n      })\n    });\n    if (response.status === 200 && response.headers.has(\"etag\")) {\n      let if_none_match_value = request.headers.get(\"if-none-match\");\n      if (if_none_match_value?.startsWith('W/\"')) {\n        if_none_match_value = if_none_match_value.substring(2);\n      }\n      const etag2 = (\n        /** @type {string} */\n        response.headers.get(\"etag\")\n      );\n      if (if_none_match_value === etag2) {\n        const headers22 = new Headers({ etag: etag2 });\n        for (const key2 of [\n          \"cache-control\",\n          \"content-location\",\n          \"date\",\n          \"expires\",\n          \"vary\",\n          \"set-cookie\"\n        ]) {\n          const value = response.headers.get(key2);\n          if (value) headers22.set(key2, value);\n        }\n        return new Response(void 0, {\n          status: 304,\n          headers: headers22\n        });\n      }\n    }\n    if (is_data_request && response.status >= 300 && response.status <= 308) {\n      const location = response.headers.get(\"location\");\n      if (location) {\n        return redirect_json_response(new Redirect(\n          /** @type {any} */\n          response.status,\n          location\n        ));\n      }\n    }\n    return response;\n  } catch (e) {\n    if (e instanceof Redirect) {\n      const response = is_data_request ? redirect_json_response(e) : route?.page && is_action_json_request(event) ? action_json_redirect(e) : redirect_response(e.status, e.location);\n      add_cookies_to_headers(response.headers, Object.values(cookies_to_add));\n      return response;\n    }\n    return await handle_fatal_error(event, options2, e);\n  }\n  async function resolve2(event2, opts) {\n    try {\n      if (opts) {\n        resolve_opts = {\n          transformPageChunk: opts.transformPageChunk || default_transform,\n          filterSerializedResponseHeaders: opts.filterSerializedResponseHeaders || default_filter,\n          preload: opts.preload || default_preload\n        };\n      }\n      if (options2.hash_routing || state.prerendering?.fallback) {\n        return await render_response({\n          event: event2,\n          options: options2,\n          manifest,\n          state,\n          page_config: { ssr: false, csr: true },\n          status: 200,\n          error: null,\n          branch: [],\n          fetched: [],\n          resolve_opts\n        });\n      }\n      if (route) {\n        const method = (\n          /** @type {import('types').HttpMethod} */\n          event2.request.method\n        );\n        let response;\n        if (is_data_request) {\n          response = await render_data(\n            event2,\n            route,\n            options2,\n            manifest,\n            state,\n            invalidated_data_nodes,\n            trailing_slash ?? \"never\"\n          );\n        } else if (route.endpoint && (!route.page || is_endpoint_request(event2))) {\n          response = await render_endpoint(event2, await route.endpoint(), state);\n        } else if (route.page) {\n          if (page_methods.has(method)) {\n            response = await render_page(event2, route.page, options2, manifest, state, resolve_opts);\n          } else {\n            const allowed_methods2 = new Set(allowed_page_methods);\n            const node = await manifest._.nodes[route.page.leaf]();\n            if (node?.server?.actions) {\n              allowed_methods2.add(\"POST\");\n            }\n            if (method === \"OPTIONS\") {\n              response = new Response(null, {\n                status: 204,\n                headers: {\n                  allow: Array.from(allowed_methods2.values()).join(\", \")\n                }\n              });\n            } else {\n              const mod = [...allowed_methods2].reduce(\n                (acc, curr) => {\n                  acc[curr] = true;\n                  return acc;\n                },\n                /** @type {Record<string, any>} */\n                {}\n              );\n              response = method_not_allowed(mod, method);\n            }\n          }\n        } else {\n          throw new Error(\"This should never happen\");\n        }\n        if (request.method === \"GET\" && route.page && route.endpoint) {\n          const vary = response.headers.get(\"vary\")?.split(\",\")?.map((v) => v.trim().toLowerCase());\n          if (!(vary?.includes(\"accept\") || vary?.includes(\"*\"))) {\n            response = new Response(response.body, {\n              status: response.status,\n              statusText: response.statusText,\n              headers: new Headers(response.headers)\n            });\n            response.headers.append(\"Vary\", \"Accept\");\n          }\n        }\n        return response;\n      }\n      if (state.error && event2.isSubRequest) {\n        const headers22 = new Headers(request.headers);\n        headers22.set(\"x-sveltekit-error\", \"true\");\n        return await fetch(request, { headers: headers22 });\n      }\n      if (state.error) {\n        return text(\"Internal Server Error\", {\n          status: 500\n        });\n      }\n      if (state.depth === 0) {\n        return await respond_with_error({\n          event: event2,\n          options: options2,\n          manifest,\n          state,\n          status: 404,\n          error: new SvelteKitError(404, \"Not Found\", `Not found: ${event2.url.pathname}`),\n          resolve_opts\n        });\n      }\n      if (state.prerendering) {\n        return text(\"not found\", { status: 404 });\n      }\n      return await fetch(request);\n    } catch (e) {\n      return await handle_fatal_error(event2, options2, e);\n    } finally {\n      event2.cookies.set = () => {\n        throw new Error(\"Cannot use `cookies.set(...)` after the response has been generated\");\n      };\n      event2.setHeaders = () => {\n        throw new Error(\"Cannot use `setHeaders(...)` after the response has been generated\");\n      };\n    }\n  }\n}\nfunction filter_private_env(env, { public_prefix, private_prefix }) {\n  return Object.fromEntries(\n    Object.entries(env).filter(\n      ([k]) => k.startsWith(private_prefix) && (public_prefix === \"\" || !k.startsWith(public_prefix))\n    )\n  );\n}\nfunction filter_public_env(env, { public_prefix, private_prefix }) {\n  return Object.fromEntries(\n    Object.entries(env).filter(\n      ([k]) => k.startsWith(public_prefix) && (private_prefix === \"\" || !k.startsWith(private_prefix))\n    )\n  );\n}\nconst prerender_env_handler = {\n  get({ type }, prop) {\n    throw new Error(\n      `Cannot read values from $env/dynamic/${type} while prerendering (attempted to read env.${prop.toString()}). Use $env/static/${type} instead`\n    );\n  }\n};\nlet init_promise;\nclass Server {\n  /** @type {import('types').SSROptions} */\n  #options;\n  /** @type {import('@sveltejs/kit').SSRManifest} */\n  #manifest;\n  /** @param {import('@sveltejs/kit').SSRManifest} manifest */\n  constructor(manifest) {\n    this.#options = options;\n    this.#manifest = manifest;\n  }\n  /**\n   * @param {{\n   *   env: Record<string, string>;\n   *   read?: (file: string) => ReadableStream;\n   * }} opts\n   */\n  async init({ env, read }) {\n    const prefixes = {\n      public_prefix: this.#options.env_public_prefix,\n      private_prefix: this.#options.env_private_prefix\n    };\n    const private_env = filter_private_env(env, prefixes);\n    const public_env2 = filter_public_env(env, prefixes);\n    set_private_env(\n      prerendering ? new Proxy({ type: \"private\" }, prerender_env_handler) : private_env\n    );\n    set_public_env(\n      prerendering ? new Proxy({ type: \"public\" }, prerender_env_handler) : public_env2\n    );\n    set_safe_public_env(public_env2);\n    if (read) {\n      set_read_implementation(read);\n    }\n    await (init_promise ??= (async () => {\n      try {\n        const module = await get_hooks();\n        this.#options.hooks = {\n          handle: module.handle || (({ event, resolve: resolve2 }) => resolve2(event)),\n          handleError: module.handleError || (({ error }) => console.error(error)),\n          handleFetch: module.handleFetch || (({ request, fetch: fetch2 }) => fetch2(request)),\n          reroute: module.reroute || (() => {\n          }),\n          transport: module.transport || {}\n        };\n        if (module.init) {\n          await module.init();\n        }\n      } catch (error) {\n        {\n          throw error;\n        }\n      }\n    })());\n  }\n  /**\n   * @param {Request} request\n   * @param {import('types').RequestOptions} options\n   */\n  async respond(request, options2) {\n    return respond(request, this.#options, this.#manifest, {\n      ...options2,\n      error: false,\n      depth: 0\n    });\n  }\n}\nexport {\n  Server\n};\n", "import { i as increment_write_version, D as DIRTY, a as set_signal_status, C as CLEAN, U as UNOWNED, b as DERIVED, c as schedule_effect, d as active_reaction, u as untracking, e as is_runes, B as BLOCK_EFFECT, f as derived_sources, g as state_unsafe_mutation, h as active_effect, j as BRANCH_EFFECT, R as ROOT_EFFECT, k as untracked_writes, l as set_untracked_writes, M as MAYBE_DIRTY, m as get_next_sibling, o as define_property, p as set_active_reaction, q as set_active_effect, r as is_array, t as init_operations, v as get_first_child, w as hydration_failed, x as clear_text_content, y as array_from, z as component_root, A as create_text, E as branch, F as push, G as component_context, H as pop, L as LEGACY_PROPS, I as get, J as flush_sync } from \"./utils.js\";\nimport { a as safe_equals, e as equals } from \"./equality.js\";\nimport { H as HYDRATION_ERROR, b as HYDRATION_START, c as HYDRATION_END, r as render, a as push$1, d as setContext, p as pop$1 } from \"./index.js\";\nlet base = \"\";\nlet assets = base;\nconst app_dir = \"_app\";\nconst initial = { base, assets };\nfunction override(paths) {\n  base = paths.base;\n  assets = paths.assets;\n}\nfunction reset() {\n  base = initial.base;\n  assets = initial.assets;\n}\nfunction set_assets(path) {\n  assets = initial.assets = path;\n}\nlet public_env = {};\nlet safe_public_env = {};\nfunction set_private_env(environment) {\n}\nfunction set_public_env(environment) {\n  public_env = environment;\n}\nfunction set_safe_public_env(environment) {\n  safe_public_env = environment;\n}\nfunction hydration_mismatch(location) {\n  {\n    console.warn(`https://svelte.dev/e/hydration_mismatch`);\n  }\n}\nfunction source(v, stack) {\n  var signal = {\n    f: 0,\n    // TODO ideally we could skip this altogether, but it causes type errors\n    v,\n    reactions: null,\n    equals,\n    rv: 0,\n    wv: 0\n  };\n  return signal;\n}\n// @__NO_SIDE_EFFECTS__\nfunction mutable_source(initial_value, immutable = false) {\n  const s = source(initial_value);\n  if (!immutable) {\n    s.equals = safe_equals;\n  }\n  return s;\n}\nfunction set(source2, value) {\n  if (active_reaction !== null && !untracking && is_runes() && (active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 && // If the source was created locally within the current derived, then\n  // we allow the mutation.\n  (derived_sources === null || !derived_sources.includes(source2))) {\n    state_unsafe_mutation();\n  }\n  return internal_set(source2, value);\n}\nfunction internal_set(source2, value) {\n  if (!source2.equals(value)) {\n    source2.v;\n    source2.v = value;\n    source2.wv = increment_write_version();\n    mark_reactions(source2, DIRTY);\n    if (active_effect !== null && (active_effect.f & CLEAN) !== 0 && (active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0) {\n      if (untracked_writes === null) {\n        set_untracked_writes([source2]);\n      } else {\n        untracked_writes.push(source2);\n      }\n    }\n  }\n  return value;\n}\nfunction mark_reactions(signal, status) {\n  var reactions = signal.reactions;\n  if (reactions === null) return;\n  var length = reactions.length;\n  for (var i = 0; i < length; i++) {\n    var reaction = reactions[i];\n    var flags = reaction.f;\n    if ((flags & DIRTY) !== 0) continue;\n    set_signal_status(reaction, status);\n    if ((flags & (CLEAN | UNOWNED)) !== 0) {\n      if ((flags & DERIVED) !== 0) {\n        mark_reactions(\n          /** @type {Derived} */\n          reaction,\n          MAYBE_DIRTY\n        );\n      } else {\n        schedule_effect(\n          /** @type {Effect} */\n          reaction\n        );\n      }\n    }\n  }\n}\nlet hydrating = false;\nfunction set_hydrating(value) {\n  hydrating = value;\n}\nlet hydrate_node;\nfunction set_hydrate_node(node) {\n  if (node === null) {\n    hydration_mismatch();\n    throw HYDRATION_ERROR;\n  }\n  return hydrate_node = node;\n}\nfunction hydrate_next() {\n  return set_hydrate_node(\n    /** @type {TemplateNode} */\n    get_next_sibling(hydrate_node)\n  );\n}\nconst PASSIVE_EVENTS = [\"touchstart\", \"touchmove\"];\nfunction is_passive_event(name) {\n  return PASSIVE_EVENTS.includes(name);\n}\nconst all_registered_events = /* @__PURE__ */ new Set();\nconst root_event_handles = /* @__PURE__ */ new Set();\nfunction handle_event_propagation(event) {\n  var handler_element = this;\n  var owner_document = (\n    /** @type {Node} */\n    handler_element.ownerDocument\n  );\n  var event_name = event.type;\n  var path = event.composedPath?.() || [];\n  var current_target = (\n    /** @type {null | Element} */\n    path[0] || event.target\n  );\n  var path_idx = 0;\n  var handled_at = event.__root;\n  if (handled_at) {\n    var at_idx = path.indexOf(handled_at);\n    if (at_idx !== -1 && (handler_element === document || handler_element === /** @type {any} */\n    window)) {\n      event.__root = handler_element;\n      return;\n    }\n    var handler_idx = path.indexOf(handler_element);\n    if (handler_idx === -1) {\n      return;\n    }\n    if (at_idx <= handler_idx) {\n      path_idx = at_idx;\n    }\n  }\n  current_target = /** @type {Element} */\n  path[path_idx] || event.target;\n  if (current_target === handler_element) return;\n  define_property(event, \"currentTarget\", {\n    configurable: true,\n    get() {\n      return current_target || owner_document;\n    }\n  });\n  var previous_reaction = active_reaction;\n  var previous_effect = active_effect;\n  set_active_reaction(null);\n  set_active_effect(null);\n  try {\n    var throw_error;\n    var other_errors = [];\n    while (current_target !== null) {\n      var parent_element = current_target.assignedSlot || current_target.parentNode || /** @type {any} */\n      current_target.host || null;\n      try {\n        var delegated = current_target[\"__\" + event_name];\n        if (delegated !== void 0 && !/** @type {any} */\n        current_target.disabled) {\n          if (is_array(delegated)) {\n            var [fn, ...data] = delegated;\n            fn.apply(current_target, [event, ...data]);\n          } else {\n            delegated.call(current_target, event);\n          }\n        }\n      } catch (error) {\n        if (throw_error) {\n          other_errors.push(error);\n        } else {\n          throw_error = error;\n        }\n      }\n      if (event.cancelBubble || parent_element === handler_element || parent_element === null) {\n        break;\n      }\n      current_target = parent_element;\n    }\n    if (throw_error) {\n      for (let error of other_errors) {\n        queueMicrotask(() => {\n          throw error;\n        });\n      }\n      throw throw_error;\n    }\n  } finally {\n    event.__root = handler_element;\n    delete event.currentTarget;\n    set_active_reaction(previous_reaction);\n    set_active_effect(previous_effect);\n  }\n}\nfunction assign_nodes(start, end) {\n  var effect = (\n    /** @type {Effect} */\n    active_effect\n  );\n  if (effect.nodes_start === null) {\n    effect.nodes_start = start;\n    effect.nodes_end = end;\n  }\n}\nfunction mount(component, options2) {\n  return _mount(component, options2);\n}\nfunction hydrate(component, options2) {\n  init_operations();\n  options2.intro = options2.intro ?? false;\n  const target = options2.target;\n  const was_hydrating = hydrating;\n  const previous_hydrate_node = hydrate_node;\n  try {\n    var anchor = (\n      /** @type {TemplateNode} */\n      get_first_child(target)\n    );\n    while (anchor && (anchor.nodeType !== 8 || /** @type {Comment} */\n    anchor.data !== HYDRATION_START)) {\n      anchor = /** @type {TemplateNode} */\n      get_next_sibling(anchor);\n    }\n    if (!anchor) {\n      throw HYDRATION_ERROR;\n    }\n    set_hydrating(true);\n    set_hydrate_node(\n      /** @type {Comment} */\n      anchor\n    );\n    hydrate_next();\n    const instance = _mount(component, { ...options2, anchor });\n    if (hydrate_node === null || hydrate_node.nodeType !== 8 || /** @type {Comment} */\n    hydrate_node.data !== HYDRATION_END) {\n      hydration_mismatch();\n      throw HYDRATION_ERROR;\n    }\n    set_hydrating(false);\n    return (\n      /**  @type {Exports} */\n      instance\n    );\n  } catch (error) {\n    if (error === HYDRATION_ERROR) {\n      if (options2.recover === false) {\n        hydration_failed();\n      }\n      init_operations();\n      clear_text_content(target);\n      set_hydrating(false);\n      return mount(component, options2);\n    }\n    throw error;\n  } finally {\n    set_hydrating(was_hydrating);\n    set_hydrate_node(previous_hydrate_node);\n  }\n}\nconst document_listeners = /* @__PURE__ */ new Map();\nfunction _mount(Component, { target, anchor, props = {}, events, context, intro = true }) {\n  init_operations();\n  var registered_events = /* @__PURE__ */ new Set();\n  var event_handle = (events2) => {\n    for (var i = 0; i < events2.length; i++) {\n      var event_name = events2[i];\n      if (registered_events.has(event_name)) continue;\n      registered_events.add(event_name);\n      var passive = is_passive_event(event_name);\n      target.addEventListener(event_name, handle_event_propagation, { passive });\n      var n = document_listeners.get(event_name);\n      if (n === void 0) {\n        document.addEventListener(event_name, handle_event_propagation, { passive });\n        document_listeners.set(event_name, 1);\n      } else {\n        document_listeners.set(event_name, n + 1);\n      }\n    }\n  };\n  event_handle(array_from(all_registered_events));\n  root_event_handles.add(event_handle);\n  var component = void 0;\n  var unmount2 = component_root(() => {\n    var anchor_node = anchor ?? target.appendChild(create_text());\n    branch(() => {\n      if (context) {\n        push({});\n        var ctx = (\n          /** @type {ComponentContext} */\n          component_context\n        );\n        ctx.c = context;\n      }\n      if (events) {\n        props.$$events = events;\n      }\n      if (hydrating) {\n        assign_nodes(\n          /** @type {TemplateNode} */\n          anchor_node,\n          null\n        );\n      }\n      component = Component(anchor_node, props) || {};\n      if (hydrating) {\n        active_effect.nodes_end = hydrate_node;\n      }\n      if (context) {\n        pop();\n      }\n    });\n    return () => {\n      for (var event_name of registered_events) {\n        target.removeEventListener(event_name, handle_event_propagation);\n        var n = (\n          /** @type {number} */\n          document_listeners.get(event_name)\n        );\n        if (--n === 0) {\n          document.removeEventListener(event_name, handle_event_propagation);\n          document_listeners.delete(event_name);\n        } else {\n          document_listeners.set(event_name, n);\n        }\n      }\n      root_event_handles.delete(event_handle);\n      if (anchor_node !== anchor) {\n        anchor_node.parentNode?.removeChild(anchor_node);\n      }\n    };\n  });\n  mounted_components.set(component, unmount2);\n  return component;\n}\nlet mounted_components = /* @__PURE__ */ new WeakMap();\nfunction unmount(component, options2) {\n  const fn = mounted_components.get(component);\n  if (fn) {\n    mounted_components.delete(component);\n    return fn(options2);\n  }\n  return Promise.resolve();\n}\nfunction asClassComponent$1(component) {\n  return class extends Svelte4Component {\n    /** @param {any} options */\n    constructor(options2) {\n      super({\n        component,\n        ...options2\n      });\n    }\n  };\n}\nclass Svelte4Component {\n  /** @type {any} */\n  #events;\n  /** @type {Record<string, any>} */\n  #instance;\n  /**\n   * @param {ComponentConstructorOptions & {\n   *  component: any;\n   * }} options\n   */\n  constructor(options2) {\n    var sources = /* @__PURE__ */ new Map();\n    var add_source = (key, value) => {\n      var s = /* @__PURE__ */ mutable_source(value);\n      sources.set(key, s);\n      return s;\n    };\n    const props = new Proxy(\n      { ...options2.props || {}, $$events: {} },\n      {\n        get(target, prop) {\n          return get(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));\n        },\n        has(target, prop) {\n          if (prop === LEGACY_PROPS) return true;\n          get(sources.get(prop) ?? add_source(prop, Reflect.get(target, prop)));\n          return Reflect.has(target, prop);\n        },\n        set(target, prop, value) {\n          set(sources.get(prop) ?? add_source(prop, value), value);\n          return Reflect.set(target, prop, value);\n        }\n      }\n    );\n    this.#instance = (options2.hydrate ? hydrate : mount)(options2.component, {\n      target: options2.target,\n      anchor: options2.anchor,\n      props,\n      context: options2.context,\n      intro: options2.intro ?? false,\n      recover: options2.recover\n    });\n    if (!options2?.props?.$$host || options2.sync === false) {\n      flush_sync();\n    }\n    this.#events = props.$$events;\n    for (const key of Object.keys(this.#instance)) {\n      if (key === \"$set\" || key === \"$destroy\" || key === \"$on\") continue;\n      define_property(this, key, {\n        get() {\n          return this.#instance[key];\n        },\n        /** @param {any} value */\n        set(value) {\n          this.#instance[key] = value;\n        },\n        enumerable: true\n      });\n    }\n    this.#instance.$set = /** @param {Record<string, any>} next */\n    (next) => {\n      Object.assign(props, next);\n    };\n    this.#instance.$destroy = () => {\n      unmount(this.#instance);\n    };\n  }\n  /** @param {Record<string, any>} props */\n  $set(props) {\n    this.#instance.$set(props);\n  }\n  /**\n   * @param {string} event\n   * @param {(...args: any[]) => any} callback\n   * @returns {any}\n   */\n  $on(event, callback) {\n    this.#events[event] = this.#events[event] || [];\n    const cb = (...args) => callback.call(this, ...args);\n    this.#events[event].push(cb);\n    return () => {\n      this.#events[event] = this.#events[event].filter(\n        /** @param {any} fn */\n        (fn) => fn !== cb\n      );\n    };\n  }\n  $destroy() {\n    this.#instance.$destroy();\n  }\n}\nlet read_implementation = null;\nfunction set_read_implementation(fn) {\n  read_implementation = fn;\n}\nfunction set_manifest(_) {\n}\nfunction asClassComponent(component) {\n  const component_constructor = asClassComponent$1(component);\n  const _render = (props, { context } = {}) => {\n    const result = render(component, { props, context });\n    return {\n      css: { code: \"\", map: null },\n      head: result.head,\n      html: result.body\n    };\n  };\n  component_constructor.render = _render;\n  return component_constructor;\n}\nlet prerendering = false;\nfunction set_building() {\n}\nfunction set_prerendering() {\n  prerendering = true;\n}\nfunction Root($$payload, $$props) {\n  push$1();\n  let {\n    stores,\n    page,\n    constructors,\n    components = [],\n    form,\n    data_0 = null,\n    data_1 = null\n  } = $$props;\n  {\n    setContext(\"__svelte__\", stores);\n  }\n  {\n    stores.page.set(page);\n  }\n  const Pyramid_1 = constructors[1];\n  if (constructors[1]) {\n    $$payload.out += \"<!--[-->\";\n    const Pyramid_0 = constructors[0];\n    $$payload.out += `<!---->`;\n    Pyramid_0($$payload, {\n      data: data_0,\n      form,\n      children: ($$payload2) => {\n        $$payload2.out += `<!---->`;\n        Pyramid_1($$payload2, { data: data_1, form });\n        $$payload2.out += `<!---->`;\n      },\n      $$slots: { default: true }\n    });\n    $$payload.out += `<!---->`;\n  } else {\n    $$payload.out += \"<!--[!-->\";\n    const Pyramid_0 = constructors[0];\n    $$payload.out += `<!---->`;\n    Pyramid_0($$payload, { data: data_0, form });\n    $$payload.out += `<!---->`;\n  }\n  $$payload.out += `<!--]--> `;\n  {\n    $$payload.out += \"<!--[!-->\";\n  }\n  $$payload.out += `<!--]-->`;\n  pop$1();\n}\nconst root = asClassComponent(Root);\nconst options = {\n  app_template_contains_nonce: false,\n  csp: { \"mode\": \"auto\", \"directives\": { \"upgrade-insecure-requests\": false, \"block-all-mixed-content\": false }, \"reportOnly\": { \"upgrade-insecure-requests\": false, \"block-all-mixed-content\": false } },\n  csrf_check_origin: true,\n  embedded: false,\n  env_public_prefix: \"PUBLIC_\",\n  env_private_prefix: \"\",\n  hash_routing: false,\n  hooks: null,\n  // added lazily, via `get_hooks`\n  preload_strategy: \"modulepreload\",\n  root,\n  service_worker: false,\n  templates: {\n    app: ({ head, body, assets: assets2, nonce, env }) => '<!doctype html>\\n<html lang=\"en\">\\n\t<head>\\n\t\t<meta charset=\"utf-8\" />\\n\t\t<link rel=\"icon\" href=\"' + assets2 + '/favicon.png\" />\\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\\n\t\t' + head + '\\n\t</head>\\n\t<body data-sveltekit-preload-data=\"hover\">\\n\t\t<div style=\"display: contents\">' + body + \"</div>\\n\t</body>\\n</html>\\n\",\n    error: ({ status, message }) => '<!doctype html>\\n<html lang=\"en\">\\n\t<head>\\n\t\t<meta charset=\"utf-8\" />\\n\t\t<title>' + message + `</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\t--bg: white;\n\t\t\t\t--fg: #222;\n\t\t\t\t--divider: #ccc;\n\t\t\t\tbackground: var(--bg);\n\t\t\t\tcolor: var(--fg);\n\t\t\t\tfont-family:\n\t\t\t\t\tsystem-ui,\n\t\t\t\t\t-apple-system,\n\t\t\t\t\tBlinkMacSystemFont,\n\t\t\t\t\t'Segoe UI',\n\t\t\t\t\tRoboto,\n\t\t\t\t\tOxygen,\n\t\t\t\t\tUbuntu,\n\t\t\t\t\tCantarell,\n\t\t\t\t\t'Open Sans',\n\t\t\t\t\t'Helvetica Neue',\n\t\t\t\t\tsans-serif;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\theight: 100vh;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.error {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmax-width: 32rem;\n\t\t\t\tmargin: 0 1rem;\n\t\t\t}\n\n\t\t\t.status {\n\t\t\t\tfont-weight: 200;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tline-height: 1;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: -0.05rem;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tborder-left: 1px solid var(--divider);\n\t\t\t\tpadding: 0 0 0 1rem;\n\t\t\t\tmargin: 0 0 0 1rem;\n\t\t\t\tmin-height: 2.5rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t.message h1 {\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t@media (prefers-color-scheme: dark) {\n\t\t\t\tbody {\n\t\t\t\t\t--bg: #222;\n\t\t\t\t\t--fg: #ddd;\n\t\t\t\t\t--divider: #666;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"error\">\n\t\t\t<span class=\"status\">` + status + '</span>\\n\t\t\t<div class=\"message\">\\n\t\t\t\t<h1>' + message + \"</h1>\\n\t\t\t</div>\\n\t\t</div>\\n\t</body>\\n</html>\\n\"\n  },\n  version_hash: \"xspyj7\"\n};\nasync function get_hooks() {\n  let handle;\n  let handleFetch;\n  let handleError;\n  let init;\n  let reroute;\n  let transport;\n  return {\n    handle,\n    handleFetch,\n    handleError,\n    init,\n    reroute,\n    transport\n  };\n}\nexport {\n  app_dir as a,\n  base as b,\n  assets as c,\n  read_implementation as d,\n  options as e,\n  set_private_env as f,\n  get_hooks as g,\n  prerendering as h,\n  set_public_env as i,\n  set_safe_public_env as j,\n  set_read_implementation as k,\n  set_assets as l,\n  set_building as m,\n  set_manifest as n,\n  override as o,\n  public_env as p,\n  set_prerendering as q,\n  reset as r,\n  safe_public_env as s\n};\n", "/** @type {Record<string, string>} */\nexport const escaped = {\n\t'<': '\\\\u003C',\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t',\n\t'\\u2028': '\\\\u2028',\n\t'\\u2029': '\\\\u2029'\n};\n\nexport class DevalueError extends Error {\n\t/**\n\t * @param {string} message\n\t * @param {string[]} keys\n\t */\n\tconstructor(message, keys) {\n\t\tsuper(message);\n\t\tthis.name = 'DevalueError';\n\t\tthis.path = keys.join('');\n\t}\n}\n\n/** @param {any} thing */\nexport function is_primitive(thing) {\n\treturn Object(thing) !== thing;\n}\n\nconst object_proto_names = /* @__PURE__ */ Object.getOwnPropertyNames(\n\tObject.prototype\n)\n\t.sort()\n\t.join('\\0');\n\n/** @param {any} thing */\nexport function is_plain_object(thing) {\n\tconst proto = Object.getPrototypeOf(thing);\n\n\treturn (\n\t\tproto === Object.prototype ||\n\t\tproto === null ||\n\t\tObject.getOwnPropertyNames(proto).sort().join('\\0') === object_proto_names\n\t);\n}\n\n/** @param {any} thing */\nexport function get_type(thing) {\n\treturn Object.prototype.toString.call(thing).slice(8, -1);\n}\n\n/** @param {string} char */\nfunction get_escaped_char(char) {\n\tswitch (char) {\n\t\tcase '\"':\n\t\t\treturn '\\\\\"';\n\t\tcase '<':\n\t\t\treturn '\\\\u003C';\n\t\tcase '\\\\':\n\t\t\treturn '\\\\\\\\';\n\t\tcase '\\n':\n\t\t\treturn '\\\\n';\n\t\tcase '\\r':\n\t\t\treturn '\\\\r';\n\t\tcase '\\t':\n\t\t\treturn '\\\\t';\n\t\tcase '\\b':\n\t\t\treturn '\\\\b';\n\t\tcase '\\f':\n\t\t\treturn '\\\\f';\n\t\tcase '\\u2028':\n\t\t\treturn '\\\\u2028';\n\t\tcase '\\u2029':\n\t\t\treturn '\\\\u2029';\n\t\tdefault:\n\t\t\treturn char < ' '\n\t\t\t\t? `\\\\u${char.charCodeAt(0).toString(16).padStart(4, '0')}`\n\t\t\t\t: '';\n\t}\n}\n\n/** @param {string} str */\nexport function stringify_string(str) {\n\tlet result = '';\n\tlet last_pos = 0;\n\tconst len = str.length;\n\n\tfor (let i = 0; i < len; i += 1) {\n\t\tconst char = str[i];\n\t\tconst replacement = get_escaped_char(char);\n\t\tif (replacement) {\n\t\t\tresult += str.slice(last_pos, i) + replacement;\n\t\t\tlast_pos = i + 1;\n\t\t}\n\t}\n\n\treturn `\"${last_pos === 0 ? str : result + str.slice(last_pos)}\"`;\n}\n\n/** @param {Record<string | symbol, any>} object */\nexport function enumerable_symbols(object) {\n\treturn Object.getOwnPropertySymbols(object).filter(\n\t\t(symbol) => Object.getOwnPropertyDescriptor(object, symbol).enumerable\n\t);\n}\n", "import {\n\tDevalueError,\n\tenumerable_symbols,\n\tescaped,\n\tget_type,\n\tis_plain_object,\n\tis_primitive,\n\tstringify_string\n} from './utils.js';\n\nconst chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';\nconst unsafe_chars = /[<\\b\\f\\n\\r\\t\\0\\u2028\\u2029]/g;\nconst reserved =\n\t/^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;\n\n/**\n * Turn a value into the JavaScript that creates an equivalent value\n * @param {any} value\n * @param {(value: any) => string | void} [replacer]\n */\nexport function uneval(value, replacer) {\n\tconst counts = new Map();\n\n\t/** @type {string[]} */\n\tconst keys = [];\n\n\tconst custom = new Map();\n\n\t/** @param {any} thing */\n\tfunction walk(thing) {\n\t\tif (typeof thing === 'function') {\n\t\t\tthrow new DevalueError(`Cannot stringify a function`, keys);\n\t\t}\n\n\t\tif (!is_primitive(thing)) {\n\t\t\tif (counts.has(thing)) {\n\t\t\t\tcounts.set(thing, counts.get(thing) + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcounts.set(thing, 1);\n\n\t\t\tif (replacer) {\n\t\t\t\tconst str = replacer(thing);\n\n\t\t\t\tif (typeof str === 'string') {\n\t\t\t\t\tcustom.set(thing, str);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst type = get_type(thing);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'BigInt':\n\t\t\t\tcase 'String':\n\t\t\t\tcase 'Boolean':\n\t\t\t\tcase 'Date':\n\t\t\t\tcase 'RegExp':\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\t/** @type {any[]} */ (thing).forEach((value, i) => {\n\t\t\t\t\t\tkeys.push(`[${i}]`);\n\t\t\t\t\t\twalk(value);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Set':\n\t\t\t\t\tArray.from(thing).forEach(walk);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Map':\n\t\t\t\t\tfor (const [key, value] of thing) {\n\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t`.get(${is_primitive(key) ? stringify_primitive(key) : '...'})`\n\t\t\t\t\t\t);\n\t\t\t\t\t\twalk(value);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif (!is_plain_object(thing)) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify arbitrary non-POJOs`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (enumerable_symbols(thing).length > 0) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify POJOs with symbolic keys`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const key in thing) {\n\t\t\t\t\t\tkeys.push(`.${key}`);\n\t\t\t\t\t\twalk(thing[key]);\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalk(value);\n\n\tconst names = new Map();\n\n\tArray.from(counts)\n\t\t.filter((entry) => entry[1] > 1)\n\t\t.sort((a, b) => b[1] - a[1])\n\t\t.forEach((entry, i) => {\n\t\t\tnames.set(entry[0], get_name(i));\n\t\t});\n\n\t/**\n\t * @param {any} thing\n\t * @returns {string}\n\t */\n\tfunction stringify(thing) {\n\t\tif (names.has(thing)) {\n\t\t\treturn names.get(thing);\n\t\t}\n\n\t\tif (is_primitive(thing)) {\n\t\t\treturn stringify_primitive(thing);\n\t\t}\n\n\t\tif (custom.has(thing)) {\n\t\t\treturn custom.get(thing);\n\t\t}\n\n\t\tconst type = get_type(thing);\n\n\t\tswitch (type) {\n\t\t\tcase 'Number':\n\t\t\tcase 'String':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn `Object(${stringify(thing.valueOf())})`;\n\n\t\t\tcase 'RegExp':\n\t\t\t\treturn `new RegExp(${stringify_string(thing.source)}, \"${\n\t\t\t\t\tthing.flags\n\t\t\t\t}\")`;\n\n\t\t\tcase 'Date':\n\t\t\t\treturn `new Date(${thing.getTime()})`;\n\n\t\t\tcase 'Array':\n\t\t\t\tconst members = /** @type {any[]} */ (thing).map((v, i) =>\n\t\t\t\t\ti in thing ? stringify(v) : ''\n\t\t\t\t);\n\t\t\t\tconst tail = thing.length === 0 || thing.length - 1 in thing ? '' : ',';\n\t\t\t\treturn `[${members.join(',')}${tail}]`;\n\n\t\t\tcase 'Set':\n\t\t\tcase 'Map':\n\t\t\t\treturn `new ${type}([${Array.from(thing).map(stringify).join(',')}])`;\n\n\t\t\tdefault:\n\t\t\t\tconst obj = `{${Object.keys(thing)\n\t\t\t\t\t.map((key) => `${safe_key(key)}:${stringify(thing[key])}`)\n\t\t\t\t\t.join(',')}}`;\n\t\t\t\tconst proto = Object.getPrototypeOf(thing);\n\t\t\t\tif (proto === null) {\n\t\t\t\t\treturn Object.keys(thing).length > 0\n\t\t\t\t\t\t? `Object.assign(Object.create(null),${obj})`\n\t\t\t\t\t\t: `Object.create(null)`;\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\t\t}\n\t}\n\n\tconst str = stringify(value);\n\n\tif (names.size) {\n\t\t/** @type {string[]} */\n\t\tconst params = [];\n\n\t\t/** @type {string[]} */\n\t\tconst statements = [];\n\n\t\t/** @type {string[]} */\n\t\tconst values = [];\n\n\t\tnames.forEach((name, thing) => {\n\t\t\tparams.push(name);\n\n\t\t\tif (custom.has(thing)) {\n\t\t\t\tvalues.push(/** @type {string} */ (custom.get(thing)));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (is_primitive(thing)) {\n\t\t\t\tvalues.push(stringify_primitive(thing));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = get_type(thing);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'String':\n\t\t\t\tcase 'Boolean':\n\t\t\t\t\tvalues.push(`Object(${stringify(thing.valueOf())})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RegExp':\n\t\t\t\t\tvalues.push(thing.toString());\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Date':\n\t\t\t\t\tvalues.push(`new Date(${thing.getTime()})`);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tvalues.push(`Array(${thing.length})`);\n\t\t\t\t\t/** @type {any[]} */ (thing).forEach((v, i) => {\n\t\t\t\t\t\tstatements.push(`${name}[${i}]=${stringify(v)}`);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Set':\n\t\t\t\t\tvalues.push(`new Set`);\n\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t`${name}.${Array.from(thing)\n\t\t\t\t\t\t\t.map((v) => `add(${stringify(v)})`)\n\t\t\t\t\t\t\t.join('.')}`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Map':\n\t\t\t\t\tvalues.push(`new Map`);\n\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t`${name}.${Array.from(thing)\n\t\t\t\t\t\t\t.map(([k, v]) => `set(${stringify(k)}, ${stringify(v)})`)\n\t\t\t\t\t\t\t.join('.')}`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvalues.push(\n\t\t\t\t\t\tObject.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}'\n\t\t\t\t\t);\n\t\t\t\t\tObject.keys(thing).forEach((key) => {\n\t\t\t\t\t\tstatements.push(\n\t\t\t\t\t\t\t`${name}${safe_prop(key)}=${stringify(thing[key])}`\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tstatements.push(`return ${str}`);\n\n\t\treturn `(function(${params.join(',')}){${statements.join(\n\t\t\t';'\n\t\t)}}(${values.join(',')}))`;\n\t} else {\n\t\treturn str;\n\t}\n}\n\n/** @param {number} num */\nfunction get_name(num) {\n\tlet name = '';\n\n\tdo {\n\t\tname = chars[num % chars.length] + name;\n\t\tnum = ~~(num / chars.length) - 1;\n\t} while (num >= 0);\n\n\treturn reserved.test(name) ? `${name}0` : name;\n}\n\n/** @param {string} c */\nfunction escape_unsafe_char(c) {\n\treturn escaped[c] || c;\n}\n\n/** @param {string} str */\nfunction escape_unsafe_chars(str) {\n\treturn str.replace(unsafe_chars, escape_unsafe_char);\n}\n\n/** @param {string} key */\nfunction safe_key(key) {\n\treturn /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key)\n\t\t? key\n\t\t: escape_unsafe_chars(JSON.stringify(key));\n}\n\n/** @param {string} key */\nfunction safe_prop(key) {\n\treturn /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key)\n\t\t? `.${key}`\n\t\t: `[${escape_unsafe_chars(JSON.stringify(key))}]`;\n}\n\n/** @param {any} thing */\nfunction stringify_primitive(thing) {\n\tif (typeof thing === 'string') return stringify_string(thing);\n\tif (thing === void 0) return 'void 0';\n\tif (thing === 0 && 1 / thing < 0) return '-0';\n\tconst str = String(thing);\n\tif (typeof thing === 'number') return str.replace(/^(-)?0\\./, '$1.');\n\tif (typeof thing === 'bigint') return thing + 'n';\n\treturn str;\n}\n", "export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n", "import {\n\tDevalueError,\n\tenumerable_symbols,\n\tget_type,\n\tis_plain_object,\n\tis_primitive,\n\tstringify_string\n} from './utils.js';\nimport {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Turn a value into a JSON string that can be parsed with `devalue.parse`\n * @param {any} value\n * @param {Record<string, (value: any) => any>} [reducers]\n */\nexport function stringify(value, reducers) {\n\t/** @type {any[]} */\n\tconst stringified = [];\n\n\t/** @type {Map<any, number>} */\n\tconst indexes = new Map();\n\n\t/** @type {Array<{ key: string, fn: (value: any) => any }>} */\n\tconst custom = [];\n\tfor (const key in reducers) {\n\t\tcustom.push({ key, fn: reducers[key] });\n\t}\n\n\t/** @type {string[]} */\n\tconst keys = [];\n\n\tlet p = 0;\n\n\t/** @param {any} thing */\n\tfunction flatten(thing) {\n\t\tif (typeof thing === 'function') {\n\t\t\tthrow new DevalueError(`Cannot stringify a function`, keys);\n\t\t}\n\n\t\tif (indexes.has(thing)) return indexes.get(thing);\n\n\t\tif (thing === undefined) return UNDEFINED;\n\t\tif (Number.isNaN(thing)) return NAN;\n\t\tif (thing === Infinity) return POSITIVE_INFINITY;\n\t\tif (thing === -Infinity) return NEGATIVE_INFINITY;\n\t\tif (thing === 0 && 1 / thing < 0) return NEGATIVE_ZERO;\n\n\t\tconst index = p++;\n\t\tindexes.set(thing, index);\n\n\t\tfor (const { key, fn } of custom) {\n\t\t\tconst value = fn(thing);\n\t\t\tif (value) {\n\t\t\t\tstringified[index] = `[\"${key}\",${flatten(value)}]`;\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\n\t\tlet str = '';\n\n\t\tif (is_primitive(thing)) {\n\t\t\tstr = stringify_primitive(thing);\n\t\t} else {\n\t\t\tconst type = get_type(thing);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'String':\n\t\t\t\tcase 'Boolean':\n\t\t\t\t\tstr = `[\"Object\",${stringify_primitive(thing)}]`;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BigInt':\n\t\t\t\t\tstr = `[\"BigInt\",${thing}]`;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Date':\n\t\t\t\t\tconst valid = !isNaN(thing.getDate());\n\t\t\t\t\tstr = `[\"Date\",\"${valid ? thing.toISOString() : ''}\"]`;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RegExp':\n\t\t\t\t\tconst { source, flags } = thing;\n\t\t\t\t\tstr = flags\n\t\t\t\t\t\t? `[\"RegExp\",${stringify_string(source)},\"${flags}\"]`\n\t\t\t\t\t\t: `[\"RegExp\",${stringify_string(source)}]`;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tstr = '[';\n\n\t\t\t\t\tfor (let i = 0; i < thing.length; i += 1) {\n\t\t\t\t\t\tif (i > 0) str += ',';\n\n\t\t\t\t\t\tif (i in thing) {\n\t\t\t\t\t\t\tkeys.push(`[${i}]`);\n\t\t\t\t\t\t\tstr += flatten(thing[i]);\n\t\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += HOLE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tstr += ']';\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Set':\n\t\t\t\t\tstr = '[\"Set\"';\n\n\t\t\t\t\tfor (const value of thing) {\n\t\t\t\t\t\tstr += `,${flatten(value)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tstr += ']';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Map':\n\t\t\t\t\tstr = '[\"Map\"';\n\n\t\t\t\t\tfor (const [key, value] of thing) {\n\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t`.get(${is_primitive(key) ? stringify_primitive(key) : '...'})`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tstr += `,${flatten(key)},${flatten(value)}`;\n\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t}\n\n\t\t\t\t\tstr += ']';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif (!is_plain_object(thing)) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify arbitrary non-POJOs`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (enumerable_symbols(thing).length > 0) {\n\t\t\t\t\t\tthrow new DevalueError(\n\t\t\t\t\t\t\t`Cannot stringify POJOs with symbolic keys`,\n\t\t\t\t\t\t\tkeys\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Object.getPrototypeOf(thing) === null) {\n\t\t\t\t\t\tstr = '[\"null\"';\n\t\t\t\t\t\tfor (const key in thing) {\n\t\t\t\t\t\t\tkeys.push(`.${key}`);\n\t\t\t\t\t\t\tstr += `,${stringify_string(key)},${flatten(thing[key])}`;\n\t\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstr += ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr = '{';\n\t\t\t\t\t\tlet started = false;\n\t\t\t\t\t\tfor (const key in thing) {\n\t\t\t\t\t\t\tif (started) str += ',';\n\t\t\t\t\t\t\tstarted = true;\n\t\t\t\t\t\t\tkeys.push(`.${key}`);\n\t\t\t\t\t\t\tstr += `${stringify_string(key)}:${flatten(thing[key])}`;\n\t\t\t\t\t\t\tkeys.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstr += '}';\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstringified[index] = str;\n\t\treturn index;\n\t}\n\n\tconst index = flatten(value);\n\n\t// special case \u2014\u00A0value is represented as a negative index\n\tif (index < 0) return `${index}`;\n\n\treturn `[${stringified.join(',')}]`;\n}\n\n/**\n * @param {any} thing\n * @returns {string}\n */\nfunction stringify_primitive(thing) {\n\tconst type = typeof thing;\n\tif (type === 'string') return stringify_string(thing);\n\tif (thing instanceof String) return stringify_string(thing.toString());\n\tif (thing === void 0) return UNDEFINED.toString();\n\tif (thing === 0 && 1 / thing < 0) return NEGATIVE_ZERO.toString();\n\tif (type === 'bigint') return `[\"BigInt\",\"${thing}\"]`;\n\treturn String(thing);\n}\n", "export const manifest = (() => {\nfunction __memo(fn) {\n\tlet value;\n\treturn () => value ??= (value = fn());\n}\n\nreturn {\n\tappDir: \"_app\",\n\tappPath: \"_app\",\n\tassets: new Set([\"favicon.png\"]),\n\tmimeTypes: {\".png\":\"image/png\"},\n\t_: {\n\t\tclient: {start:\"_app/immutable/entry/start.1WSa0T3A.js\",app:\"_app/immutable/entry/app.BRwzrXqm.js\",imports:[\"_app/immutable/entry/start.1WSa0T3A.js\",\"_app/immutable/chunks/Bw9wOI06.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/1yBzCswO.js\",\"_app/immutable/chunks/CYgJF_JY.js\",\"_app/immutable/chunks/CVPTNizU.js\",\"_app/immutable/entry/app.BRwzrXqm.js\",\"_app/immutable/chunks/Ds6A-agx.js\",\"_app/immutable/chunks/1yBzCswO.js\",\"_app/immutable/chunks/ecJ9cc7E.js\",\"_app/immutable/chunks/B0QV6bzL.js\",\"_app/immutable/chunks/DKPK2Ygc.js\",\"_app/immutable/chunks/CVPTNizU.js\"],stylesheets:[],fonts:[],uses_env_dynamic_public:false},\n\t\tnodes: [\n\t\t\t__memo(() => import('../output/server/nodes/0.js')),\n\t\t\t__memo(() => import('../output/server/nodes/1.js')),\n\t\t\t__memo(() => import('../output/server/nodes/2.js')),\n\t\t\t__memo(() => import('../output/server/nodes/3.js'))\n\t\t],\n\t\troutes: [\n\t\t\t{\n\t\t\t\tid: \"/\",\n\t\t\t\tpattern: /^\\/$/,\n\t\t\t\tparams: [],\n\t\t\t\tpage: { layouts: [0,], errors: [1,], leaf: 2 },\n\t\t\t\tendpoint: null\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"/graphql\",\n\t\t\t\tpattern: /^\\/graphql\\/?$/,\n\t\t\t\tparams: [],\n\t\t\t\tpage: null,\n\t\t\t\tendpoint: __memo(() => import('../output/server/entries/endpoints/graphql/_server.ts.js'))\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: \"/kv-storage\",\n\t\t\t\tpattern: /^\\/kv-storage\\/?$/,\n\t\t\t\tparams: [],\n\t\t\t\tpage: { layouts: [0,], errors: [1,], leaf: 3 },\n\t\t\t\tendpoint: null\n\t\t\t}\n\t\t],\n\t\tprerendered_routes: new Set([]),\n\t\tmatchers: async () => {\n\t\t\t\n\t\t\treturn {  };\n\t\t},\n\t\tserver_assets: {}\n\t}\n}\n})();\n\nexport const prerendered = new Map([]);\n\nexport const base_path = \"\";\n", "import { Server } from '../output/server/index.js';\nimport { manifest, prerendered, base_path } from './manifest.js';\nimport { getAssetFromKV, mapRequestToAsset } from '@cloudflare/kv-asset-handler';\nimport static_asset_manifest_json from '__STATIC_CONTENT_MANIFEST';\nconst static_asset_manifest = JSON.parse(static_asset_manifest_json);\n\nconst server = new Server(manifest);\n\nconst app_path = `/${manifest.appPath}`;\n\nconst immutable = `${app_path}/immutable/`;\nconst version_file = `${app_path}/version.json`;\n\nexport default {\n\t/**\n\t * @param {Request} req\n\t * @param {any} env\n\t * @param {any} context\n\t */\n\tasync fetch(req, env, context) {\n\t\tawait server.init({ env });\n\n\t\tconst url = new URL(req.url);\n\n\t\t// static assets\n\t\tif (url.pathname.startsWith(app_path)) {\n\t\t\t/** @type {Response} */\n\t\t\tconst res = await get_asset_from_kv(req, env, context);\n\t\t\tif (is_error(res.status)) return res;\n\n\t\t\tconst cache_control = url.pathname.startsWith(immutable)\n\t\t\t\t? 'public, immutable, max-age=31536000'\n\t\t\t\t: 'no-cache';\n\n\t\t\treturn new Response(res.body, {\n\t\t\t\theaders: {\n\t\t\t\t\t// include original headers, minus cache-control which\n\t\t\t\t\t// is overridden, and etag which is no longer useful\n\t\t\t\t\t'cache-control': cache_control,\n\t\t\t\t\t'content-type': res.headers.get('content-type'),\n\t\t\t\t\t'x-robots-tag': 'noindex'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet { pathname, search } = url;\n\t\ttry {\n\t\t\tpathname = decodeURIComponent(pathname);\n\t\t} catch {\n\t\t\t// ignore invalid URI\n\t\t}\n\n\t\tconst stripped_pathname = pathname.replace(/\\/$/, '');\n\n\t\t// prerendered pages and /static files\n\t\tlet is_static_asset = false;\n\t\tconst filename = stripped_pathname.slice(base_path.length + 1);\n\t\tif (filename) {\n\t\t\tis_static_asset =\n\t\t\t\tmanifest.assets.has(filename) ||\n\t\t\t\tmanifest.assets.has(filename + '/index.html') ||\n\t\t\t\tfilename in manifest._.server_assets ||\n\t\t\t\tfilename + '/index.html' in manifest._.server_assets;\n\t\t}\n\n\t\tlet location = pathname.at(-1) === '/' ? stripped_pathname : pathname + '/';\n\n\t\tif (\n\t\t\tis_static_asset ||\n\t\t\tprerendered.has(pathname) ||\n\t\t\tpathname === version_file ||\n\t\t\tpathname.startsWith(immutable)\n\t\t) {\n\t\t\treturn get_asset_from_kv(req, env, context, (request, options) => {\n\t\t\t\tif (prerendered.has(pathname)) {\n\t\t\t\t\turl.pathname = '/' + prerendered.get(pathname).file;\n\t\t\t\t\treturn new Request(url.toString(), request);\n\t\t\t\t}\n\n\t\t\t\treturn mapRequestToAsset(request, options);\n\t\t\t});\n\t\t} else if (location && prerendered.has(location)) {\n\t\t\tif (search) location += search;\n\t\t\treturn new Response('', {\n\t\t\t\tstatus: 308,\n\t\t\t\theaders: {\n\t\t\t\t\tlocation\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// dynamically-generated pages\n\t\treturn await server.respond(req, {\n\t\t\tplatform: {\n\t\t\t\tenv,\n\t\t\t\tcontext,\n\t\t\t\t// @ts-expect-error lib.dom is interfering with workers-types\n\t\t\t\tcaches,\n\t\t\t\t// @ts-expect-error req is actually a Cloudflare request not a standard request\n\t\t\t\tcf: req.cf\n\t\t\t},\n\t\t\tgetClientAddress() {\n\t\t\t\treturn req.headers.get('cf-connecting-ip');\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * @param {Request} req\n * @param {any} env\n * @param {any} context\n */\nasync function get_asset_from_kv(req, env, context, map = mapRequestToAsset) {\n\treturn await getAssetFromKV(\n\t\t{\n\t\t\trequest: req,\n\t\t\twaitUntil(promise) {\n\t\t\t\treturn context.waitUntil(promise);\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tASSET_NAMESPACE: env.__STATIC_CONTENT,\n\t\t\tASSET_MANIFEST: static_asset_manifest,\n\t\t\tmapRequestToAsset: map\n\t\t}\n\t);\n}\n\n/**\n * @param {number} status\n * @returns {boolean}\n */\nfunction is_error(status) {\n\treturn status > 399;\n}\n"],
  "mappings": "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",
  "names": ["context", "component", "push2", "options", "error", "root", "index", "key", "context", "push", "pop", "component", "component_context", "options", "hash", "body", "init", "headers", "text2", "base", "key", "inspect", "validate", "stop", "set", "subscribe", "get", "parse", "serialize", "options", "index", "key", "encode", "decode", "parseString", "options", "key", "value", "parse", "cookies", "splitCookiesString", "error", "redirect", "init", "fetch", "error2", "key", "get", "load", "get", "key", "parse", "set", "subscribe", "push", "pop", "escape_html", "pattern", "escaped", "push", "escape_html", "page", "pop", "__exports", "component", "fonts", "imports", "index", "stylesheets", "component_cache", "init__", "__exports", "component", "fonts", "imports", "index", "stylesheets", "universal_id", "component_cache", "init__", "headers", "key", "map", "index", "keyMap", "source", "fetch", "init_page", "client2", "resolve", "marshalVariables", "fetch2", "fetchParams2", "text", "variablesChanged", "error", "error", "client", "map", "safe_not_equal", "source", "key", "component", "fetchParams", "session", "load", "context", "subscriber_queue", "noop", "init_page", "keys", "index", "set", "key2", "options", "resolve", "plugins", "client2", "fetch", "reject", "init", "body", "get", "page_exports", "load", "init_page", "page_svelte_exports", "_page", "page", "names", "escape_html", "init_page_svelte", "__exports", "component", "fonts", "imports", "index", "stylesheets", "page_exports", "universal_id", "component_cache", "init__", "init_page", "config", "config", "value", "startFrom", "array", "config", "ref", "actions", "config", "sql", "otel", "rawTracer", "schema", "query", "param", "config", "encoder", "sql", "join", "placeholder", "name", "SQL", "schema", "query", "key", "init_alias", "result", "index", "key", "init_utils", "ForeignKeyBuilder", "ForeignKey", "init_foreign_keys", "config", "uniqueKeyName", "UniqueConstraintBuilder", "UniqueOnConstraintBuilder", "UniqueConstraint", "init_unique_constraint", "init_common", "init_foreign_keys", "init_unique_constraint", "config", "ref", "actions", "ForeignKeyBuilder", "uniqueKeyName", "config", "init_utils", "init_common", "config", "init_utils", "init_common", "config", "init_utils", "init_common", "init_common", "init_common", "text", "config", "init_utils", "init_common", "init_common", "config", "text", "schema", "name", "init_table", "init_table", "init_utils", "session", "schema", "key", "InlineForeignKeys", "init_table", "init_table", "schema", "key", "relations", "config", "init_sql", "init_sql", "init_table", "init_utils", "config", "set", "query", "index", "groupBy", "table", "select", "sql", "schema", "key", "joinOn", "field", "session", "init_select", "init_utils", "config", "source", "key", "session", "join", "groupBy", "query", "init_query_builder", "init_select", "init_table", "init_utils", "init_query_builder", "session", "config", "init_table", "init_utils", "session", "set", "source", "join", "init_query_builder", "init_select", "source", "schema", "session", "config", "query", "execute", "session", "schema", "query", "source", "config", "config", "PrimaryKeyBuilder", "PrimaryKey", "init_primary_keys", "init_table", "init_session", "query", "sql", "session", "schema", "init_subquery", "init_utils", "init_utils", "init_query_builder", "init_table", "query", "config", "init_alias", "init_foreign_keys", "init_primary_keys", "init_session", "init_subquery", "init_table", "init_unique_constraint", "init_utils", "config", "query", "init_session", "init_utils", "client", "schema", "options", "query", "builtQuery", "config", "client", "config", "schema", "session", "init_session", "init_session", "noop", "headers", "config", "endResponse", "init_version", "source", "source", "body", "array", "source", "source", "source", "OperationTypeNode", "DirectiveLocation", "Kind", "indent", "options", "TokenKind", "body", "source", "key", "array", "tag", "instanceOf", "source", "body", "parse", "source", "options", "document", "map", "key", "isDigit", "options", "array", "map", "key", "root", "inArray", "keys", "index", "key", "array", "config", "parseValue", "enumValue", "schema", "config", "schema", "TypeKind", "schema", "config", "map", "schema", "context", "error", "union", "schema", "schema", "context", "context", "schema", "context", "context", "schema", "context", "schema", "context", "fragment", "context", "schema", "context", "context", "context", "fragment", "context", "fragment", "s", "context", "context", "fragment", "context", "context", "fragment", "map", "context", "context", "schema", "context", "schema", "context", "key", "key", "error", "errorPrefix", "index", "keys", "key", "variableValue", "keys", "isNull", "schema", "fragment", "context", "schema", "document", "key", "context", "context", "context", "schema", "context", "schema", "context", "schema", "context", "schema", "context", "context", "context", "context", "schema", "context", "schema", "context", "context", "error", "keys", "context", "context", "schema", "error", "set", "fragment", "schema", "schema", "options", "context", "error", "init_validate", "error", "init_validate", "options", "config", "getNamedType", "options", "config", "source", "document", "parse", "init_validate", "init_version", "schema", "context", "inspect", "formatValue", "formatObjectValue", "formatError", "formatArray", "isJSONable", "formatObject", "MAX_RECURSIVE_DEPTH", "getObjectTag", "key", "array", "tag", "init_esm", "error", "key", "options", "init_errors", "isIterableObject", "isObjectLike", "hasOwnProperty", "getArgumentValues", "inspect", "isNull", "hasOwnProperty", "init_esm", "init_errors", "cache3", "cache4", "cache5", "schema", "getArgumentValues", "inspect", "init_esm", "integerStringRegExp", "astFromValue", "isIterableObject", "isObjectLike", "integerStringRegExp", "inspect", "init_astFromValue", "init_esm", "schema", "init_errors", "getRootTypeNames", "getRootTypes", "getRootTypeMap", "schema", "options", "astFromValue", "type", "arg", "init_astFromValue", "keys", "join", "hasMultilineItems", "key", "indent", "block", "array", "wrap", "printBlockString", "escaped", "leadingWhitespace", "MAX_LINE_LENGTH", "printDocASTReducer", "DirectiveLocation", "MapperKind", "config", "key", "schema", "config", "schema", "key", "schema", "schema", "source", "index", "key", "isPromise", "error", "reject", "resolve", "error", "reject", "key", "init_directives", "collectFieldsImpl", "schema", "shouldIncludeNode", "getFieldEntryKey", "doesFragmentConditionMatch", "defer", "fragment", "collectFields", "init_collectFields", "init_directives", "getOperationASTFromRequest", "proxyMethodFactory", "addPath", "key", "pathToArray", "printPathArray", "init_Path", "getListenersOfAbortSignal", "getAbortPromise", "reject", "init_esm", "init_errors", "init_collectFields", "init_Path", "init_directives", "schema", "validator", "init_esm", "schema", "init_esm", "schema", "schema", "defaultFieldResolver", "config", "init_esm", "options", "init_esm", "config", "init_esm", "mergeArguments", "source", "config", "init_directives", "init_esm", "config", "init_esm", "init_directives", "config", "init_enum", "init_directives", "init_utils", "CompareVal", "config", "init_fields", "init_esm", "init_directives", "init_utils", "config", "init_directives", "init_fields", "config", "init_esm", "config", "init_directives", "init_fields", "config", "init_directives", "config", "init_directives", "config", "init_type", "init_directives", "init_fields", "config", "init_directives", "config", "init_esm", "init_directives", "init_enum", "init_type", "config", "options", "parse", "init_esm", "init_utils", "init_directives", "init_enum", "init_fields", "init_type", "init_utils", "schema", "init_esm", "init_esm", "defaultFieldResolver", "schema", "init_esm", "init_types", "init_esm", "init_types", "init_schema", "init_esm", "init_graphql", "init_utils", "init_esm", "init_graphql", "init_utils", "mapAsyncIterator", "source", "error", "isAsyncIterable", "init_utils", "plugins", "schema", "parse", "validate", "execute", "subscribe", "init", "source", "context", "error", "err", "isAsyncIterable", "mapAsyncIterator", "result", "init_utils", "options", "plugins", "init_use_schema", "error", "isDev", "maskError", "context", "init_utils", "context", "init_esm", "init_utils", "init_use_schema", "error", "init_utils", "SuppressedError", "init_utils", "error", "SuppressedError", "init_utils", "error", "SuppressedError", "init_esm", "error", "resolve", "error", "init_esm", "invariant", "init_invariant", "key", "init_esm", "getVariableValues", "schema", "options", "error", "hasOwnProperty", "inspect", "printPathArray", "init_values", "init_esm", "execute", "error", "schema", "document", "getVariableValues", "defaultFieldResolver", "defaultTypeResolver", "collectFields", "addPath", "source", "getFieldDef", "info", "getArgumentValues", "pathToArray", "handledError", "coercedError", "inspect", "invariant", "index", "isIterableObject", "collectSubfields", "subscribe", "init_esm", "init_invariant", "init_values", "getFragmentsFromDocument", "isObjectLike", "resolve", "subscribe", "execute", "init_esm", "executorFromSchema", "schema", "init_execution", "init_values", "init_esm", "init_execution", "isAsyncIterable", "body", "key", "controller", "resolve", "source", "descriptors", "isPromise", "error", "reject", "init_utils", "push", "stop", "controller", "headers", "key", "query", "fakePromise", "resolve", "reject", "isPromise", "init_utils", "options", "isPromise", "handleRequest", "response", "request", "res$", "fakePromise", "init_esm", "init_utils", "init_types", "init_types", "headers", "options", "endResponse", "DefaultResponseCtor", "isPromise", "init_utils", "init_esm", "init_types", "init_utils", "isGraphQLError", "isOriginalGraphQLError", "error", "headers", "init_error", "init_esm", "query", "import_fetch", "init_utils", "import_fetch", "init_utils", "init_utils", "init_utils", "init_esm", "init_utils", "dset", "keys", "map", "keys", "key", "dset", "init_esm", "init_utils", "isObject", "init_esm", "init_esm", "error", "init_esm", "document", "init_esm", "endResponse", "init_esm", "s", "index", "options", "context", "key", "v", "bf", "init_esm", "document", "schema", "options", "sanitizedResult", "stringifier", "isGraphQLError", "init_esm", "init_error", "isAsyncIterable", "fakePromise", "init_esm", "init_error", "isGraphQLError", "init_esm", "init_error", "isAsyncIterable", "fakePromise", "result", "init_esm", "init_error", "isAsyncIterable", "init_esm", "endResponse", "init_esm", "defaultRenderLandingPage", "document", "init_esm", "init_error", "error", "isDev", "isGraphQLError", "options", "server", "init_esm", "init_error", "key", "error", "parse", "context", "isAsyncIterable", "resolve", "reject", "body", "s", "value", "push", "execute", "options", "_a", "stop", "iteration", "_this", "iterations", "d", "b", "RepeaterOverflowError", "FixedBuffer", "SlidingBuffer", "DroppingBuffer", "Repeater", "init_esm", "init_esm", "init_types", "init_esm", "init_schema", "init_types", "init_esm", "text", "key", "__awaiter", "resolve", "reject", "options", "mapRequestToAsset", "getAssetFromKV", "body", "etag", "immutable", "s", "error", "effect", "component", "context", "key", "component", "context", "push", "stores", "page", "pop", "body", "handleError", "init", "keys", "keys", "str", "value", "key", "names", "stringify", "key", "keys", "flatten", "index", "value", "stringify_primitive", "source", "error", "page", "server", "redirect", "error", "info", "text2", "get", "filter", "chars", "source", "reject", "manifest", "branch", "client", "stylesheets", "fonts", "hydrate", "indent", "push", "encoder", "redirect", "page", "index", "encoder2", "info2", "config", "fetch2", "context", "options", "map"]
}
